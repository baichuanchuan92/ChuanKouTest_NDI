<?xml version="1.0"?>
<doc>
    <assembly>
        "NMotive"
    </assembly>
    <members>
        <member name="T:MoCapCore.cStreamsManager">
            <summary>A concrete implementation of the the cIStreamsManager interface.</summary>
        </member>
        <member name="M:NMotive.Filter.Process(NMotive.Take,NMotive.FrameRangeSet)">
            <summary>
 Apply the filter to the all the markers in the given frame ranges in
the given take.
</summary>
            <param name="take">Take to filter.</param>
            <param name="selectedRanges">Data will be filtered in these ranges.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="M:NMotive.Filter.Process(NMotive.Take,NMotive.FrameRangeSet,System.Collections.Generic.IList`1{NMotive.UID})">
            <summary>
 Apply the filter to the given markers in the given frame ranges in
the given take.
</summary>
            <param name="take">Take to filter.</param>
            <param name="selectedRanges">Data will be filtered in these ranges.</param>
            <param name="markerIDs">ID's of the markers to filter.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="M:NMotive.Filter.Process(NMotive.Take,System.Collections.Generic.IList`1{NMotive.UID})">
            <summary>
Apply the filter to the given markers in all the frames of the 
given take.
</summary>
            <param name="take">Take to filter.</param>
            <param name="markerIDs">ID's of the markers to filter.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="M:NMotive.Filter.Process(NMotive.Take)">
            <summary>
Apply the filter to all markers in all the frames of the 
given take.
</summary>
            <param name="take">Take to filter.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="P:NMotive.Filter.CutOffFrequency">
            <summary>
Cutoff frequency in Hz for this filter. Default is 15.
</summary>
        </member>
        <member name="P:NMotive.Filter.DataRate">
            <summary>
Gets and sets the data rate property for this filter. Default
is 120.
</summary>
        </member>
        <member name="M:NMotive.Filter.#ctor(System.Double,System.Double)">
            <summary>
Constructs a <c>Filter</c> object with the given data rate and 
cutoff frequency.
</summary>
            <param name="dataRate">The data rate.</param>
            <param name="cutoffFrequency">The cutoff frequency for the filter.</param>
        </member>
        <member name="M:NMotive.Filter.#ctor">
            <summary>
Constructs a <c>Filter</c> object with default cutoff frequency
and data rate.
</summary>
        </member>
        <member name="T:NMotive.Filter">
            <summary>
Smooths 3D data by passing it through a low pass filter.
The lower the cutoff frequency setting, the more smoothed the data will
be.  High frequencies are present during sharp transitions in the data, 
such as foot-plants, but can also be introduced by noise in the data. 
Commonly used ranges for Filter Cutoff Frequency are 7-12 Hz, but you 
may want to adjust that up for fast, sharp motions to avoid softening 
transitions in the motion that need to stay sharp.
</summary>
        </member>
        <member name="T:MoCapCore.cFilterOp">
            <summary>
Either change the label of the passed marker, or combine it with an existing marker in the scene if
one already exists.
</summary>
        </member>
        <member name="M:NMotive.C3DExporter.SetAxisMotionBuilderCompatible">
            <summary>
Sets the axis mapping to be motion builder compatible.
X-axis -&gt; negative X-axis
Y-axis -&gt; negative Z-axis
Z-axis -&gt; positive Y-axis
</summary>
        </member>
        <member name="M:NMotive.C3DExporter.Export(NMotive.Take,NMotive.DataStream)">
            <exclude />
            <summary>
Exports the given take to the given data stream.
</summary>
            <param name="take">The take to export</param>
            <param name="stream">The data stream to export to.</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="P:NMotive.C3DExporter.ColonNameSeparator">
            <summary>
Gets and sets the property for determining if the marker name separator
is a colon or an underscore. If true colons will be used, if false 
underscores will be used.
</summary>
        </member>
        <member name="P:NMotive.C3DExporter.ZAxis">
            <summary>
Gets and sets translations for movement along the z-axis for C3D export.
Default is positive y-axis.
</summary>
        </member>
        <member name="P:NMotive.C3DExporter.YAxis">
            <summary>
Gets and sets translations for movement along the y-axis for C3D export.
Default is negative z-axis.
</summary>
        </member>
        <member name="P:NMotive.C3DExporter.XAxis">
            <summary>
Gets and sets translations for movement along the x-axis for C3D export.
Default is negative x-axis.
</summary>
        </member>
        <member name="P:NMotive.C3DExporter.Units">
            <summary>
Gets and sets the length units option.
This option determines the base unit of measurement for positioning
in C3D export. Default value is meters.
</summary>
        </member>
        <member name="P:NMotive.C3DExporter.UseTimeCode">
            <summary>
Gets and sets the use time code property. Default is <c>true</c>.
</summary>
        </member>
        <member name="P:NMotive.C3DExporter.WriteFingerTipMarkers">
            <summary>
Gets and sets the export fingertip markers property.
If <c>true</c> synthetic fingertip markers generated by the solver 
will be exported. The default is <c>false</c></summary>
        </member>
        <member name="P:NMotive.C3DExporter.RenameUnlabeledMarkers">
            <summary>
Gets and sets the rename unlabeled markers property.
Renames unlabeled markers as "_000X". Default is <c>false</c></summary>
        </member>
        <member name="P:NMotive.C3DExporter.WriteUnlabeledMarkers">
            <summary>
Gets and sets export unlabeled markers property. The default is <c>true</c>.
</summary>
        </member>
        <member name="P:NMotive.C3DExporter.UseZeroBasedFrameIndex">
            <summary>
Gets and sets a boolean indicating whether frame indexing in the output
C3D file should be ones base or zero based. The default is 
<c>true</c> - zero based.
</summary>
            <remarks>
Zero based is the convention for MotionBuilder. Ones based is per C3D
Specification.
</remarks>
        </member>
        <member name="M:NMotive.C3DExporter.#ctor">
            <summary>
Constructs a <c>C3DExporter</c> object with the default options.
</summary>
        </member>
        <member name="T:NMotive.C3DExporter">
            <summary>
Class for exporting take files to C3D format.
</summary>
        </member>
        <member name="T:Motive.cC3DExporter">
            <summary>
Exporter class for C3D files
</summary>
        </member>
        <member name="M:NMotive.Trajectorizer.Process(NMotive.Take,NMotive.FrameRangeSet)">
            <summary>
Trajectorizes a the a set of frame ranges in a take.
</summary>
            <param name="take">Take to trajectorize.</param>
            <param name="frameRanges">A set of frame ranges to trajectorize.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="M:NMotive.Trajectorizer.Process(NMotive.Take)">
            <summary>
Trajectorizes the given take.
</summary>
            <param name="take">Take to trajectorize.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="M:NMotive.Trajectorizer.#ctor(NMotive.ProgressIndicator)">
            <summary>
Constructs a <c>Trajectorizer</c> instance that uses the given 
progress indicator to report progress.
</summary>
            <param name="progress">This progress indicator will be used to report
trajectorization progress.</param>
        </member>
        <member name="M:NMotive.Trajectorizer.#ctor">
            <summary>
Constructs a <c>Trajectorizer</c> instance.
</summary>
        </member>
        <member name="T:NMotive.Trajectorizer">
            <summary>
Class for performing trajectorization of the 2D data in a take to
produce 3D data.
</summary>
        </member>
        <member name="M:MoCapCore.cActiveMarkerList.SelectedMarkers">
            <summary>
Get the list of selected, currently active markers. The array reference returned by this call
can change between calls depending on application state, so do not cache the returned array
between function calls. Not thread safe. Should only be called from Operations thread.
</summary>
        </member>
        <member name="M:MoCapCore.cActiveMarkerList.Markers">
            <summary>
Get the list of currently active markers. The array reference returned by this call
can change between calls depending on application state, so do not cache the returned array
between function calls. Thread safe.
</summary>
        </member>
        <member name="M:MoCapCore.cActiveMarkerList.ClearSelection">
            <summary>De-selects all selected markers in the list. Called only from Operations thread.</summary>
        </member>
        <member name="M:MoCapCore.cActiveMarkerList.SetUseSceneOnPlayback(System.Boolean)">
            <summary>Set whether or not to switch to scene markers when not in Live mode.</summary>
        </member>
        <member name="M:MoCapCore.cActiveMarkerList.FinishEdit">
            <summary>Finish editing the marker list and make it available for reading.</summary>
        </member>
        <member name="M:MoCapCore.cActiveMarkerList.EditableMarkers">
            <summary>
Get the list of available editable markers (markers already added by a call to AddMarker()).
The array reference returned by this call can change between calls depending on application state,
so do not cache the returned array between function calls.
</summary>
        </member>
        <member name="M:MoCapCore.cActiveMarkerList.AddMarker(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Add a marker to the active marker set. Even though this will add a marker to the pool of active
markers, it may not affect the array of markers returned from ActiveMarkers() (e.g. if TimeManager
is in a playback mode, the active marker set returned will be active markers from the Scene).
</summary>
        </member>
        <member name="M:MoCapCore.cActiveMarkerList.StartEdit">
            <summary>Clear the currently active markers and prepare to add markers to it.</summary>
        </member>
        <member name="T:MoCapCore.cActiveMarkerList">
            <summary>
Provides storage and update mechanisms for the active marker list in a scene. The active marker list
is the markers that are keys ("active") within a given time range. It handles switching between live
and trajectorized markers. Live markers (those coming from the real-time engine) exist in a pool
managed by the active marker list. Trajectorized markers in the active marker list are just a list
of markers that exist in the Scene which are active at the given time.
</summary>
        </member>
        <member name="M:MoCapCore.cReconstructionProperties.op_Inequality(MoCapCore.cReconstructionProperties!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Inequality comparison operator.</summary>
        </member>
        <member name="M:MoCapCore.cReconstructionProperties.op_Equality(MoCapCore.cReconstructionProperties!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Equality comparison operator.</summary>
        </member>
        <member name="M:MoCapCore.cReconstructionProperties.Load(Core.cIReader*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Deserialize from a stream using the given reader.</summary>
        </member>
        <member name="M:MoCapCore.cReconstructionProperties.Save(Core.cIWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Serialize to the given (binary) stream.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.RigidBodiesSet">
            <summary>Returns true if rigid bodies have been set on this object, even if they were set to the
empty set.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.RigidBodyProcessingTime">
            <summary>Solver processing time for the rigid body solver.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.RigidBodies">
            <summary>Retrieve the bundle of rigid body solutions.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.SetRigidBodies(std.tr1.shared_ptr&lt;Core.cRigidBodyBundle&gt;)">
            <summary>Directly sets the rigid body bundle.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.SetRigidBodies(std.vector&lt;Core.cRigidBody&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the array of rigid body solutions for this frame. All active rigid bodies will be represented,
even those that do not have valid solutions for this frame. Inactive rigid bodies will not be reported
here.
</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.Markers">
            <summary>Retrieve the marker bundle.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.SetMarkers(std.tr1.shared_ptr&lt;Core.cMarkerBundle&gt;)">
            <summary>Set the marker bundle directly.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.SetMarkers(std.vector&lt;Core.cTMarker&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Core.cUID&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary>
Convenience method for setting markers on the underlying marker bundle.
</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.Rays">
            <summary>Retrieve the ray bundle.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.SetRays(std.tr1.shared_ptr&lt;Core.cRayBundle&gt;)">
            <summary>Set ray bundle directly.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.SetRays(std.vector&lt;Core.cCameraRay&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the array of rays for this frame. See SetMarkers() for complete description.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.DeviceData">
            <summary>The camera data for this frame.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.SetDeviceData(CameraLibrary.FrameGroup*)">
            <summary>Sets the camera data stream. Internally adds a reference to the FrameGroup.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.Timestamp">
            <summary>The frame timestamp, in seconds.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.Frame">
            <summary>The frame number.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.SetFrame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Double)">
            <summary>Set the frame number.</summary>
        </member>
        <member name="M:MoCapCore.cPipelineFrame.Clear">
            <summary>Clears all data and prepares this instance to be reused. This is useful for reusing memory
that has been previously allocated </summary>
        </member>
        <member name="T:MoCapCore.cPipelineFrame">
            <summary>
A container class that holds all the accumulated data streams for a single frame of data. Data objects
in this container may be set once and only once until the entire container is cleared. This is to help ensure
write-once/read-many behavior.
</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.FindRigidBody(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cRigidBody*)">
            <summary>Attempt to find a rigid body with the given ID. Returns false if not found.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.UnselectedRigidBodies">
            <summary>Retrieve begin/end iterators for all the unselected rigid bodies.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.PrimarySelectedRigidBody">
            <summary>Retrieve the primary selected rigid body, or null if none.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.SelectedRigidBodies">
            <summary>Retrieve begin/end iterators for all the selected rigid bodies.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.UntrackedRigidBodies">
            <summary>Retrieve begin/end iterators for all the untracked rigid bodies.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.TrackedRigidBodies">
            <summary>Retrieve begin/end iterators for all the tracked rigid bodies.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.RigidBodyCount">
            <summary>Retrieve the total number of rigid bodies.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.AllRigidBodies">
            <summary>Retrieve begin/end iterators for the full rigid body solution list.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.SetRigidBodies(std.vector&lt;Core.cRigidBody&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the rigid body solutions for this frame instance. The passed array is a non-const reference
because it will be swapped with the internal array and cleared on return, without freeing memory.
That will allow memory to be reused when possible.
</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.Empty">
            <summary>Returns true if there are no rigid body solutions.</summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.Clear">
            <summary>Clears all data and prepares this instance to be reused. This is useful for reusing memory
that has been previously allocated </summary>
        </member>
        <member name="M:Core.cRigidBodyBundle.op_Assign(Core.cRigidBodyBundle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Assignment operator.</summary>
        </member>
        <member name="T:Core.cRigidBodyBundle">
            <summary>
A container class that holds a collection of rigid body solutions.
</summary>
        </member>
        <member name="M:Core.cMarkerBundle.HasUnlabeledMarkers">
            <summary>Returns true if there are any labeled markers present.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.UnlabeledMarkers">
            <summary>Retrieve begin/end iterators for all unlabeled markers.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.HasLabeledMarkers">
            <summary>Returns true if there are any unlabeled markers present.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.LabeledMarkers">
            <summary>Retrieve begin/end iterators for all labeled markers.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.PrimarySelectedMarker">
            <summary>Retrieve the primary selected marker, or null if none.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.SelectedMarkerCount">
            <summary>Retrieve total number of all markers.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.HasSelectedMarkers">
            <summary>Returns true if there are any selected markers present.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.SelectedMarkers">
            <summary>Retrieve begin/end iterators for all selected markers.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.FindMarker(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cTMarker&lt;System.Single&gt;*)">
            <summary>Attempt to find a marker with the given ID. Returns false if not found.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.MarkerCount">
            <summary>Retrieve total number of all markers.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.AllMarkers">
            <summary>Retrieve begin/end iterators for the full ray list.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.SetMarkers(std.vector&lt;Core.cTMarker&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Core.cUID&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the rays for this frame instance. The passed array is a non-const reference
because it will be swapped with the internal array and cleared on return, without freeing memory.
That will allow memory to be reused when possible.
The selection order array gives the ID's of selected markers in the order in which they were selected.
</summary>
        </member>
        <member name="M:Core.cMarkerBundle.Empty">
            <summary>Returns true if there are no rays in the bundle.</summary>
        </member>
        <member name="M:Core.cMarkerBundle.Clear">
            <summary>Clears all data and prepares this instance to be reused. This is useful for reusing memory
that has been previously allocated </summary>
        </member>
        <member name="M:Core.cMarkerBundle.op_Assign(Core.cMarkerBundle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Assignment operator.</summary>
        </member>
        <member name="T:Core.cMarkerBundle">
            <summary>
A container class that holds a collection of markers and caches some state information on them
for fast computational access to lists of markers that meet certain criteria.
</summary>
        </member>
        <member name="M:Reconstruction.cCameraPairInfo.op_LessThan(Reconstruction.cCameraPairInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
operator so that we can perform std::sort ==--
</member>
        <member name="M:Core.cThreadProc.ThreadProc(Core.cThreadHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
  Inherit this class and override this function to provide a entry point for a new thread.
</summary>
        </member>
        <member name="M:Core.cThreadHandle.SetPriority(Core.cThreadHandle.eThreadPriority)">
            <summary>Set the thread priority. May be called at any time.</summary>
        </member>
        <member name="T:Core.cThreadHandle">
            <summary>
A platform-neutral thread handler.
</summary>
        </member>
        <member name="M:Core.cEvent.Wait(System.Int32)">
            <summary> Wait for an event to trigger. Specify timeout in milliseconds.  If zero is specified,
  a wait state will not be entered and will immediately return a boolean specifing if event has triggered. 
</summary>
        </member>
        <member name="M:Core.cEvent.Wait">
            <summary> Wait, potentially indefinitely, for an event to trigger. </summary>
        </member>
        <member name="M:Core.cEvent.Trigger">
            <summary> Trigger the event. </summary>
        </member>
        <member name="T:Core.cEvent">
            <summary>
  A cross-platform event object.  This can be used to signal one thread from another that an
  event has occurred.
</summary>
        </member>
        <member name="P:NMotive.RealMarker.TranslationChannel">
            <summary>
Gets the translation, or position, channel for this marker.
</summary>
            <returns>Translation channel for this marker.</returns>
        </member>
        <member name="P:NMotive.RealMarker.IsLabeled">
            <summary>
Get the labeled status of this marker.
</summary>
            <returns>
                <c>true</c> if this is a labeled marker.</returns>
        </member>
        <member name="P:NMotive.RealMarker.CanAnimate">
            <summary>
Can the marker animate?
</summary>
            <returns>
                <c>true</c> if the marker can animate.</returns>
        </member>
        <member name="P:NMotive.RealMarker.ReconstructionID">
            <summary>
Gets and sets the reconstruction ID for this marker.
</summary>
        </member>
        <member name="P:NMotive.RealMarker.Residual">
            <summary>
Gets and sets the residual value for a marker.
</summary>
        </member>
        <member name="P:NMotive.RealMarker.Size">
            <summary>
Gets and sets the size of a marker.
</summary>
        </member>
        <member name="M:NMotive.RealMarker.#ctor">
            <summary>
Constructs a default instance of a real marker.
</summary>
        </member>
        <member name="T:NMotive.RealMarker">
            <summary>
Class representing real marker objects in a scene.
</summary>
        </member>
        <member name="D:vrpn_int8">
@file vrpn_BaseClass.h

  All types of client/server/peer objects in VRPN should be derived from the
  vrpn_BaseClass type described here.  This includes Tracker, Button, Analog,
  Clock, Dial, ForceDevice, Sound, and Text; it should include any user-defined
  objects as well.

  This class both implements code that will be shared by most (if not all)
  objects in the system and forms a skeleton for the definition of new objects
  by requiring certain virtual member functions to be defined.

  See the VRPN web pages or another simple type (such as vrpn_Analog) for an
  example of how to create a new VRPN object type using this as a base class.

</member>
        <member name="M:NMotive.CSVExporter.Export(NMotive.Take,NMotive.DataStream)">
            <exclude />
            <summary>
Exports the given take to the given data stream.
</summary>
            <param name="take">The take to export</param>
            <param name="stream">The data stream to export to.</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="P:NMotive.CSVExporter.WriteHeader">
            <summary>
Gets and sets the write header property. Default is <c>true</c>.
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.RotationType">
            <summary>
Gets and sets the rotation type. Default is Quaternion.
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.WriteQualityStats">
            <summary>
Gets and sets the write quality statistics property. Default is <c>true</c>. 
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.WriteBoneMarkers">
            <summary>
Gets and sets the write bone markers property. Default is <c>true</c>. 
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.WriteBones">
            <summary>
Gets and sets the write bones property. Default is <c>true</c>. 
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.WriteRigidBodyMarkers">
            <summary>
Gets and sets the write rigid body markers property. Default is <c>true</c>. 
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.WriteRigidBodies">
            <summary>
Gets and sets the write rigid bodies property. Default is <c>true</c>.
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.WriteMarkers">
            <summary>
Gets and sets the write markers property. Default is <c>true</c>.
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.UseWorldSapceCoordinates">
            <summary>
Gets and sets the property determining whether or not to use world
coordinates.
</summary>
        </member>
        <member name="P:NMotive.CSVExporter.Units">
            <summary>
Gets and sets the length units option.
This option determines the base unit of measurement for positioning
in CSV export. Default value is meters.
</summary>
        </member>
        <member name="M:NMotive.CSVExporter.#ctor">
            <summary>
Constructs a <c>CSVExporter</c> object with the default options.
</summary>
        </member>
        <member name="T:NMotive.CSVExporter">
            <summary>
Class for exporting take files to CSV (Comma Separated Value) format.
</summary>
        </member>
        <member name="T:NMotive.Rotation">
            <summary>
Enumeration of possible rotation options.
</summary>
        </member>
        <member name="F:NMotive.Rotation.ZYX">
            <summary>zyx rotation order. Motive default.</summary>
        </member>
        <member name="F:NMotive.Rotation.ZXY">
            <summary>zxy rotation order. Motive default.</summary>
        </member>
        <member name="F:NMotive.Rotation.YZX">
            <summary>yzx rotation order. Motive default.</summary>
        </member>
        <member name="F:NMotive.Rotation.YXZ">
            <summary>yxz rotation order. Motive default.</summary>
        </member>
        <member name="F:NMotive.Rotation.XZY">
            <summary>xzy rotation order. Motive default.</summary>
        </member>
        <member name="F:NMotive.Rotation.XYZ">
            <summary>xyz rotation order. Motive default.</summary>
        </member>
        <member name="F:NMotive.Rotation.QuaternionFormat">
            <summary>Rotations in quaternion format.</summary>
        </member>
        <member name="M:NMotive.VideoExporter.Export(NMotive.Take,NMotive.DataStream)">
            <exclude />
            <summary>
Exports the given take to the given data stream.
</summary>
            <param name="take">The take to export</param>
            <param name="stream">The data stream to export to.</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="P:NMotive.VideoExporter.FrameRate">
            <summary>
Gets and sets the frame at which to export the video.
</summary>
        </member>
        <member name="M:NMotive.VideoExporter.#ctor(NMotive.VideoExporter.FrameRateValue)">
            <summary>
Constructs a video exporter object with the frame rate.
</summary>
            <param name="frameRate">Video will be exported at this frame rate.</param>
        </member>
        <member name="M:NMotive.VideoExporter.#ctor">
            <summary>
Constructs a video exporter object. Exported frame rate is full.
</summary>
        </member>
        <member name="F:NMotive.VideoExporter.FrameRateValue.Quarter">
            <summary>
Quarter frame rate.
</summary>
        </member>
        <member name="F:NMotive.VideoExporter.FrameRateValue.Half">
            <summary>
Half frame rate.
</summary>
        </member>
        <member name="F:NMotive.VideoExporter.FrameRateValue.Full">
            <summary>
Full frame rate.
</summary>
        </member>
        <member name="T:NMotive.VideoExporter.FrameRateValue">
            <summary>
Exporter frame rate values. Video can exported at full frame rate,
half frame rate, and quarter frame rate.
</summary>
        </member>
        <member name="T:NMotive.VideoExporter">
            <summary>
Class for exporting video from a take to a file. Exported video format
is 'avi'. The take must contain video data for the exportation to be
successful.
</summary>
        </member>
        <member name="M:MoCapCore.cIStreamsManager.OpenFile(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIDataStream.eStreamOpenMode,System.Boolean)">
            <summary>Convenience method to open a new file stream with the given filename.</summary>
        </member>
        <member name="M:MoCapCore.cIStreamsManager.CreateWarehouse(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Create a new stream warehouse of the requested type, if it exists. Returns NULL if the 
requested type is not available or cannot be created.
</summary>
        </member>
        <member name="M:MoCapCore.cIStreamsManager.CreateWarehouse">
            <summary>Create a warehouse of the default type.</summary>
        </member>
        <member name="M:MoCapCore.cIStreamsManager.SetDefaultWarehouseType(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the default warehouse type.</summary>
        </member>
        <member name="M:MoCapCore.cIStreamsManager.AddFactory(MoCapCore.cIDataStreamWarehouseFactory*)">
            <summary>Add a stream warehouse type factory. Ownership of the factory is transferred.</summary>
        </member>
        <member name="T:MoCapCore.cIStreamsManager">
            <summary>
Manager class for stream storage. This class aggregates stream warehouse types and has convenience
methods for creating and maintaining cIStreamWarehouse instances.
</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceFrame.TimeCode">
            <summary>Time code information. Will be flagged as valid if timecode was present.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceFrame.AnalogDataSize">
            <summary>Retrieve the analog data, if any.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceFrame.CameraFrameCount">
            <summary>Retrieve the device data, if any.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceFrame.MemorySize">
            <summary>Approximate size of this object in memory.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceFrame.SetAnalogData(System.UInt32,System.Byte*)">
            <summary>Set the analog data for this frame, if any. Ownership of the passed pointer is transferred here.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceFrame.AddCameraFrame(Core.cICameraFrame*)">
            <summary>Add a device frame.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceFrame.Load(Core.cIReader*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cSharedPtr&lt;Core.cICameraFrameFactory&gt;,System.Int16)">
            <summary>Load this object from the given reader.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceFrame.Save(Core.cIWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Serialize this object to the given writer.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.Name">
            <summary>Returns the track name</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.Frame(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Returns the frame at the given frame index. If no frame exists at that frame, a NULL frame is returned.
</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.IsComplete">
            <summary>Returns true if the track is "complete" (i.e. if data has been recorded and the
mode of the track has been set to read-only.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.Empty">
            <summary>Returns true if completely empty (no frames present).</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.FullFrameRange">
            <summary>Returns full frame range, or an empty range if no data is present.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.FullTimeRange">
            <summary>Returns full time range, or an empty range if no data is present.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.Load(System.Double)">
            <summary>Load initial contents, index tables, etc. from the input stream to prepare the object for use.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.Save">
            <summary>Finish saving to the output stream, pushing any unsaved data.</summary>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.Add(Core.cSharedPtr&lt;MoCapCore.cMultiDeviceFrame&gt;,Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Add a new multi-device frame. This should only be called during recording.</summary>
            <param name="writeBlockwise">
If true, blocks will be written out when kWriteBlockFrames have been added. Be careful
to set this option to false for real-time recording as it can block long enough during a block write
that one or more frames could be missed in recording.
</param>
        </member>
        <member name="M:MoCapCore.cMultiDeviceTrack.#ctor(MoCapCore.cIDataStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cSharedPtr&lt;Core.cICameraFrameFactory&gt;,System.Boolean)">
            <summary>
Create a new track. The readOnly parameter should be set to true if this track is being
loaded from a previously recorded track.
</summary>
        </member>
        <member name="T:MoCapCore.cMultiDeviceTrack">
            <summary>
A streaming container for camera and device data streams. This is a write-once, read-only container.
Once the track is saved using the Save() method, the track becomes read-only.
</summary>
        </member>
        <member name="M:Core.cStringHelpers.ToInt(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert a string to an integer value. Returns 0 if conversion fails.</summary>
        </member>
        <member name="M:Core.cStringHelpers.ToDouble(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert a string to a floating-point value. Returns 0 if conversion fails.</summary>
        </member>
        <member name="M:Core.cStringHelpers.Tokenize(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
            <summary>Split a string into a vector of strings, removing the delimiter.</summary>
        </member>
        <member name="M:Core.cStringHelpers.ToLower(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert a string to all lowercase characters.</summary>
        </member>
        <member name="M:Core.cStringHelpers.AreEqualNoCase(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Do a case-insensitive compare between two strings.</summary>
        </member>
        <member name="M:Core.cStringHelpers.Format(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,BTEllipsis)">
            <summary>Implementation of sprintf for wstrings.</summary>
        </member>
        <member name="M:Core.cStringHelpers.ConvertFromWString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert a (UTF-16) std::wstring to a (UTF-8) std::string.</summary>
        </member>
        <member name="M:Core.cStringHelpers.ConvertToWString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert a (UTF-8) std::string to a (UTF-16) std::wstring.</summary>
        </member>
        <member name="M:Core.cStringHelpers.AreDigits(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
            <summary>Returns true if the characters in the given range are all numeric digits.</summary>
        </member>
        <member name="M:Core.cStringHelpers.IncrementName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Uses the standard method to increment the given name. The standard method looks for
(%d), and adds (2) if it is not found, and replaces it with (%d+1) if found.
</summary>
        </member>
        <member name="T:Core.cStringHelpers">
            <summary>A collection of platform-neutral string management routines.</summary>
        </member>
        <member name="P:NMotive.Joint.ActiveDOFs">
            <summary>
Gets the active degrees of freedom.
</summary>
        </member>
        <member name="P:NMotive.Joint.JointType">
            <summary>
Gets and sets this joints type.
</summary>
        </member>
        <member name="M:NMotive.Joint.#ctor(MoCapCore.cJoint*)">
            <exclude />
        </member>
        <member name="F:NMotive.Joint.DOF.AllDOF">
            <summary>
X translation, plus Y translation, plus Z translation, plus
X rotation, plus Y rotation, plus Z rotation.
</summary>
        </member>
        <member name="F:NMotive.Joint.DOF.AllRot">
            <summary>
X rotation, plus Y rotation, plus Z rotation.
</summary>
        </member>
        <member name="F:NMotive.Joint.DOF.AllTrans">
            <summary>
X translation, plus Y translation, plus Z translation.
</summary>
        </member>
        <member name="F:NMotive.Joint.DOF.ZRot">
            <summary>
Z rotation.
</summary>
        </member>
        <member name="F:NMotive.Joint.DOF.YRot">
            <summary>
Y rotation.
</summary>
        </member>
        <member name="F:NMotive.Joint.DOF.XRot">
            <summary>
X rotation.
</summary>
        </member>
        <member name="F:NMotive.Joint.DOF.ZTrans">
            <summary>
Z translation.
</summary>
        </member>
        <member name="F:NMotive.Joint.DOF.YTrans">
            <summary>
Y translation.
</summary>
        </member>
        <member name="F:NMotive.Joint.DOF.XTrans">
            <summary>
X translation.
</summary>
        </member>
        <member name="T:NMotive.Joint.DOF">
            <summary>
Enumeration of degrees of freedom
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.Free">
            <summary>
Six degrees of freedom translation/rotation joint.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.Ball">
            <summary>
Three degrees of freedom joint.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.ZYCylindrical">
            <summary>
Two degrees of freedom rotational joint where Z and Y are active, in that order.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.ZXCylindrical">
            <summary>
Two degrees of freedom rotational joint where Z and X are active, in that order.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.YXCylindrical">
            <summary>
Two degrees of freedom rotational joint where Y and X are active, in that order.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.YZCylindrical">
            <summary>
Two degrees of freedom rotational joint where Y and Z are active, in that order.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.XZCylindrical">
            <summary>
Two degrees of freedom rotational joint where X and Z are active, in that order.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.XYCylindrical">
            <summary>
Two degrees of freedom rotational joint where X and Y are active, in that order.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.ZHinge">
            <summary>
One degree of freedom rotational joint Y.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.YHinge">
            <summary>
One degree of freedom rotational joint Y.
</summary>
        </member>
        <member name="F:NMotive.Joint.Type.XHinge">
            <summary>
One degree of freedom rotational joint X.
</summary>
        </member>
        <member name="T:NMotive.Joint.Type">
            <summary>
Enumeration of joint types.
</summary>
        </member>
        <member name="T:NMotive.Joint">
            <summary>
Class for representing joint nodes in a scene.
</summary>
        </member>
        <member name="M:NMotive.TRCExporter.Export(NMotive.Take,NMotive.DataStream)">
            <exclude />
            <summary>
Exports the given take to the given data stream.
</summary>
            <param name="take">The take to export</param>
            <param name="stream">The data stream to export to.</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="P:NMotive.TRCExporter.Units">
            <summary>
Gets and sets the length units option.
This option determines the base unit of measurement for positioning
in C3D export. Default value is meters.
</summary>
        </member>
        <member name="M:NMotive.TRCExporter.#ctor">
            <summary>
Constructs a <c>TRCExporter</c> object with the default options.
</summary>
        </member>
        <member name="T:NMotive.TRCExporter">
            <summary>
Class for exporting take files to TRC format.
</summary>
        </member>
        <member name="M:Motive.cTRCExporter.SetScale(System.Single,System.Boolean)">
            <summary>
Sets the scale factor used for exporting values.
</summary>
            <param name="s">The scale factor to apply to exported
values. Must a decimal value be between 0 and 1.</param>
        </member>
        <member name="M:Motive.cTRCExporter.SetUnits(Core.eUnits!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Units of position measurement.
</summary>
            <param name="unitsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cTRCExporter.Units">
            <summary>
Gets the value of the property.
Units of position measurement.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cTRCExporter.SetEndFrame(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Ending frame
</summary>
            <param name="endFrameValue">The new property value.</param>
        </member>
        <member name="M:Motive.cTRCExporter.EndFrame">
            <summary>
Gets the value of the property.
Ending frame
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cTRCExporter.SetStartFrame(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Starting frame
</summary>
            <param name="startFrameValue">The new property value.</param>
        </member>
        <member name="M:Motive.cTRCExporter.StartFrame">
            <summary>
Gets the value of the property.
Starting frame
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cTRCExporter.SetFrameRate(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Data frame rate
</summary>
            <param name="frameRateValue">The new property value.</param>
        </member>
        <member name="M:Motive.cTRCExporter.FrameRate">
            <summary>
Gets the value of the property.
Data frame rate
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:NMotive.TrimTails.Process(NMotive.Take,System.Collections.Generic.IList`1{NMotive.UID})">
            <summary>
Trims tails of the given markers in the given frame ranges in the given take.
</summary>
            <param name="take">The take to process.</param>
            <param name="markerIDs">Trim tails on these markers only.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="M:NMotive.TrimTails.Process(NMotive.Take,NMotive.FrameRangeSet)">
            <summary>
Trims tails of the given markers in the given frame ranges in the given take.
</summary>
            <param name="take">The take to process.</param>
            <param name="selectedRanges">Trim tails in these ranges only.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="M:NMotive.TrimTails.Process(NMotive.Take,NMotive.FrameRangeSet,System.Collections.Generic.IList`1{NMotive.UID})">
            <summary>
Trims tails of the given markers in the given frame ranges in the given take.
</summary>
            <param name="take">The take to process.</param>
            <param name="selectedRanges">Trim tails in these ranges only.</param>
            <param name="markerIDs">Trim tails on these markers only.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="M:NMotive.TrimTails.Process(NMotive.Take)">
            <summary>
Trims tails in the given take.
</summary>
            <param name="take">The take to process.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="P:NMotive.TrimTails.Automatic">
            <summary>
If true the trimming algorithm will determine the number of frames
to trim. The set the maximum number of frames the algorithm is 
allowed to tr
</summary>
        </member>
        <member name="P:NMotive.TrimTails.MinimumSegmentSize">
            <summary>
When trimming tails, the tool will make sure that data segments 
(i.e. sections of data with no gaps) are not reduced below this 
number of frames. Default value is 5.
</summary>
        </member>
        <member name="P:NMotive.TrimTails.TrailingTrimSize">
            <summary>
The number of frames to trim at the end of any gaps, or the 
maximum number of frames to trim at the end of any gaps when the 
</summary>
        </member>
        <member name="P:NMotive.TrimTails.LeadingTrimSize">
            <summary>
The number of frames to trim at the beginning of any gaps, or the 
maximum number of frames to trim at the beginning of any gaps when the 
</summary>
        </member>
        <member name="P:NMotive.TrimTails.GapSizeThreshold">
            <summary>
Gets and sets the gap size threshold.
When trimming tails, a gap must be at least this large before any
trimming will be done on its leading or trailing edge.
</summary>
        </member>
        <member name="M:NMotive.TrimTails.#ctor">
            <summary>
Constructs a <c>TrimTails</c> instance with default values.
</summary>
        </member>
        <member name="F:NMotive.TrimTails.mNaitveDeleteKeys">
            <exclude />
            <summary>
Backing native implementation for delete keys.
</summary>
        </member>
        <member name="F:NMotive.TrimTails.mNativeFindTails">
            <exclude />
            <summary>
Backing native implementation for find tails.
</summary>
        </member>
        <member name="T:NMotive.TrimTails">
            <summary>
As markers pass into and out of view of the cameras, sometimes those 
partial occlusions can introduce "tails" in a trajectory near data 
gaps. The <c>TrimTails</c>class finds and removes these tails.
</summary>
        </member>
        <member name="M:MoCapCore.cDeleteKeysOp.SetUseSelectedTime(System.Boolean)">
            <summary>Set whether to use just the currently selected time range(s). Default is to use all time.</summary>
        </member>
        <member name="M:MoCapCore.cDeleteKeysOp.SetSelectedKeysOnly(System.Boolean)">
            <summary>If set, will only delete selected keys in the range. Otherwise, all keys in the range are deleted.</summary>
        </member>
        <member name="T:MoCapCore.cDeleteKeysOp">
            <summary>
Deletes all selected keys on selected nodes, optionally only in selected time ranges.
</summary>
        </member>
        <member name="T:MoCapCore.cFindTailsOp">
            <summary>
Trim keys that may be noisy near the start or end of a gap.
</summary>
        </member>
        <member name="M:NMotive.FBXAsciiExporter.Export(NMotive.Take,NMotive.DataStream)">
            <exclude />
            <summary>
Exports the given take to the given data stream.
</summary>
            <param name="take">The take to export</param>
            <param name="stream">The data stream to export to.</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.UseTimeCode">
            <summary>
Gets and sets the property specifying whether or not to use the time code
The default value is <c>false</c>.
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.WriteVirtualFingerTipMarkers">
            <summary>
Gets and sets the export virtual fingertip markers property.
If <c>true</c> synthetic fingertip markers generated by the solver 
will be exported. The default is <c>false</c></summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.SkeletonNullsNames">
            <summary>
If the <c>WriteSkeletons</c> property is equal to <c>RigidBodyWriteNullsOptions::Named</c>,
then only skeletons whose names are in this list will be written to output.
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.WriteSkeletonNulls">
            <summary>
Gets or sets a value indicating whether or not to write skeleton nulls.
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.WriteMarkerNulls">
            <summary>
Gets and sets the property specifying whether or not to write out
null markers.
The default value is <c>false</c>.
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.WriteUnlabeledMarkers">
            <summary>
Gets and sets the property specifying whether or not to write out
unlabeled markers.
The default value is <c>true</c>.
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.WriteMarkers">
            <summary>
Gets and sets the <c>WriteMarkers</c> property.
The default value is <c>true</c>.
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.IsBinary">
            <summary>
Gets a property that is <c>strue</c> if the export format is binary.
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.Extension">
            <summary>
Gets the conventional extension for files with this export format.
The extension does NOT include the '.'
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.Description">
            <summary>
Gets the description of this exporter.
</summary>
        </member>
        <member name="P:NMotive.FBXAsciiExporter.Name">
            <summary>
Gets the name of this exporter.
</summary>
        </member>
        <member name="M:NMotive.FBXAsciiExporter.#ctor">
            <summary>
Constructs an <c>FBXAsciiExporter</c> instance with default options.
</summary>
        </member>
        <member name="T:NMotive.FBXAsciiExporter">
            <summary>
Class for exporting take data to FBX ASCII format.
</summary>
        </member>
        <member name="D:size_t">
Invert x axis to switch handedness
</member>
        <member name="M:NMotive.FindGaps.Find(NMotive.Take)">
            <summary>
Finds gaps in the given take.
</summary>
            <param name="take">The take.</param>
            <returns>A dictionary with marker keys and gaps, represented as 
a set of <c>FrameRange</c>'s, as values.</returns>
        </member>
        <member name="P:NMotive.FindGaps.MaxGapSize">
            <summary>
Gets and sets the maximum gap size in frames. Gaps with 
lengths strictly greater than <c>MaxGapSize</c> will be not be
reported.
</summary>
        </member>
        <member name="M:NMotive.FindGaps.#ctor(System.Int32)">
            <summary>
Constructs a <c>FindGaps</c> instance with the given maximum gap
size in frames.
</summary>
            <param name="maxGapSize">Maximum gap size in frames to find. Gaps with 
lengths strictly greater than <c>maxGapSize</c> will be not be
reported.</param>
        </member>
        <member name="M:NMotive.FindGaps.#ctor">
            <summary>
Constructs a <c>FindGaps</c> instance. The default maximum gap
size is 10 frames.
</summary>
        </member>
        <member name="M:NMotive.FindGaps.Marker.GetHashCode">
            <summary>
Gets the hashcode for this marker.
</summary>
            <returns>Hash code for this object.</returns>
        </member>
        <member name="M:NMotive.FindGaps.Marker.CompareTo(NMotive.FindGaps.Marker)">
            <summary>
Function for comparing to markers. Markers are compared using their
unique ID's.
</summary>
            <param name="rhs">Marker to compare self to.</param>
            <returns>Standard integer comparison value.</returns>
        </member>
        <member name="M:NMotive.FindGaps.Marker.Equals(NMotive.FindGaps.Marker)">
            <summary>
Determines if two markers are equal. Markers are equal if the have
the same unique ID.
</summary>
            <param name="rhs">The maker to compare self to.</param>
            <returns>
                <c>true</c> if this marker is equal to <c>rhs</c></returns>
        </member>
        <member name="P:NMotive.FindGaps.Marker.Name">
            <summary>
Gets the markers name.
</summary>
        </member>
        <member name="P:NMotive.FindGaps.Marker.ID">
            <summary>
Gets the markers ID.
</summary>
        </member>
        <member name="M:NMotive.FindGaps.Marker.#ctor(NMotive.UID,System.String)">
            <summary>
Constructs a <c>Marker</c> object with the given name and ID.
</summary>
            <param name="id">The marker unique ID.</param>
            <param name="name">The marker name.</param>
        </member>
        <member name="T:NMotive.FindGaps.Marker">
            <summary>
Class encapsulating a marker name and ID. Implements the IEquatable{Marker}
and IComparable{Marker} interfaces.
</summary>
        </member>
        <member name="T:NMotive.FindGaps">
            <summary>
Class for finding gaps in 3D data which have frame lengths less than
or equal to a specified number of frames.
</summary>
        </member>
        <member name="T:MoCapCore.cFindGapOp">
            <summary>
Either change the label of the passed marker, or combine it with an existing marker in the scene if
one already exists.
</summary>
        </member>
        <member name="M:MoCapCore.cIOperationData.CurrentTimeManager">
            <summary>Retrieve a reference to the current time manager.</summary>
        </member>
        <member name="M:MoCapCore.cIOperationData.CurrentTakeManager">
            <summary>Retrieve a reference to the current take manager.</summary>
        </member>
        <member name="T:MoCapCore.cIOperationData">
            <summary>
Interface for common data objects that is passed to all operations upon running.
</summary>
        </member>
        <member name="M:NMotive.FillGaps.Process(NMotive.Take,System.Collections.Generic.IList`1{NMotive.UID})">
            <summary>
Processes the given take, filling gaps for the specified markers in the
Specified ranges.
</summary>
            <param name="take">The take to process.</param>
            <param name="markerIDs">Fill gaps for these markers. For pattern
based interpolation it is the list of pattern markers with the 
target marker being the first in the list. i.e. <c>markerIDs[0]</c></param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NMotive.FillGaps.Process(NMotive.Take,NMotive.FrameRangeSet)">
            <summary>
Processes the given take, filling gaps for the specified markers in the
specified ranges.
</summary>
            <param name="take">The take to process.</param>
            <param name="frameRanges">Fill gaps in these frame ranges.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NMotive.FillGaps.Process(NMotive.Take,NMotive.FrameRangeSet,System.Collections.Generic.IList`1{NMotive.UID})">
            <summary>
Processes the given take, filling gaps for the specified markers in the
specified ranges.
</summary>
            <param name="take">The take to process.</param>
            <param name="frameRanges">Fill gaps in these frame ranges.</param>
            <param name="markerIDs">Fills gaps for these markers. For pattern
based interpolation it is the list of pattern markers with the 
target marker being the first in the list. i.e. <c>markerIDs[0]</c></param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:NMotive.FillGaps.Process(NMotive.Take)">
            <summary>
Processes the given take. Fill is done for all markers and all frames.
</summary>
            <param name="take">The take to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="P:NMotive.FillGaps.CustomFillProvider">
            <exclude />
        </member>
        <member name="P:NMotive.FillGaps.MaxGapFillWidth">
            <summary>
Gets and sets the maximum size, in frames, 
that a gap can be for Motive to fill. Raising this will allow 
larger gaps to be filled. However, larger gaps may be more prone to 
incorrect interpolation.
</summary>
        </member>
        <member name="P:NMotive.FillGaps.InterpolationMode">
            <summary>
Gets and sets the interpolation algorithm for gap filling.
</summary>
        </member>
        <member name="M:NMotive.FillGaps.#ctor(System.Int32,NMotive.ProgressIndicator)">
            <summary>
Constructs a <c>FillGaps</c> object the given max gap fill width and progress
indicator.
</summary>
            <param name="maxGapFillWidth">The maximum size, in frames, 
that a gap can be for Motive to fill. Raising this will allow 
larger gaps to be filled. However, larger gaps may be more prone to 
incorrect interpolation.</param>
            <param name="progress">Progress indicator used by this processor.</param>
        </member>
        <member name="M:NMotive.FillGaps.#ctor(System.Int32)">
            <summary>
Constructs a <c>FillGaps</c> object the given max gap fill width.
</summary>
            <param name="maxGapFillWidth">The maximum size, in frames, 
that a gap can be for Motive to fill. Raising this will allow 
larger gaps to be filled. However, larger gaps may be more prone to 
incorrect interpolation.</param>
        </member>
        <member name="M:NMotive.FillGaps.#ctor(NMotive.ProgressIndicator)">
            <summary>
Constructs a <c>FillGaps</c> object with the given progress indicator.
</summary>
            <param name="progress">Progress indicator used by this processor.</param>
        </member>
        <member name="M:NMotive.FillGaps.#ctor">
            <summary>
Constructs a <c>FillGaps</c> object with default options.
</summary>
        </member>
        <member name="T:NMotive.FillGaps">
            <summary>
Take processor implementation for filling gaps in 3D data.
</summary>
        </member>
        <member name="T:NMotive.ICustomFillProvider">
            <exclude />
        </member>
        <member name="M:NMotive.TakeProcessor.DefaultFramesRangeSet(NMotive.Take)">
            <summary>
The default range set for a take if none is specified.
</summary>
            <param name="take">The take.</param>
            <returns>The default frame range set for the take.</returns>
        </member>
        <member name="M:NMotive.TakeProcessor.SelectMarkersToProcess(NMotive.Take,System.Collections.Generic.IList`1{NMotive.UID})">
            <summary>
Selects in the take the markers with the specified ID's.
</summary>
            <param name="take">Select the markers in this take.</param>
            <param name="markerIDs">ID's of the markers to select.</param>
        </member>
        <member name="M:NMotive.TakeProcessor.Process(NMotive.Take)">
            <summary>
Processes the given take. 
</summary>
            <param name="take">The take to process.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="P:NMotive.TakeProcessor.Progress">
            <summary>
Gets and sets the progress indicator for this processor.
</summary>
        </member>
        <member name="P:NMotive.TakeProcessor.Name">
            <summary>
Gets the name for this processor.
</summary>
        </member>
        <member name="M:NMotive.TakeProcessor.#ctor(NMotive.ProgressIndicator)">
            <summary>
Constructs a <c>TakeProcessor</c> object with the given progress
indicator.
</summary>
            <param name="progress">Progress indicator used by this processor.</param>
        </member>
        <member name="M:NMotive.TakeProcessor.#ctor">
            <summary>
Constructs a <c>TakeProcessor</c> object.
</summary>
        </member>
        <member name="T:NMotive.TakeProcessor">
            <summary>
Abstract base class for take processing classes.
</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.RunningDescription(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Description of the operation currently running, if any.</summary>
            <returns>True if an operation is running and its description was retrieved.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.RunningName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Name of the operation currently running, if any.</summary>
            <returns>True if an operation is running and its name was retrieved.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.Running">
            <summary>Returns true if the queue is running.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.Cancel">
            <summary>Immediately cancel all operations in the queue and cease execution.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.Resume">
            <summary>Resume execution of the queue.</summary>
            <returns>True if there are more items to execute in the queue.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.Pause">
            <summary>Pause execution of queue after the next operation completes.</summary>
            <returns>False if the queue is not running or is empty.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.EndGroup(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finish an operation group and assign a name to use for the undo operation.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.StartGroup">
            <summary>Start an operation group. Groups are combined into a single undo operation.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.AddToQueue(MoCapCore.cIOperation*)">
            <summary>Add the given operation to the queue. Ownership transfers.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.AddToQueue(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cPropertyCollection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Add the named operation to the queue, using the given set of parameters. If the queue is
currently empty, this call will also begin execution.
</summary>
            <returns>True if the operation was found and the given parameter set was a match for it.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.SetRunMode(MoCapCore.cOperationManager.RunMode)">
            <summary>
Sets the run mode. If run mode is eImmediate, operations will be run on the caller's thread
once submitted (i.e. the AddToQueue method will block until the operation completes).
</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.CreateInstance(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Create a new instance of the named operation.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.CreateProperties(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Create a new parameter group for the named operation.</summary>
            <returns>The new parameter group if the given name was valid. NULL otherwise.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.FindFactory(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Retrieve the operation factory associated with the operation of the given name.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.OperationDescription(System.UInt32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Get the description associated with the operation factory at the given index.</summary>
            <returns>True if the index was valid and the description was retrieved.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.OperationLabel(System.UInt32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Get the user-facing label associated with the operation factory at the given index.</summary>
            <returns>True if the index was valid and the label was retrieved.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.OperationName(System.UInt32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Get the internal name of the operation at the given index in the factory list.</summary>
            <returns>True if the index was valid and the name was retrieved.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.FactoryCount">
            <summary>Get the number of available factories.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.AddFactory(MoCapCore.cIOperationFactory*)">
            <summary>Add a new operation factory. Ownership is transferred to this object.</summary>
            <returns>True if the factory name was unique and could be added.</returns>
        </member>
        <member name="M:MoCapCore.cOperationManager.AddNativeFactories">
            <summary>Should be called after construction to add in all the native operations' factories.</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.SetProgressHandler(MoCapCore.cIProgressIndicator*)">
            <summary>
Set a progress indicator interface to use to report busy/progress. Ownership of the IProgressIndicator
object is transferred here.
</summary>
        </member>
        <member name="M:MoCapCore.cOperationManager.#ctor(MoCapCore.cIOperationData*)">
            <summary>Create an operation manager. Ownership of the given IOperationData object is transferred here.</summary>
        </member>
        <member name="T:MoCapCore.cOperationManager">
            <summary>
Manages the operation queue. This class is the interface to all editing operations. It is thread-safe such
that any calls on this class can be called from any thread, but execution of the operations on the stack
will proceed from a private thread on this class.
Operation factories can be added at any time, and once they are, are used to create and execute operations
in the queue.
</summary>
        </member>
        <member name="M:MoCapCore.IOperationManagerObserver.OnRunModeChanged(MoCapCore.cOperationManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when one or more nodes is added or removed.</summary>
        </member>
        <member name="M:MoCapCore.cFillGapsOp.SetCustomFillProvider(MoCapCore.ICustomFillProvider*,System.Boolean)">
            <summary>Set custom fill provider for pattern/model based fill.</summary>
        </member>
        <member name="T:MoCapCore.cFillGapsOp">
            <summary>
Fill gaps on based on the scoping and interpolation type specified in the operation's settings.
</summary>
        </member>
        <member name="M:MoCapCore.cOperation.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cPropertyCollection*)">
            <summary>Takes ownership of the passed ParameterGroup.</summary>
        </member>
        <member name="T:MoCapCore.cOperation">
            <summary>Helper base class for data operations.</summary>
        </member>
        <member name="M:MoCapCore.cIOperation.Parameters">
            <summary>Get the parameter group instance for this operation.</summary>
        </member>
        <member name="M:MoCapCore.cIOperation.CanUndo">
            <summary>Returns true if the operation can be undone and redone.</summary>
        </member>
        <member name="M:MoCapCore.cIOperation.CanCancel">
            <summary>Returns true if the operation can be canceled.</summary>
        </member>
        <member name="M:MoCapCore.cIOperation.Description">
            <summary>Brief description to display.</summary>
        </member>
        <member name="M:MoCapCore.cIOperation.Label">
            <summary>Brief name to display.</summary>
        </member>
        <member name="M:MoCapCore.cIOperation.Name">
            <summary>No-spaces, Camel-case name used for operation lookup.</summary>
        </member>
        <member name="M:MoCapCore.cIOperation.Cancel">
            <summary>Call this to cancel the operation in progress.</summary>
            <returns>True if the operation could be canceled and was canceled, or was already finished.</returns>
        </member>
        <member name="M:MoCapCore.cIOperation.Run(MoCapCore.cIOperationData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIProgressIndicator*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>This is called to run the operation using the given progress indicator.</summary>
        </member>
        <member name="T:MoCapCore.cIOperation">
            <summary>
Abstract base class for all Operations. Operations are units of functionality that can be
executed as transactions on core data.
</summary>
        </member>
        <member name="M:MoCapCore.cOperationFactory.PropertyDefinitions">
            <summary>Returns the property collection definition for use by derived classes.</summary>
        </member>
        <member name="M:MoCapCore.cOperationFactory.AddPropertyDefinition(MoCapCore.cPropertyDefinition*)">
            <summary>
Derived classes call this to add parameter definitions to the definition block. Ownership
of the passed object is transferred.
</summary>
        </member>
        <member name="T:MoCapCore.cOperationFactory">
            <summary>
Helper base class for creating new operation factories. Most factories should derive from this
class to handle some of the basic object accounting.
</summary>
        </member>
        <member name="M:MoCapCore.cIOperationFactory.Description">
            <summary>A brief description of what the operations created by this factory do.</summary>
        </member>
        <member name="M:MoCapCore.cIOperationFactory.Label">
            <summary>The human-readable label associated with the operations this factory produces.</summary>
        </member>
        <member name="M:MoCapCore.cIOperationFactory.Name">
            <summary>The internal name of the operations created by this factory.</summary>
        </member>
        <member name="M:MoCapCore.cIOperationFactory.CreateProperties">
            <summary>
Creates and returns a new parameter group that can be used with operations created by
this factory. Ownership of the newly created instance is transferred to the caller.
</summary>
        </member>
        <member name="M:MoCapCore.cIOperationFactory.CreateInstance(MoCapCore.cPropertyCollection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a new instance of the operation with the given parameter list. When overriding this method,
you should Clone() the ParameterGroup in the new operation instance because the passed ParemeterGroup
is a borrowed reference. Ownership of the newly created instance is transferred to the caller.
</summary>
        </member>
        <member name="T:MoCapCore.cIOperationFactory">
            <summary>
Abstract base class for all Operation factories. Operation factories are responsible for producing
instances of their operations. To create a new operation, derive a new class from IOperationFactory
and derive your new operation from IOperation. Add a new factory instance to OperationManager.
</summary>
        </member>
        <member name="T:Motive.cBVHExporter">
            <summary>
Exporter class for BVH files
</summary>
        </member>
        <member name="M:NMotive.BVHExporter.Export(NMotive.Take,NMotive.DataStream)">
            <exclude />
            <summary>
Exports the given take to the given data stream.
</summary>
            <param name="take">The take to export</param>
            <param name="stream">The data stream to export to.</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="P:NMotive.BVHExporter.SkeletonName">
            <summary>
Gets and sets the name of the skeleton to export. 
The default is to export the first skeleton in the takes
list of skeletons.
</summary>
        </member>
        <member name="P:NMotive.BVHExporter.MotionBuilderNames">
            <summary>
Gets and sets whether or not to use MotionBuilder names.
</summary>
        </member>
        <member name="P:NMotive.BVHExporter.HandsDownward">
            <summary>
Gets and sets the hands downward option.
</summary>
        </member>
        <member name="P:NMotive.BVHExporter.ExcludeFingers">
            <summary>
Gets and sets the exclude fingers option.
</summary>
        </member>
        <member name="P:NMotive.BVHExporter.ExcludeToes">
            <summary>
Gets and sets the exclude toes option.
</summary>
        </member>
        <member name="P:NMotive.BVHExporter.SingleJointTorso">
            <summary>
Gets and sets the single joint torso option.
</summary>
        </member>
        <member name="P:NMotive.BVHExporter.Units">
            <summary>
Gets and sets the length units option.
This option determines the base unit of measurement for positioning
in BVH export. Default value is meters.
</summary>
        </member>
        <member name="M:NMotive.BVHExporter.#ctor">
            <summary>
Constructs a <c>BVHExporter</c> object with the default options.
</summary>
        </member>
        <member name="T:NMotive.BVHExporter">
            <summary>
Class for exporting take data in BVH format.
</summary>
        </member>
        <member name="M:MoCapCore.cExporterManager.FindExporterByName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Attempt to find an exporter by exporter name
</summary>
        </member>
        <member name="M:MoCapCore.cExporterManager.FindExporter(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Attempt to find an exporter that writes to the requested extension type. If more than one
matching exporter is found, only the first one is returned.
</summary>
        </member>
        <member name="M:MoCapCore.cExporterManager.Exporter(System.Int32)">
            <summary>Retrieves the exporter at the given index. Borrowed reference. DO NOT DELETE.</summary>
        </member>
        <member name="M:MoCapCore.cExporterManager.ExporterCount">
            <summary>Returns the number of available exporters.</summary>
        </member>
        <member name="M:MoCapCore.cExporterManager.AddExporter(MoCapCore.cIExporter*)">
            <summary>Add a new exporter type. Ownership is transferred here.</summary>
        </member>
        <member name="T:MoCapCore.cExporterManager">
            <summary>
Manages instances of cIExporter, along with the operations involving file exporting.
</summary>
        </member>
        <member name="M:NMotive.MotiveProgressIndicator.Finish">
            <summary>Call this to finish a measured task.</summary>
        </member>
        <member name="M:NMotive.MotiveProgressIndicator.Message">
            <summary>Gets the current message.</summary>
        </member>
        <member name="M:NMotive.MotiveProgressIndicator.Progress">
            <summary>Gets the current progress value.</summary>
        </member>
        <member name="M:NMotive.MotiveProgressIndicator.SetMessage(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the message to display to the user.</summary>
        </member>
        <member name="M:NMotive.MotiveProgressIndicator.SetProgress(System.UInt32)">
            <summary>Called to update progress value directly. Progress is in the range [0,100].</summary>
        </member>
        <member name="M:NMotive.MotiveProgressIndicator.IncrementProgress">
            <summary>Called to increase the progress by one increment.</summary>
        </member>
        <member name="M:NMotive.MotiveProgressIndicator.Start(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>This is called to run the operation using the given progress indicator.</summary>
            <param name="message">A user-facing message to display during the task.</param>
            <param name="incrementCount">The number of progress increments that the task will take to complete.</param>
        </member>
        <member name="M:MoCapCore.cIProgressIndicator.Finish">
            <summary>Call this to finish a measured task.</summary>
        </member>
        <member name="M:MoCapCore.cIProgressIndicator.Message">
            <summary>Gets the current message.</summary>
        </member>
        <member name="M:MoCapCore.cIProgressIndicator.Progress">
            <summary>Gets the current progress value.</summary>
        </member>
        <member name="M:MoCapCore.cIProgressIndicator.SetMessage(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the message to display to the user.</summary>
        </member>
        <member name="M:MoCapCore.cIProgressIndicator.SetProgress(System.UInt32)">
            <summary>Called to update progress value directly. Progress is in the range [0,100].</summary>
        </member>
        <member name="M:MoCapCore.cIProgressIndicator.IncrementProgress">
            <summary>Called to increase the progress by one increment.</summary>
        </member>
        <member name="M:MoCapCore.cIProgressIndicator.Start(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>This is called to run the operation using the given progress indicator.</summary>
            <param name="message">A user-facing message to display during the task.</param>
            <param name="incrementCount">The number of progress increments that the task will take to complete.</param>
        </member>
        <member name="T:MoCapCore.cIProgressIndicator">
            <summary>
Used to report progress of long-running operations. This object can (and should) be used to
recurse into call trees of long-running operations where it makes sense to track progress of
portions of an operation. Start() may be called multiple times before calling Finish(), but
all calls to Start() must be matched with a call to Finish().
There are two ways to report progress. Either call Start() with a non-zero incrementCount to
set the number of times that IncrementProgress() will be called before the task is finished, or
just call SetProgress() to set the progress value directly during task execution. To help make
progress indication more predictable, it is recommended that you use an increment count
whenever possible.
</summary>
        </member>
        <member name="M:MoCapCore.IProgressIndicatorObserver.OnMessageChanged(MoCapCore.cIProgressIndicator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Callback that gets called when the user-facing message changes.</summary>
        </member>
        <member name="M:MoCapCore.IProgressIndicatorObserver.OnProgressChanged(MoCapCore.cIProgressIndicator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Callback that gets called when the progress value changes.</summary>
        </member>
        <member name="T:Motive.cFBXExporter">
            <summary>
Exporter class for FBX files
</summary>
        </member>
        <member name="T:MoCapCore.cFileStream">
            <summary>
A concrete implementation of the cDataStream interface that abstracts the real file system.
</summary>
        </member>
        <member name="T:MoCapCore.cDataStream">
            <summary>
A partial implementation of the cIDataStream interface that provides some convenience functionality
for derived classes.
</summary>
        </member>
        <member name="M:NMotive.FBXBinaryExporter.Export(NMotive.Take,NMotive.DataStream)">
            <exclude />
            <summary>
Exports the given take to the given data stream.
</summary>
            <param name="take">The take to export</param>
            <param name="stream">The data stream to export to.</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="P:NMotive.FBXBinaryExporter.IsBusy">
            <summary>
Gets a property that is <c>true</c> if the this object is currently 
busy doing an export operation.
</summary>
        </member>
        <member name="P:NMotive.FBXBinaryExporter.IsBinary">
            <summary>
Gets a property that is <c>strue</c> if the export format is binary.
</summary>
        </member>
        <member name="P:NMotive.FBXBinaryExporter.Description">
            <summary>
Gets the description of this exporter.
</summary>
        </member>
        <member name="P:NMotive.FBXBinaryExporter.Name">
            <summary>
Gets the name of this exporter.
</summary>
        </member>
        <member name="T:NMotive.FBXBinaryExporter">
            <summary>
Class for exporting take data in FBX binary format.
</summary>
        </member>
        <member name="M:NMotive.FBXExporter.GetRBNullsSettings(sExportSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,NMotive.Take)">
            <exclude />
        </member>
        <member name="M:NMotive.FBXExporter.GetFrameRangeAndRateSettings(sExportSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,NMotive.Take)">
            <exclude />
            <summary>
Fills in the frame range and frame rate fields of the export settings 
struct with value from the given take.
</summary>
            <param name="exportSettings">Export settings struct.</param>
            <param name="take">A take.</param>
        </member>
        <member name="M:NMotive.FBXExporter.GetSkeletonSettings(sExportSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,NMotive.Take)">
            <exclude />
            <summary>
Sets export settings based on the the 
value of the <c>WriteSkeletons</c> property.
</summary>
            <param name="exportSettings">Reference to the export settings structure.</param>
            <param name="take">The take being written to FBX ASCII format.</param>
        </member>
        <member name="M:NMotive.FBXExporter.GetSkeletons(NMotive.Take)">
            <exclude />
            <summary>
Gets the list of skeleton ID's to be written based on the the 
value of the <c>WriteSkeletons</c> property.
</summary>
            <param name="take">The take being written to FBX ASCII format.</param>
        </member>
        <member name="P:NMotive.FBXExporter.WriteRigidBodyNulls">
            <summary>
Gets or sets a value indicating whether or not to write rigid body nulls.
</summary>
        </member>
        <member name="P:NMotive.FBXExporter.Units">
            <summary>
Gets and sets the length units option.
This option determines the base unit of measurement for positioning
in FBX export. Default value is meters.
</summary>
        </member>
        <member name="P:NMotive.FBXExporter.WriteSkeletons">
            <summary>
Gets and sets the property for determining which skeletons, if any are 
written output.
</summary>
        </member>
        <member name="P:NMotive.FBXExporter.RigidBodyNames">
            <summary>
If the <c>RigidBodyWriteNullsOptions</c> property is equal to <c>RigidBodyWriteNullsOptions::Named</c>,
then only rigid bodies whose names are in this list will be written to output.
</summary>
        </member>
        <member name="P:NMotive.FBXExporter.SkeletonNames">
            <summary>
If the <c>WriteSkeletons</c> property is equal to <c>SkeletonWriteOptions::Named</c>,
then only skeletons whose names are in this list will be written to output.
</summary>
        </member>
        <member name="P:NMotive.FBXExporter.IsBusy">
            <summary>
Gets a property that is <c>true</c> if the this object is currently 
busy doing an export operation.
</summary>
        </member>
        <member name="P:NMotive.FBXExporter.Extension">
            <summary>
Gets the conventional extension for files with this export format.
The extension does NOT include the '.'
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.mNamedRigidBodies">
            <summary>
If the WriteSkeletons property is equal the Named, write out
the skeletons whose names are in this list.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.mNamedSkeletons">
            <summary>
If the WriteSkeletons property is equal the Named, write out
the skeletons whose names are in this list.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.mIsBusy">
            <summary>
Set to true when in the export function.
</summary>
        </member>
        <member name="M:NMotive.FBXExporter.#ctor">
            <summary>
Constructs an <c>FBXExporter</c> object with the <c>WriteSkeletons</c>
equal to None.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.SkeletonWriteOptions.Active">
            <summary>
Write all active skeletons in the take.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.SkeletonWriteOptions.Named">
            <summary>
Write skeletons whose names specified in the <c>SkeletonNames</c>
property.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.SkeletonWriteOptions.None">
            <summary>
Do not write skeletons.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.SkeletonWriteOptions.All">
            <summary>
Write all skeletons.
</summary>
        </member>
        <member name="T:NMotive.FBXExporter.SkeletonWriteOptions">
            <summary>
Options for writing skeletons to the output file.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.RigidBodyWriteNullsOptions.Active">
            <summary>
Write all active rigid bodies in the take.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.RigidBodyWriteNullsOptions.Named">
            <summary>
Write rigid body rigidBodies whose names specified in the <c>RigidBodyNames</c>
property.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.RigidBodyWriteNullsOptions.None">
            <summary>
Do not write rigid body rigidBodies.
</summary>
        </member>
        <member name="F:NMotive.FBXExporter.RigidBodyWriteNullsOptions.All">
            <summary>
Write all rigid body rigidBodies.
</summary>
        </member>
        <member name="T:NMotive.FBXExporter.RigidBodyWriteNullsOptions">
            <summary>
Options for writing skeletons to the output file.
</summary>
        </member>
        <member name="T:NMotive.FBXExporter">
            <summary>
Base class for FBX exporters
</summary>
        </member>
        <member name="M:NMotive.Exporter.NativeToManaged(Core.eUnits)">
            <exclude />
        </member>
        <member name="M:NMotive.Exporter.ManagedToNative(NMotive.LengthUnits)">
            <exclude />
        </member>
        <member name="P:NMotive.Exporter.Scale">
            <summary>
Gets and sets the scale property.
Range from 0 to 1. Default is 1.
</summary>
        </member>
        <member name="P:NMotive.Exporter.FrameRate">
            <summary>
Gets and sets frame rate to export at. The default value is the 
class constant <c>DefaultFrameRate</c>. When set to this value the
export frame rate will be the same as the take frame rate.
</summary>
        </member>
        <member name="P:NMotive.Exporter.EndFrame">
            <summary>
Gets the index of the last frame to export. Frames in the range 
<c>StartFrame</c> to <c>EndFrame</c> will be exporterd. The default
value is the class constant <c>Exporter::DefaultEndFrame</c>. When 
<c>EndFrame</c> is set to this value the end frame will 
be the last frame in the take being exported.
</summary>
        </member>
        <member name="P:NMotive.Exporter.StartFrame">
            <summary>
Gets the index of the first frame to export. Frames in the range 
<c>StartFrame</c> to <c>EndFrame</c> will be exporterd. The default
value is the class constant <c>Exporter::DefaultStartFrame</c>. When 
<c>StartFrame</c> is set to this value the start frame will 
be the first frame in the take being exported.
</summary>
        </member>
        <member name="F:NMotive.Exporter.DefaultFrameRate">
            <summary>
Default frame rate to export at. When the property
<c>FrameRate</c> is set to this value the export frame rate will be
the same as the take frame rate.
</summary>
        </member>
        <member name="F:NMotive.Exporter.DefaultEndFrame">
            <summary>
Default end frame in the take to export.
When the <c>EndFrame</c> property is set to this value the end frame will 
be the last frame in the take being exported.
</summary>
        </member>
        <member name="F:NMotive.Exporter.DefaultStartFrame">
            <summary>
Default starting frame in the take to export.
When the <c>StartFrame</c> property is set to this value the start frame will 
be the first frame in the take being exported.
</summary>
        </member>
        <member name="T:NMotive.Exporter">
            <summary>
Base class from which all take Exporters derive.
</summary>
        </member>
        <member name="M:NMotive.ExporterBase.Export(NMotive.Take,System.String,System.Boolean)">
            <summary>
Exports the given take to the given file with option to overwrite existing
file.
</summary>
            <param name="take">The take to export</param>
            <param name="filePath">The path of the file to export to.</param>
            <param name="overwrite">If <c>true</c>, and the specified file exists
it will be overwritten. If <c>false</c> and the specified file exists
then the existing file will not be overwritten and the take will not be
exported. The <c>Success</c> property on the returned <c>Result</c> object
will be <c>false</c>. If the specified file does not exist this parameter has no affect.
</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="M:NMotive.ExporterBase.Export(NMotive.Take,NMotive.DataStream)">
            <exclude />
            <summary>
Exports the given take to the given data stream.
</summary>
            <param name="take">The take to export</param>
            <param name="stream">The data stream to export to.</param>
            <returns>The result of the export attempt.</returns>
        </member>
        <member name="P:NMotive.ExporterBase.IsBusy">
            <summary>
Gets a property that is <c>true</c> if the this object is currently 
busy doing an export operation.
</summary>
        </member>
        <member name="P:NMotive.ExporterBase.IsBinary">
            <summary>
Gets a property that is <c>strue</c> if the export format is binary.
</summary>
        </member>
        <member name="P:NMotive.ExporterBase.Extension">
            <summary>
Gets the conventional extension for files with this export format.
The extension does NOT include the '.'
</summary>
        </member>
        <member name="P:NMotive.ExporterBase.Description">
            <summary>
Gets the description of this exporter.
</summary>
        </member>
        <member name="P:NMotive.ExporterBase.Name">
            <summary>
Gets the name of this exporter.
</summary>
        </member>
        <member name="F:NMotive.ExporterBase.mNativeExporter">
            <exclude />
        </member>
        <member name="T:NMotive.ExporterBase">
            <summary>
Base class from which all take Exporters derive.
</summary>
        </member>
        <member name="M:MoCapCore.cIExporter.Busy">
            <summary>Returns true if the exporter is busy exporting.</summary>
        </member>
        <member name="M:MoCapCore.cIExporter.MapToString(System.Int32)">
            <summary>Maps an error code from this exporter to a human-readable string value.</summary>
        </member>
        <member name="M:MoCapCore.cIExporter.Export(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIDataStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Export the given take using the given (open) stream. Exporters return 0 on success and a non-zero
value on failure. The return value can be mapped to a human-readable string using the MapToString
method.
</summary>
        </member>
        <member name="M:MoCapCore.cIExporter.IsBinary">
            <summary>Should return true for exporters that expect to write data in binary format.</summary>
        </member>
        <member name="M:MoCapCore.cIExporter.Properties">
            <summary>
Retrieve the property collection of options for this exporter.
</summary>
        </member>
        <member name="M:MoCapCore.cIExporter.Extension">
            <summary>Retrieve the file extension used by exporters of this type.</summary>
        </member>
        <member name="M:MoCapCore.cIExporter.Description">
            <summary>Human-readable description of the file type this exporter creates.</summary>
        </member>
        <member name="M:MoCapCore.cIExporter.Name">
            <summary>Brief name describing the exported type.</summary>
        </member>
        <member name="T:MoCapCore.cIExporter">
            <summary>
Abstract base class for all exporters. Exporters use the cIDataStream interface to write their data.
</summary>
        </member>
        <member name="M:NMotive.NodeWarehouse.ClearRigidBodyNodes">
            <summary>
Removes all rigid body nodes.
</summary>
            <returns>The number of nodes removed.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.ClearSkeletonNodes">
            <summary>
Removes all skeleton nodes.
</summary>
            <returns>The number of nodes removed.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.ClearMarkerSetNodes">
            <summary>
Removes all marker set nodes.
</summary>
            <returns>The number of nodes removed.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.ClearMarkerNodes">
            <summary>
Removes all marker nodes.
</summary>
            <returns>The number of nodes removed.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.ClearJointNodes">
            <summary>
Removes all joint nodes.
</summary>
            <returns>The number of nodes removed.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.RemoveNode(System.String)">
            <summary>
Removes the first node found with the given name.
</summary>
            <param name="nodeName">Name of the node to remove.</param>
            <returns>
                <c>true</c> if a node with the given name was found and successfully removed.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.RemoveNode(NMotive.UID)">
            <summary>
Removes the node with the given ID.
</summary>
            <param name="nodeId">ID of the node to remove.</param>
            <returns>
                <c>true</c> if the node was found and successfully removed.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.AddNode(NMotive.Node)">
            <summary>
Add a node to the scene.
</summary>
            <param name="node">The node to add.</param>
            <returns>
                <c>true</c> if the node was successfully added. <c>false</c>
otherwise.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.AllMarkerSets">
            <summary>
Get a list of all marker sets.
</summary>
            <returns>List of marker sets.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.AllSkeletons">
            <summary>
Retrieves a list of all skeleton nodes.
</summary>
            <returns>A list of the skeleton nodes. If there are no skeleton nodes
the returned list will be empty.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.AllRigidBodies">
            <summary>
Retrieves a list of all rigid body nodes.
</summary>
            <returns>A list of the trackible nodes. If there are no trackible nodes
the returned list will be empty.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.AllJoints">
            <summary>
Retrieves a list of all joint nodes.
</summary>
            <returns>A list of the joint nodes. If there are no joint nodes
the returned list will be empty.</returns>
        </member>
        <member name="M:NMotive.NodeWarehouse.AllMarkers">
            <summary>
Retrieves a list of all marker nodes.
</summary>
            <returns>A list of the marker nodes. If there are no marker nodes
the returned list will be empty.</returns>
        </member>
        <member name="T:NMotive.NodeWarehouse">
            <summary>
Manages all 3D objects in the scene.
</summary>
        </member>
        <member name="M:MoCapCore.cLabelGroup.MakeValidName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find a unique label name based on the given name.</summary>
        </member>
        <member name="M:MoCapCore.cLabelGroup.RemoveLabel(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Attempt to remove a label by name. Returns false if the name was not found.</summary>
        </member>
        <member name="M:MoCapCore.cLabelGroup.AddLabel(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Attempt to add a new label to the group. This method will alter the name to
make it unique if makeUnique is true. It will also return the final name.
</summary>
        </member>
        <member name="T:MoCapCore.cLabelGroup">
            <summary>A group of user-defined marker labels.</summary>
        </member>
        <member name="M:MoCapCore.cJoint.Save(Core.cIWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Add a constraint. Takes ownership of the passed object.</summary>
            <summary>Retrieve the number of constraints.</summary>
            <summary>Returns true if there are any active constraints.</summary>
            <summary>Retrieve the constraint at the given index.</summary>
        </member>
        <member name="M:MoCapCore.cJoint.JointType">
            <summary>Retrieve the current joint DOF type.</summary>
        </member>
        <member name="M:MoCapCore.cJoint.ActiveDOFs">
            <summary>Calculates the joint DOF's based on current joint type.</summary>
        </member>
        <member name="M:MoCapCore.cJoint.SetJointType(MoCapCore.cJoint.eType)">
            <summary>Sets the joint DOF type.</summary>
        </member>
        <member name="M:MoCapCore.cTreeNode.WSRotation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Get the world-space position at the given time.</summary>
        </member>
        <member name="M:MoCapCore.cTreeNode.WSTranslation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Get the world-space position at the given time.</summary>
        </member>
        <member name="T:MoCapCore.cTreeNode">
            <summary>Concrete implementation of the cTreeNode base class.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.CopyTo(Core.cTMarker&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Copy the marker definition and translation data at the given frame into the given marker.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.CanAnimate">
            <summary>Returns true if this marker can be animated.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.Residual">
            <summary>Retrieve the current marker residual.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.SetResidual(System.Single)">
            <summary>
Set the current residual value for this marker. This is only really applicable to live
markers, and this value is not stored in a channel, so cannot be animated.
</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.DiameterChannel">
            <summary>Access the marker diameter channel explicitly.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.ReconstructionID">
            <summary>Get the ID used during marker reconstruction, for ray correlation.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.SetReconstructionID(System.UInt32)">
            <summary>Set the reconstruction ID used during marker reconstruction, to allow ray correlation.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.Size">
            <summary>Get the physical size of the marker.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.SetSize(System.Single)">
            <summary>Set the physical size of this marker.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.IsLabeled">
            <summary>Returns true if this marker is labeled.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.SetLabel(Core.cLabel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Labels this marker. Pass cLabel::Invalid to unlabel a marker.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.#ctor(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Create a new instance with an assigned ID.</summary>
        </member>
        <member name="M:MoCapCore.cMarkerNode.#ctor(System.Boolean)">
            <summary>Create a new instance with a new (internally generated) ID.</summary>
        </member>
        <member name="T:Motive.cMarkerNameImporter">
            <summary>
Importer class for marer name xml files
</summary>
        </member>
        <member name="M:NMotive.ITakeProcessingScriptWithArgs.ValidateArguments(System.String[])">
            <summary>
Validates the arguments for the script. Arguments will by passed to
the script, via the <c>Arguments</c> property, only after they have
been validated by this function.
</summary>
            <param name="argString">The argument string to validate.</param>
            <returns>The result of the validation. If the argument string is validated
the <c>Success</c> field of the returned <c>Result</c> object should
be set to <c>true</c>. If validation fails the he <c>Success</c> field 
of the returned <c>Result</c> object should be set to <c>false</c> and
the <c>Message</c> field should indicate the nature of the error.</returns>
        </member>
        <member name="P:NMotive.ITakeProcessingScriptWithArgs.ArgumentLabel">
            <summary>
You can optionally supply a label to the Motive Batch Processor to 
display next to the text entry box where the user will enter script
arguments. Return <c>null</c> or an empty string if you do not wish
to supply a label.
</summary>
        </member>
        <member name="P:NMotive.ITakeProcessingScriptWithArgs.Arguments">
            <summary>
Set default values for script arguments. Script arguments are an array of
of strings, similar to a programs command line arguments. Script arguments
entered by the user in the Motive Batch Processor will be passed to the
script by this functions.
</summary>
            <remarks>
Arguments are passed to the script only after they are validated by the
<c>ValidateArguments</c> function.
</remarks>
        </member>
        <member name="P:NMotive.ITakeProcessingScriptWithArgs.DefaultArguments">
            <summary>
Get default values for script arguments. Script arguments are an array of
of strings, similar to a programs command line arguments. May return
<c>null</c> or an empty array if there are no default values.
</summary>
        </member>
        <member name="T:NMotive.ITakeProcessingScriptWithArgs">
            <summary>
Interface implemented by .NET scripts if they want to be run using the
Motive Batch Processor application and accept arguments input by the
user.
</summary>
        </member>
        <member name="M:NMotive.ITakeProcessingScript.ProcessTake(NMotive.Take,NMotive.ProgressIndicator)">
            <summary>
Process a take and, optionally, update progress.
</summary>
            <param name="takeToProcess">The take to process.</param>
            <param name="progress">Progress object that the process may
update with its progress.</param>
            <returns>A result object indicating success or failure.</returns>
        </member>
        <member name="T:NMotive.ITakeProcessingScript">
            <summary>
Interface implemented by .NET scripts if they want to be run using the
Motive Batch Processor application. 
</summary>
        </member>
        <member name="M:NMotive.Take.Finalize">
            <exclude />
        </member>
        <member name="M:NMotive.Take.Dispose">
            <exclude />
        </member>
        <member name="M:NMotive.Take.Save(System.String)">
            <summary>
Saves the take to the given file.
</summary>
            <param name="fileName">File to save to.</param>
            <returns>The result of the save attempt.</returns>
        </member>
        <member name="M:NMotive.Take.Save">
            <summary>
Saves any changes made to the take to its associated file.
</summary>
            <returns>The result of the save attempt.</returns>
        </member>
        <member name="M:NMotive.Take.SetStaleDataType(NMotive.Take.DataType,System.Boolean)">
            <summary>
Set a type of data's stale status.
</summary>
            <param name="dataType">The type of data to mark stale.</param>
            <param name="isStale">Is the data stale or not.</param>
        </member>
        <member name="M:NMotive.Take.IsAudioDataStale">
            <summary>
Returns a bool indicating whether or not audio data is stale
for this take.
</summary>
            <returns>
                <c>true</c> is the data is stale, <c>false</c>
otherwise.</returns>
        </member>
        <member name="M:NMotive.Take.IsVideoDataStale">
            <summary>
Returns a bool indicating whether or not video data is stale
for this take.
</summary>
            <returns>
                <c>true</c> is the data is stale, <c>false</c>
otherwise.</returns>
        </member>
        <member name="M:NMotive.Take.Is3DdataStale">
            <summary>
Returns a bool indicating whether or not 3D data is stale
for this take.
</summary>
            <returns>
                <c>true</c> is the data is stale, <c>false</c>
otherwise.</returns>
        </member>
        <member name="M:NMotive.Take.Is2DdataStale">
            <summary>
Returns a bool indicating whether or not 2D data is stale
for this take.
</summary>
            <returns>
                <c>true</c> is the data is stale, <c>false</c>
otherwise.</returns>
        </member>
        <member name="M:NMotive.Take.IsJointDataStale">
            <summary>
Returns a bool indicating whether or not joint data is stale
for this take.
</summary>
            <returns>
                <c>true</c> is the data is stale, <c>false</c>
otherwise.</returns>
        </member>
        <member name="M:NMotive.Take.HasData(NMotive.Take.DataType)">
            <summary>
Returns <c>true</c> if this take contains the given
data type.
</summary>
            <param name="dataType">The type of data.</param>
            <returns>
                <c>true</c> if this take contains the given data type.</returns>
        </member>
        <member name="M:NMotive.Take.HasGaps">
            <summary>
Checks if the take has gaps.
</summary>
            <returns>
                <c>true</c> if the take has gaps.</returns>
        </member>
        <member name="P:NMotive.Take.Scene">
            <summary>
Access to the contained NodeWarehouse
</summary>
        </member>
        <member name="P:NMotive.Take.FileName">
            <summary>
Gets the name of the file associated with the take.
</summary>
        </member>
        <member name="P:NMotive.Take.FullFrameRange">
            <summary>
Gets the full frame range for the take as a frame range.
</summary>
        </member>
        <member name="P:NMotive.Take.FullTimeRange">
            <summary>
Gets the full time range for the take as a tuple where the first member 
is the start time and the second member is the end time.
</summary>
        </member>
        <member name="P:NMotive.Take.FrameTime">
            <summary>
Gets the master frame time (in seconds per frame).
</summary>
        </member>
        <member name="P:NMotive.Take.Notes">
            <summary>
Gets and sets the notes field for this take.
</summary>
        </member>
        <member name="P:NMotive.Take.Name">
            <summary>
Gets and sets the name for this take.
</summary>
        </member>
        <member name="P:NMotive.Take.FrameRate">
            <summary>
Gets the frame rate for this take.
</summary>
        </member>
        <member name="P:NMotive.Take.SessionID">
            <summary>
Gets the session ID for this take.
</summary>
        </member>
        <member name="P:NMotive.Take.ID">
            <summary>
Gets the unique ID for this take.
</summary>
        </member>
        <member name="M:NMotive.Take.#ctor(System.String)">
            <summary>
Constructs a take from the data in the given take file.
</summary>
            <param name="takeFilename">A take file.</param>
        </member>
        <member name="M:NMotive.Take.#ctor">
            <summary>
Constructs an empty take.
</summary>
        </member>
        <member name="F:NMotive.Take.DataType.AllTypes">
            <summary>Has all of the types of data.</summary>
        </member>
        <member name="F:NMotive.Take.DataType.Audio">
            <summary>Audio data.</summary>
        </member>
        <member name="F:NMotive.Take.DataType.Video">
            <summary>Video data.</summary>
        </member>
        <member name="F:NMotive.Take.DataType.Joints">
            <summary>Joint angle data.</summary>
        </member>
        <member name="F:NMotive.Take.DataType.e3D">
            <summary>3D data.</summary>
        </member>
        <member name="F:NMotive.Take.DataType.e2D">
            <summary>2D data.</summary>
        </member>
        <member name="F:NMotive.Take.DataType.None">
            <summary>No data.</summary>
        </member>
        <member name="T:NMotive.Take.DataType">
            <summary>
Types of data that a take may contain.
</summary>
        </member>
        <member name="T:NMotive.Take">
            <summary>
Owns all animation data for a take, as well as setup info for cameras (calibration, etc.).
</summary>
        </member>
        <member name="P:NMotive.ProgressIndicator.IsCancelled">
            <summary>
Gets and sets the cancelled property. This property will be 
checked by the consumer code periodically to see if the operation
had been canceled.
</summary>
        </member>
        <member name="M:NMotive.ProgressIndicator.Finish">
            <summary>Call this to finish a measured task.</summary>
        </member>
        <member name="P:NMotive.ProgressIndicator.Message">
            <summary>Gets the current message.</summary>
        </member>
        <member name="P:NMotive.ProgressIndicator.Progress">
            <summary>Gets the current progress value.</summary>
        </member>
        <member name="M:NMotive.ProgressIndicator.SetMessage(System.String)">
            <summary>Set the message to display to the user.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NMotive.ProgressIndicator.SetProgress(System.Single)">
            <summary>
Set the progress as a float value between 0 and 1.
</summary>
            <param name="progress">A float value in the range [0.0, 1.0] with 1.0 meaning
complete.</param>
        </member>
        <member name="M:NMotive.ProgressIndicator.SetProgress(System.UInt32)">
            <summary>
Called to update progress value directly. Progress is in the range [0,100].
</summary>
            <param name="percent">Progress as a percentage in the range [1,100]</param>
        </member>
        <member name="M:NMotive.ProgressIndicator.IncrementProgress">
            <summary>Called to increase the progress by one increment.</summary>
        </member>
        <member name="M:NMotive.ProgressIndicator.Start(System.String,System.UInt32)">
            <summary>This is called to run the operation using the given progress indicator.</summary>
            <param name="message">A user-facing message to display during the task.</param>
            <param name="incrementCount">The number of progress increments that the task will take to complete.</param>
        </member>
        <member name="F:NMotive.ProgressIndicator.mIsCancelled">
            <exclude />
        </member>
        <member name="F:NMotive.ProgressIndicator.mMessage">
            <exclude />
        </member>
        <member name="F:NMotive.ProgressIndicator.mProgressCount">
            <exclude />
        </member>
        <member name="F:NMotive.ProgressIndicator.mIncrementCount">
            <exclude />
        </member>
        <member name="F:NMotive.ProgressIndicator.mProgressPercent">
            <exclude />
        </member>
        <member name="T:NMotive.ProgressIndicator">
            <summary>
Class for indicating progress and messages pertaining to an operation.
</summary>
        </member>
        <member name="M:NMotive.FrameRangeSet.op_Inequality(NMotive.FrameRangeSet,NMotive.FrameRange)">
            <summary>
Non-equality operator for frame range sets and frame ranges.
</summary>
            <param name="lhs">A frame range set.</param>
            <param name="rhs">A frame range.</param>
            <returns>
                <c>true</c> if the set does not contain exactly one
range which is equal to the given range.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.op_Inequality(NMotive.FrameRangeSet,NMotive.FrameRangeSet)">
            <summary>
Non-equality operator for frame range sets.
</summary>
            <param name="lhs">A frame range set.</param>
            <param name="rhs">A frame range set.</param>
            <returns>
                <c>true</c> if the sets are not equal.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.op_Equality(NMotive.FrameRangeSet,NMotive.FrameRange)">
            <summary>
Equality operator for frame range sets and frame ranges.
</summary>
            <param name="lhs">A frame range set.</param>
            <param name="rhs">A frame range.</param>
            <returns>
                <c>true</c> if the set contains one range which is 
equal to the given range.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.op_Equality(NMotive.FrameRangeSet,NMotive.FrameRangeSet)">
            <summary>
Equality operator for frame range sets.
</summary>
            <param name="lhs">A frame range set.</param>
            <param name="rhs">A frame range set.</param>
            <returns>
                <c>true</c> if the sets are equal.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.op_Subtraction(NMotive.FrameRangeSet,System.Int32)">
            <summary>
Subtraction operator for frame range sets and frame indices.
</summary>
            <param name="lhs">A frame range set.</param>
            <param name="rhs">A frame index to remove from the set.</param>
            <returns>The frame range set with the given frame range whose start and 
endpoints are the given frame index removed.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.op_Subtraction(NMotive.FrameRangeSet,NMotive.FrameRange)">
            <summary>
Subtraction operator for frame range sets and frame ranges.
</summary>
            <param name="lhs">A frame range set.</param>
            <param name="rhs">A frame range to remove from the set.</param>
            <returns>The frame range set with the given frame range removed.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.op_Addition(NMotive.FrameRangeSet,System.Int32)">
            <summary>
Addition operator for frame range sets and frame indices.
</summary>
            <param name="lhs">A frame range set.</param>
            <param name="rhs">A frame index to add to the set.</param>
            <returns>The frame range set with the given frame range whose start and 
endpoints are the given frame index added.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.op_Addition(NMotive.FrameRangeSet,NMotive.FrameRange)">
            <summary>
Addition operator for frame range sets and frame ranges.
</summary>
            <param name="lhs">A frame range set.</param>
            <param name="rhs">A frame range to add to the set.</param>
            <returns>The frame range set with the given frame range added.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.UpdateExtents(System.Int32,NMotive.FrameRange)">
            <summary>Update the extents on the range with the given index in the array.</summary>
        </member>
        <member name="M:NMotive.FrameRangeSet.ConsolidateRanges">
            <summary>Consolidate overlapping ranges and sort them in ascending order.</summary>
        </member>
        <member name="M:NMotive.FrameRangeSet.Range(System.Int32)">
            <summary>
Gets the frame range with a given index.
</summary>
            <param name="n">Index of the frame to get.</param>
            <returns> the n'th disjoint range in the set.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.Contains(System.Int32)">
            <summary>
Tests if this frame range set contains a given frame index.
</summary>
            <param name="frameIndex">A frame index.</param>
            <returns>
                <c>true</c> if this set includes the given frame.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.Contains(NMotive.FrameRange)">
            <summary>
Tests if a given frame range is contained in this set.
</summary>
            <param name="range">The range to test.</param>
            <returns>
                <c>true</c> if this set completely contains the given range.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.Extents">
            <summary>
Calculates the extents of this frame range set.
</summary>
            <returns>A frame range with the lowest and highest frames contained 
in the set of ranges.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.Clear">
            <summary>Clears the list of ranges.</summary>
        </member>
        <member name="M:NMotive.FrameRangeSet.Invert">
            <summary>
Inverts the range set in place. If you invert a range that does not include positive and negative
infinity, the inverted set will extend to those limits.
</summary>
        </member>
        <member name="M:NMotive.FrameRangeSet.Intersection(NMotive.FrameRange)">
            <summary>
Returns the intersection of the given frame range with the this range set, or an empty frame range
if no intersection.
</summary>
            <param name="range">A frame range.</param>
            <returns>The frame range that is the intersection of this frame range set with the
given range.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.Intersects(NMotive.FrameRangeSet)">
            <summary>Returns true if the given range set intersects this set.</summary>
            <param name="set">A frame range set.</param>
            <returns>
                <c>true</c>if any frame range intersects any range in the given set.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.Intersects(NMotive.FrameRange)">
            <summary>Returns true if the given range intersects this set.</summary>
            <param name="range">Range to intersect.</param>
            <returns>
                <c>true</c>if any range in this set intercts the given range.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.Intersect(NMotive.FrameRange)">
            <summary>Sets this range set to the intersection with the given range set.</summary>
            <param name="range">The frame range to intersect.</param>
        </member>
        <member name="M:NMotive.FrameRangeSet.AddNoMerge(NMotive.FrameRange)">
            <summary>Add the given frame range into the set without merging overlapping ranges.</summary>
            <param name="range">A frame range to add.</param>
            <returns>
                <c>true</c> if the range was added. Note that the range will not be added if the
set is empty.</returns>
        </member>
        <member name="M:NMotive.FrameRangeSet.Add(NMotive.FrameRange)">
            <summary>Add (union) the given frame range into the set.</summary>
            <param name="range">A frame range to add.</param>
            <returns>True if the set was changed (the given range was not already included).</returns>
        </member>
        <member name="P:NMotive.FrameRangeSet.RangeCount">
            <summary>Returns the number of disjoint ranges contained in the set.</summary>
        </member>
        <member name="P:NMotive.FrameRangeSet.Empty">
            <summary>Returns true if there are no contained ranges.</summary>
        </member>
        <member name="P:NMotive.FrameRangeSet.TotalFrames">
            <summary>Calculates the total number of frames in the full set of ranges.</summary>
        </member>
        <member name="M:NMotive.FrameRangeSet.#ctor(NMotive.FrameRange)">
            <summary>
Constructs a frame range set containing the given range.
</summary>
            <param name="range">A frame range.</param>
        </member>
        <member name="M:NMotive.FrameRangeSet.#ctor(System.Int32)">
            <summary>
Constructs a frame range set with as single frame range whose
start and end points are the given frame index.
</summary>
            <param name="frameIndex">A frame index.</param>
        </member>
        <member name="M:NMotive.FrameRangeSet.#ctor">
            <summary>
Constructs an empty frame range set.
</summary>
        </member>
        <member name="T:NMotive.FrameRangeSet">
            <summary>
Represents a (non-overlapping) set of frame ranges. Ranges are stored in 
strictly increasing order of frame ranges for convenience when using the class.
</summary>
        </member>
        <member name="M:NMotive.KeyframeDataFilter.Apply(System.Collections.Generic.IList`1{NMotive.Keyframe`1{NMotive.Quaternion}})">
            <summary>
Apply the filter to the given list of quaternion rotations.
</summary>
            <param name="vals">A list of quaternion rotations.</param>
        </member>
        <member name="M:NMotive.KeyframeDataFilter.Apply(System.Collections.Generic.IList`1{NMotive.Keyframe`1{NMotive.Vector3f}})">
            <summary>
Apply the filter to the given list of key frame 3-D vectors.
</summary>
            <param name="vals">A list of key frame 3-D vectors.</param>
        </member>
        <member name="M:NMotive.KeyframeDataFilter.Apply(System.Collections.Generic.IList`1{NMotive.Vector3f})">
            <summary>
Apply the filter to the given list of 3-D vectors.
</summary>
            <param name="vals">A list of 3-D vectors.</param>
        </member>
        <member name="M:NMotive.KeyframeDataFilter.Apply(System.Collections.Generic.IList`1{NMotive.Keyframe`1{System.Single}})">
            <summary>
Apply the filter to the given key frames.
</summary>
            <param name="vals">A list of key frames.</param>
        </member>
        <member name="M:NMotive.KeyframeDataFilter.Apply(System.Collections.Generic.IList`1{System.Single})">
            <summary>
Apply the filter to the given values.
</summary>
            <param name="vals">A list of values.</param>
        </member>
        <member name="P:NMotive.KeyframeDataFilter.CutoffFrequency">
            <summary>
Set the cut-off frequency (in Hz) for the filter.
</summary>
        </member>
        <member name="P:NMotive.KeyframeDataFilter.SampleRate">
            <summary>
Set the data rate (in Hz) to assume for all samples.
</summary>
        </member>
        <member name="P:NMotive.KeyframeDataFilter.Order">
            <summary>
Set the order of the filter. Must be an even integer in the range [2,6].
</summary>
        </member>
        <member name="T:NMotive.KeyframeDataFilter">
            <summary>
Builds an nth order Butterworth IIR filter, and allows setting of the cutoff frequency. The filter
order must be an even integer to allow backward and forward application of 1/2 nth order filters to
compensate for phase shift that would otherwise be introduced by only running the filter in the
forward direction. See MatLab's filtfilt for description.
This filter assumes that the keyframe data is contiguous (i.e. no gaps).
</summary>
        </member>
        <member name="P:NMotive.AnimatedNode.KeyFrameRange">
            <summary>
Gets the keyframe range.
</summary>
        </member>
        <member name="P:NMotive.AnimatedNode.ChannelCount">
            <summary>
Gets the number of channels available.
</summary>
        </member>
        <member name="M:NMotive.AnimatedNode.HasChannel(NMotive.Channel.ChannelType)">
            <summary>
Returns true if a channel of the given type exists on this node.
</summary>
            <param name="channelType">Type of channel.</param>
            <returns>
                <c>true</c> if this node contains data for the
specified channel type.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.Rotation(System.TimeSpan)">
            <summary>
Get the local rotation at the given time.
</summary>
            <param name="fracFrame">The fractional frame time.</param>
            <returns>The rotation as a unit quaternion for the specified time.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.Translation(System.TimeSpan)">
            <summary>
Get the local position at the given time.
</summary>
            <param name="fracFrame">The fractional frame time.</param>
            <returns>The position coordinates for the specified time.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.WorldTransform(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Get the full world coordinate transform at the given time.
</summary>
            <param name="frameIndex">The frame index.</param>
            <returns>The simple affine world transformation for the frame.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.Transform(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Get the full transform at the given time.
</summary>
            <param name="frameIndex">The frame index.</param>
            <returns>The simple affine transformation for the frame.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.Rotation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Get the local rotation at the given time.
</summary>
            <param name="frameIndex">The frame index.</param>
            <returns>The rotation as a unit quaternion for the frame.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.Translation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Get the local position at the given frame index.
</summary>
            <param name="frameIndex">The frame index.</param>
            <returns>Local position of the frame index.</returns>
        </member>
        <member name="P:NMotive.AnimatedNode.RotationChannel">
            <summary>
Gets the rotation channel. If there is no rotation channel 
<c>null</c> is returned.
</summary>
        </member>
        <member name="P:NMotive.AnimatedNode.TranslationChannel">
            <summary>
Gets the translation channel. If there is
no translation channel <c>null</c> is returned.
</summary>
        </member>
        <member name="M:NMotive.AnimatedNode.SetRotation(System.Int32!System.Runtime.CompilerServices.IsLong,NMotive.Quaternion)">
            <summary>
A convenience method for setting local rotation. The default rotation will be set if no animation
channel exists.
</summary>
            <param name="frameIndex">Frame index to set value on.</param>
            <param name="val">The value to set.</param>
            <returns>True if the key was set. False if a key was not set, but the default value was.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.SetTranslation(System.Int32!System.Runtime.CompilerServices.IsLong,NMotive.Vector3f)">
            <summary>
A convenience method for setting local translation. The default translation value will be set if no
animation channel exists.
</summary>
            <param name="frameIndex">Frame index to set value on.</param>
            <param name="val">The value to set.</param>
            <returns>True if the key was set. False if a key was not set, but the default value was.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.SetChannel(NMotive.Channel)">
            <summary>
Set one of the animation channels. Which channel gets set is governed by the Type()
of the given channel.
</summary>
            <param name="channel">The channel.</param>
            <returns>True if the given channel was a match for this node and was set as the translation channel.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.Clear">
            <summary>
Clear all animation data.
</summary>
        </member>
        <member name="M:NMotive.AnimatedNode.Clear(NMotive.FrameRange)">
            <summary>
Clear all animation data over the given range.
</summary>
            <param name="range">A range</param>
        </member>
        <member name="M:NMotive.AnimatedNode.IsKeyed(NMotive.FrameRange)">
            <summary>
Checks for the presence of keyed data in a give range.
</summary>
            <param name="range">A range.</param>
            <returns>Returns <c>true</c> if a transform key exists in the given range.</returns>
        </member>
        <member name="M:NMotive.AnimatedNode.IsKeyed">
            <summary>
Checks for the presence of keyed data.
</summary>
            <returns>Returns <c>true</c> if a transform key exists.</returns>
        </member>
        <member name="T:NMotive.AnimatedNode">
            <summary>
Base class for animated nodes in a scene. Nodes are gathered into a hierarchy in the scene
where they are either a child of the root scene node <c>NodeWarehouse</c>
or a child of another existing node in the scene.
Each node also has a transform that accumulates with its parent transform such that a full transform
hierarchy is formed by traversing the node hierarchy.</summary>
        </member>
        <member name="M:NMotive.Vector3fChannel.SetOrAddKeyComponent(System.Single,System.Int32,System.Int32,NMotive.InterpolationType)">
            <summary>
Sets a single component of a key, or creates a new key if none exists. The other axes of the new key
will be filled in using the requested interpolation type.
</summary>
            <param name="val">The value.</param>
            <param name="whichAxis">0 = x, 1 = y, 2 = z.</param>
            <param name="frameIndex">The key frame index which contains the value
to be set.</param>
            <param name="interpType">This interpolation type to used to interpret the other two axis
values if the key needs to be added.</param>
        </member>
        <member name="M:NMotive.Vector3fChannel.SetKeyComponent(System.Single,System.Int32,System.Int32)">
            <summary>
Sets a single component of a key. If the key is not found no values will
be set.
</summary>
            <param name="val">The value.</param>
            <param name="whichAxis">0 = x, 1 = y, 2 = z.</param>
            <param name="frameIndex">The key frame index which contains the value
to be set.</param>
        </member>
        <member name="M:NMotive.Vector3fChannel.FindKeys(NMotive.FrameRange)">
            <summary>
Retrieve all the keys that fall within the given time range, including end points. The keys
in the returned array are guaranteed to be in order of increasing time.
</summary>
            <param name="range">Find all keys in this frame range.</param>
            <returns>List of keys, in order of increasing time, of all the keys in the 
specified range.</returns>
        </member>
        <member name="M:NMotive.Vector3fChannel.AllKeys">
            <summary>
Retrieve a copy of the entire key array.
</summary>
            <returns>A list of all keys.</returns>
        </member>
        <member name="M:NMotive.Vector3fChannel.KeyExtents(NMotive.FrameRange,System.Int32,NMotive.Vector3f@,NMotive.Vector3f@)">
            <summary>
Calculate the minimum and maximum values in the requested dimension for all keys 
within the given range.
</summary>
            <param name="range">The frame range over which to compute the mimimum and 
maximum values.</param>
            <param name="minVals">Minimum values if there are keys in the given range.</param>
            <param name="maxVals">Maximum values if there are keys in the given range.</param>
            <param name="axis">Axis to get extents for. 0 = x-axis, 1 = y-axis, 2 = z-axis.</param>
            <returns>
                <c>true</c> if there are keys in the given range and <c>minVals</c> and
<c>maxVals</c> contain valid values. <c>false</c> if there are no keys in the given range.</returns>
        </member>
        <member name="M:NMotive.Vector3fChannel.Value(System.TimeSpan)">
            <summary>
Evaluate the channel at the given time and return its value. Will interpolate 
keys where needed.
</summary>
            <param name="fractionalFrame">Fractional frame time of the value.</param>
            <returns>The value at the frame time.</returns>
        </member>
        <member name="M:NMotive.Vector3fChannel.Value(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean@)">
            <summary>
Evaluate the channel at the given frame and return its value. No interpolation.
</summary>
            <param name="frameIndex">et value for this frame index.</param>
            <param name="isKey">Set to <c>true</c> if the frame index corresponds to a key frame.</param>
            <returns>Value at the frame index if it is a keyframe. If it is not
a keyframe it is the value of the nearest previous key.</returns>
        </member>
        <member name="M:NMotive.Vector3fChannel.InsertKeys(System.Collections.Generic.List`1{NMotive.Keyframe`1{NMotive.Vector3f}},System.Boolean)">
            <summary>
Inserts the given keys into this channel. The time range of the incoming keys is cleared before
setting new keys. The given keys must be in the array in order of increasing frame number.
</summary>
            <param name="sourceKeys">Keys to insert.</param>
            <param name="preserveOriginal">If true any existing keys will be inserted into the input
<c>sourceKeys</c> before the source keys are inserted.</param>
        </member>
        <member name="M:NMotive.Vector3fChannel.SetKeys(System.Collections.Generic.List`1{NMotive.Keyframe`1{NMotive.Vector3f}},System.Boolean)">
            <summary>
Convenience method for setting multiple keys at once.
</summary>
            <param name="keys">Key frames to set.</param>
            <param name="addIfNotFound">If true, a new key will be created if one 
does not exist for each key.</param>
        </member>
        <member name="M:NMotive.Vector3fChannel.SetKey(NMotive.Vector3f,System.Int32,System.Boolean)">
            <summary>
Set a key at a given frame.
</summary>
            <param name="val">Key value to assign.</param>
            <param name="frameIndex">Frame index at which to assign value.</param>
            <param name="addIfNotFound">If true, a new key will be created 
at the given time if one does not exist</param>
        </member>
        <member name="M:NMotive.Vector3fChannel.SetKey(NMotive.Keyframe`1{NMotive.Vector3f},System.Boolean)">
            <summary>
Set a keyframe value.
</summary>
            <param name="key">Keyframe to add</param>
            <param name="addIfNotFound">If true, a new key will be created at the
given time if one does not exist</param>
        </member>
        <member name="P:NMotive.Vector3fChannel.DefaultValue">
            <summary>
Gets and sets the default <c>Vector3fChannel</c> value.
</summary>
        </member>
        <member name="M:NMotive.Vector3fChannel.#ctor">
            <summary>
Constructs an empty <c>Vector3fChannel</c> object.
</summary>
        </member>
        <member name="T:NMotive.Vector3fChannel">
            <summary>
Channel class for postitional, or transalational, data.
</summary>
        </member>
        <member name="M:MoCapCore.cVector3fChannel.VelocityStats(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>Calculate a binned velocity for the given frame range.</summary>
        </member>
        <member name="M:NMotive.QuaternionChannel.FindKeys(NMotive.FrameRange)">
            <summary>
Retrieve all the keys that fall within the given time range, including end points. The keys
in the returned array are guaranteed to be in order of increasing time.
</summary>
            <param name="range">Find keys in this frame range.</param>
            <returns>List of keyframes in the given range. The list may be
empty.</returns>
        </member>
        <member name="M:NMotive.QuaternionChannel.AllKeys">
            <summary>
Retrieve a copy of the entire list of keys.
</summary>
            <returns>The list of all keys.</returns>
        </member>
        <member name="M:NMotive.QuaternionChannel.KeyExtents(NMotive.FrameRange,System.Int32,NMotive.Quaternion@,NMotive.Quaternion@)">
            <summary>
Calculate the min and max values in the requested dimension for all 
keys within the given range.
</summary>
            <param name="range">Get extents for keys in this frame range.</param>
            <param name="axis">Index of axis for which to retrieve extents if keys
exist in the given range.</param>
            <param name="minVals">If there are keys in the range min exents will be placed in 
<c>minVals[axis]</c>.</param>
            <param name="maxVals">If there are keys in the range max exents will be placed in 
<c>maxVals[axis]</c>.</param>
            <returns>False if there are no keys in the given range.</returns>
        </member>
        <member name="M:NMotive.QuaternionChannel.Value(System.TimeSpan)">
            <summary>
Evaluate the channel at the given time and return its value. Will interpolate 
keys where needed.
</summary>
            <param name="fractionalFrame">Fractional frame time of the value.</param>
            <returns>The value at the frame time.</returns>
        </member>
        <member name="M:NMotive.QuaternionChannel.TryGetValue(System.Int32,NMotive.Quaternion@)">
            <summary>
Get the value the channel at the given frame if it frame is a key. No interpolation.
</summary>
            <param name="frame">Frame index.</param>
            <param name="val">If the return value is true, contains the value.
If the return value is false this value is untouched.</param>
            <returns>true if there is a value for this frame. In this case 
<c>val</c> contains the value</returns>
        </member>
        <member name="M:NMotive.QuaternionChannel.InsertKeys(System.Collections.Generic.List`1{NMotive.Keyframe`1{NMotive.Quaternion}}!System.Runtime.CompilerServices.IsByValue,System.Boolean)">
            <summary>
Inserts the given keys into this channel. The time range of 
the incoming keys is cleared before
setting new keys. The given keys must be in the array in order 
of increasing frame number.
</summary>
            <param name="sourceKeys">Keys to insert.</param>
            <param name="preserveOriginal">Preserve original key values.</param>
        </member>
        <member name="M:NMotive.QuaternionChannel.SetKeys(System.Collections.Generic.List`1{NMotive.Keyframe`1{NMotive.Quaternion}}!System.Runtime.CompilerServices.IsByValue,System.Boolean)">
            <summary>
Convenience method for setting multiple keys at once.
</summary>
            <param name="keys">The keys to set.</param>
            <param name="addIfNotFound">If true, a new key will be created 
if one does not exist for each key.</param>
        </member>
        <member name="M:NMotive.QuaternionChannel.SetKey(NMotive.Quaternion,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary>
Set a key at the given frame.
</summary>
            <param name="val">Key value to assign</param>
            <param name="tm">Frame index at which to add the key</param>
            <param name="addIfNotFound">If true, a new key will be created at 
the given time if one does not exist</param>
        </member>
        <member name="M:NMotive.QuaternionChannel.SetKey(NMotive.Keyframe`1{NMotive.Quaternion},System.Boolean)">
            <summary>
Set a keyframe.
</summary>
            <param name="key">Keyframe to add</param>
            <param name="addIfNotFound">If true, a new key will be created at the
given time if one does not exist</param>
        </member>
        <member name="P:NMotive.QuaternionChannel.DefaultValue">
            <summary>
Sets and gets the default value to use when no keys exist.
</summary>
        </member>
        <member name="M:NMotive.QuaternionChannel.#ctor">
            <summary>
Constructs an empty <c>QuaternionChannel</c> object.
</summary>
        </member>
        <member name="T:NMotive.QuaternionChannel">
            <summary>
Quaternion channel values for a node.
</summary>
        </member>
        <member name="M:MoCapCore.cKeyframeDataFilter.Apply(std.vector&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Apply the filter to the given keys. Keys are assumed to be contiguous.</summary>
        </member>
        <member name="M:MoCapCore.cKeyframeDataFilter.SetCutoffFrequency(System.Double)">
            <summary>Set the cutoff frequency (in Hz) for the filter.</summary>
        </member>
        <member name="M:MoCapCore.cKeyframeDataFilter.SetSampleRate(System.Double)">
            <summary>Set the data rate (in Hz) to assume for all samples.</summary>
        </member>
        <member name="M:MoCapCore.cKeyframeDataFilter.SetOrder(System.Int32)">
            <summary>Set the order of the filter. Must be an even integer in the range [2,6].</summary>
        </member>
        <member name="T:MoCapCore.cKeyframeDataFilter">
            <summary>
Builds an nth order Butterworth IIR filter, and allows setting of the cutoff frequency. The filter
order must be an even integer to allow backward and forward application of 1/2 nth order filters to
compensate for phase shift that would otherwise be introduced by only running the filter in the
forward direction. See MatLab's filtfilt for description.
This filter assumes that the keyframe data is contiguous (i.e. no gaps).
</summary>
        </member>
        <member name="F:MoCapCore.cUndoStack.kDefaultMaxMemSize">
            <summary>The default maximum memory size for the undo buffer before serialization starts to engage.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.Enabled">
            <summary>True if the undo stack is enabled (i.e. will accept new undo items).</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.SetEnabled(System.Boolean)">
            <summary>Enable or disable acceptance of new undo items.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.Editing">
            <summary>True if an edit operation is active.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.FinishEdit(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finishes and commits the changes to a usable undo list.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.CancelEdit">
            <summary>Cancels any current edit operation and undoes any items on the current edit stack.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.AddItem(MoCapCore.cIUndoItem*)">
            <summary>Add an item to the currently active edit list. Takes ownership of the item.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.StartEdit">
            <summary>Start a new edit operation if one is not already active.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.RedoCaption">
            <summary>Returns the current redo caption, or empty string if none.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.UndoCaption">
            <summary>Returns the current undo caption, or empty string if none.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.CanRedo">
            <summary>Returns true if there is an available redo.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.CanUndo">
            <summary>Returns true if there is an available undo.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.Clear">
            <summary>Clears the undo/redo stack completely and with extreme prejudice.</summary>
        </member>
        <member name="M:MoCapCore.cUndoStack.Redo">
            <summary>Redo the top group of items in the list that was previously undone.</summary>
            <returns>True if there was a list to redo and redo was successful.</returns>
        </member>
        <member name="M:MoCapCore.cUndoStack.Undo">
            <summary>Undo the top group of items in the list.</summary>
            <returns>True if there was a list to undo and undo was successful.</returns>
        </member>
        <member name="M:MoCapCore.cUndoStack.SetMaxMemSize(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Set a hint for how much memory usage is acceptable before serialization of items in the list
should start to occur.
</summary>
        </member>
        <member name="T:MoCapCore.cUndoStack">
            <summary>
Manages an undo stack composed of grouped undo items. Each undo/redo may affect a long list of edits
that occurred, so individual undo items are grouped into lists that can be undone/redone as a unit.
If a disk cache file is set, undo items will be cached to disk when the max mem size for the undo
stack is exceeded.
</summary>
        </member>
        <member name="M:MoCapCore.cUndoList.MemorySize">
            <summary>
Cumulative size (in memory) of all items in the list. Will be a small number if the list items
have been serialized to disk.
</summary>
        </member>
        <member name="M:MoCapCore.cUndoList.SetCaption(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the caption to use for this set of operations.</summary>
        </member>
        <member name="M:MoCapCore.cUndoList.AddItem(MoCapCore.cIUndoItem*)">
            <summary>Add an item to the list. Takes ownership of the item.</summary>
        </member>
        <member name="M:MoCapCore.cIUndoItem.MemorySize">
            <summary>The (approximate) size of this item in memory when not serialized.</summary>
        </member>
        <member name="M:MoCapCore.cIUndoItem.Redo">
            <summary>Redo any previously undone data edits that are part of this item.</summary>
        </member>
        <member name="M:MoCapCore.cIUndoItem.Undo">
            <summary>Undo any data edits that are part of this item.</summary>
        </member>
        <member name="T:MoCapCore.cIUndoItem">
            <summary>
Derive from this interface to create units of undo-able data edits. Multiple undo items can be pushed
onto the stack between UndoStack::StartEdit()/UndoStack::FinishEdit() calls and they will be collected
into a single undoable operation.
When implementing Redo(), remember that Undo() will have been called first on your undo item, so any
state information in the UndoItem should represent what the original state was, and how to Redo the
edit.
</summary>
        </member>
        <member name="P:NMotive.Node.Name">
            <summary>
Gets and sets the name for this node.
</summary>
        </member>
        <member name="P:NMotive.Node.ID">
            <summary>
Gets the ID for this node.
</summary>
        </member>
        <member name="P:NMotive.Node.Visible">
            <summary>
Gets and sets this nodes visible state.
</summary>
        </member>
        <member name="P:NMotive.Node.Active">
            <summary>
Gets and sets this nodes active state.
</summary>
        </member>
        <member name="T:NMotive.Node">
            <summary>
Base class for all objects in a take scene.
</summary>
        </member>
        <member name="M:NMotive.SimpleTransformf.ToString">
            <summary>
Creates a string representation of self.
</summary>
            <returns>A string representation of self.</returns>
        </member>
        <member name="M:NMotive.SimpleTransformf.Equals(NMotive.SimpleTransformf,System.Single)">
            <summary>
Does a comparison with another transform. This is an approximate comparison.
</summary>
            <param name="other">Transform to compare self to.</param>
            <param name="tolerance">Tolerance to be used for the comparison.</param>
            <returns>
                <c>true</c> if transforms are equal within tolerance.</returns>
        </member>
        <member name="M:NMotive.SimpleTransformf.IsIdentity">
            <summary>
Check if the transform is the identity (i.e. no transform).
</summary>
            <returns>
                <c>true</c> if this transform is the identity transformation.</returns>
        </member>
        <member name="M:NMotive.SimpleTransformf.InverseTransform(NMotive.Vector3f)">
            <summary>
Transform the given point through the inverse of this transform. 
Transform order is Rotate-Translate by convention.
</summary>
            <param name="point">Point to transform.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:NMotive.SimpleTransformf.Transform(NMotive.Vector3f)">
            <summary>
Transform the given point through this transform. Transform order is Rotate-Translate by convention.
</summary>
            <param name="point">Point to transform.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:NMotive.SimpleTransformf.Transform(NMotive.SimpleTransformf)">
            <summary>
Transforms our coordinate system by the given transform.
</summary>
            <param name="transform">A simple transformation.</param>
        </member>
        <member name="M:NMotive.SimpleTransformf.Invert">
            <summary>
Invert this transform in place.
</summary>
        </member>
        <member name="M:NMotive.SimpleTransformf.Translate(NMotive.Vector3f)">
            <summary>
Accumulates the given translation into the transform. Given translation is understood to
to be in the local coordinate system.
</summary>
            <param name="translation">Translation to be added.</param>
        </member>
        <member name="M:NMotive.SimpleTransformf.Rotate(NMotive.Quaternion)">
            <summary>Accumulates the given rotation into the transform.</summary>
            <param name="rotation">Rotation to be added.</param>
        </member>
        <member name="P:NMotive.SimpleTransformf.Rotation">
            <summary>
Gets and sets the rotation quaternion for this transformation.
</summary>
        </member>
        <member name="P:NMotive.SimpleTransformf.Translation">
            <summary>
Gets and sets the translation vector for this transformation.
</summary>
        </member>
        <member name="M:NMotive.SimpleTransformf.#ctor(NMotive.Vector3f,NMotive.Quaternion)">
            <summary>
Constructs a simple transform object with the given translation
and rotation.
</summary>
            <param name="translation">The translation vector.</param>
            <param name="rotation">The rotation expressed as a unit quaternion.</param>
        </member>
        <member name="M:NMotive.SimpleTransformf.#ctor">
            <summary>
Parameterless constructor. Constructs the identity transformation.
</summary>
        </member>
        <member name="T:NMotive.SimpleTransformf">
            <summary>
Class representing a "simple" transform, i.e. a rotation plus translation. Scale
is presumed to be one.
</summary>
        </member>
        <member name="M:NMotive.Quaternion.ToString">
            <summary>
A string representation of self.
</summary>
            <returns>A string representation of self.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Equals(NMotive.Quaternion,System.Single)">
            <summary>
Compares this quaternion to another for equality with a specified
tolerance..
</summary>
            <param name="other">Quaternion to compare self to.</param>
            <param name="tolerance">A tolerance to use for comparison.</param>
            <returns>
                <c>true</c> if all components are equal withing the
specified tolerance - the absolute value of the difference of
each component must be less than the tolerance.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Equals(NMotive.Quaternion)">
            <summary>
Compares this quaternion to another for equality.
</summary>
            <param name="other">Quaternion to compare self to.</param>
            <returns>
                <c>true</c> if all components are exactly equal.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Rotate(NMotive.Vector3f)">
            <summary>Rotate the given vector through the rotation of this quaternion.</summary>
            <param name="vec">Vector to rotate.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Invert">
            <summary>
Invert this quaternion.
</summary>
            <returns>This object inverted.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Conjugate">
            <summary>
Conjugates this quaternion.
</summary>
            <returns>This object conjucated.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Normalize">
            <exclude />
        </member>
        <member name="M:NMotive.Quaternion.Norm">
            <exclude />
        </member>
        <member name="M:NMotive.Quaternion.NormSquared">
            <exclude />
        </member>
        <member name="M:NMotive.Quaternion.AxisAngle">
            <summary>Get Axis Angle. Angle is encoded in vector's length</summary>
            <returns>A vector representation of the axis angle.</returns>
        </member>
        <member name="M:NMotive.Quaternion.SetAxisAngle(NMotive.Vector3f)">
            <summary>Set Axis Angle. Angle is encoded in vector's length</summary>
            <param name="axisAngleVector">The angle encoded as a vector.</param>
        </member>
        <member name="M:NMotive.Quaternion.SetRealPart(NMotive.Vector3f)">
            <summary>Set the real part (i.e. XYZ components) of the quaternion.</summary>
            <param name="vals">Vector of value. 
vals[0] = x-value.
vals[1] = y-value.
vals[2] = z-value.</param>
        </member>
        <member name="M:NMotive.Quaternion.SetValues(System.Single[])">
            <summary>
Sets the values for this quaternion.
</summary>
            <param name="vals">Vector of value. 
vals[0] = x-value.
vals[1] = y-value.
vals[2] = z-value.
vals[3] = w-value.</param>
        </member>
        <member name="M:NMotive.Quaternion.SetValues(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Sets the values for this quaternion.
</summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
            <param name="w">W value.</param>
        </member>
        <member name="M:NMotive.Quaternion.FromOrthogonalVectors(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>Create unit quaternion from 2 orthogonal vectors</summary>
            <param name="vec1">A vector.</param>
            <param name="vec2">A vector.</param>
            <returns>Unit quaternion from 2 orthogonal vectors.</returns>
        </member>
        <member name="M:NMotive.Quaternion.FromVectors(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>Create a unit quaternion from 2 vectors.</summary>
            <param name="vec1">A vector.</param>
            <param name="vec2">A vector.</param>
            <returns>Unit quaternion from 2 vectors.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Slerp(NMotive.Quaternion,NMotive.Quaternion,System.Single)">
            <summary>
Returns a spherical linear interpolated quaternion some percentage 't' between two quaternions.
The parameter t is usually in the range [0,1], but this method can also be used to extrapolate
rotations beyond that range.
</summary>
            <param name="q1">A quaternion.</param>
            <param name="q2">A quaternion.</param>
            <param name="t">Percentage expressed as fraction between 0 and 1.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Lerp(NMotive.Quaternion,NMotive.Quaternion,System.Single)">
            <summary>
Returns a linear interpolated quaternion some percentage 't' between two quaternions.
The parameter t is usually in the range [0,1], but this method can also be used to extrapolate
rotations beyond that range.
</summary>
            <param name="q1">A quaternion.</param>
            <param name="q2">A quaternion.</param>
            <param name="t">Percentage expressed as fraction between 0 and 1.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Inverse(NMotive.Quaternion)">
            <summary>
Computes the inverse of a quaternion.
</summary>
            <param name="q">A quaternion.</param>
            <returns>The inverse of <c>q</c>.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Conjugate(NMotive.Quaternion)">
            <summary>
Forms the conjugate of a quaternion.
</summary>
            <param name="q">A quaternion.</param>
            <returns> The conjugate of <c>q</c>.</returns>
        </member>
        <member name="M:NMotive.Quaternion.Dot(NMotive.Quaternion,NMotive.Quaternion)">
            <summary>
Dot product.
</summary>
            <param name="p">A quaternion.</param>
            <param name="q">A quaternion.</param>
            <returns>The dot product of <c>p</c> and <c>q</c>.</returns>
        </member>
        <member name="M:NMotive.Quaternion.op_Inequality(NMotive.Quaternion,NMotive.Quaternion)">
            <summary>
Inequality operator for quaternions.
</summary>
            <param name="p">A quaternion.</param>
            <param name="q">A quaternion.</param>
            <returns>
                <c>true</c> if the two quaternions differ in at
least one component.</returns>
        </member>
        <member name="M:NMotive.Quaternion.op_Equality(NMotive.Quaternion,NMotive.Quaternion)">
            <summary>
Equality operator for quaternions.
</summary>
            <param name="p">A quaternion.</param>
            <param name="q">A quaternion.</param>
            <returns>
                <c>true</c> if the two quaternions are exactly equal,
component-wise.</returns>
        </member>
        <member name="M:NMotive.Quaternion.op_Multiply(NMotive.Quaternion,NMotive.Quaternion)">
            <summary>
Multiplies two quaternions.
</summary>
            <param name="p">A quaternion.</param>
            <param name="q">A quaternion.</param>
            <returns> Product as a unit quaternion.</returns>
        </member>
        <member name="P:NMotive.Quaternion.Item(System.Int32)">
            <summary>
Index operator
</summary>
        </member>
        <member name="P:NMotive.Quaternion.RealPart">
            <summary>
Gets and sets the real part of the quaternion.
</summary>
        </member>
        <member name="P:NMotive.Quaternion.W">
            <summary>
Gets and sets the w or scalar component.
</summary>
        </member>
        <member name="P:NMotive.Quaternion.Z">
            <summary>
Gets and sets the z or k component.
</summary>
        </member>
        <member name="P:NMotive.Quaternion.Y">
            <summary>
Gets and sets the y or j component.
</summary>
        </member>
        <member name="P:NMotive.Quaternion.X">
            <summary>
Gets and sets the x or i component.
</summary>
        </member>
        <member name="M:NMotive.Quaternion.#ctor(System.Single[])">
            <summary>
Constructs a unit <c>Quaternion</c> object from the given array of components.
</summary>
            <param name="vals">
                <c>vals[0]</c> = i component,
<c>vals[1]</c> = j component,
<c>vals[2]</c> = k component,
<c>vals[3]</c> = scalar component,
</param>
        </member>
        <member name="M:NMotive.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Constructs a unit <c>Quaternion</c> object from the given vector and scalar
parts.
</summary>
            <param name="x">i component.</param>
            <param name="y">j component.</param>
            <param name="z">k component.</param>
            <param name="w">Scalar component.</param>
        </member>
        <member name="T:NMotive.Quaternion">
            <summary>
Unit quaternion class.
</summary>
        </member>
        <member name="M:NMotive.Vector3f.NativeToManaged(Core.cVector3&lt;System.Single&gt;)">
            <summary>
Returns the managed version of a native vector.
</summary>
            <param name="nativeVector">A native vector.</param>
            <returns>A managed version of the native vector.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Distance(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Computes the Euclidean distance between two vectors.
</summary>
            <param name="v">A vector.</param>
            <param name="w">A vector.</param>
            <returns>The Euclidean distance between the two vectors.</returns>
        </member>
        <member name="M:NMotive.Vector3f.DistanceSquared(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Computes the Euclidean distance squared between two vectors.
</summary>
            <param name="v">A vector.</param>
            <param name="w">A vector.</param>
            <returns>The Euclidean distance squared between the two vectors.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Lerp(NMotive.Vector3f,NMotive.Vector3f,System.Single)">
            <summary>
Returns a linear interpolated vector some percentage 't' between two vectors.
The parameter t is usually in the range [0,1], but this method can also be used to extrapolate
vectors beyond that range.
</summary>
            <param name="v1">Vector one.</param>
            <param name="v2">Vector two.</param>
            <param name="t">Percentage as decimal between 0 and 1.</param>
            <returns>The interploted value.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Normalize(NMotive.Vector3f)">
            <summary>
Normalizes a vector to have length one.
</summary>
            <param name="x">A vector.</param>
            <returns>A normalized version of the input vector.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Angle(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Computes the angle (in radians) between two vectors.
</summary>
            <param name="v">A vector.</param>
            <param name="w">A vector.</param>
            <returns>The angle between the two vectors in radians.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Cross(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Computes the cross or vector product of two vectors.
</summary>
            <param name="v">A vector.</param>
            <param name="w">A vector.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Dot(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Computes the dot or scalar product of two vectors.
</summary>
            <param name="x">A vector.</param>
            <param name="y">A vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Normalize">
            <summary>
Normalizes this vector to have length one.
</summary>
        </member>
        <member name="M:NMotive.Vector3f.Norm">
            <summary>
Computes the Euclidean norm.
</summary>
            <returns>The Euclidean norm.</returns>
        </member>
        <member name="M:NMotive.Vector3f.NormSquared">
            <summary>
Computes the Euclidean norm squared.
</summary>
            <returns>The Euclidean norm squared.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Decrement(NMotive.Vector3f)">
            <summary>
Decrements the components of self by the values of the corresponding
components of the given vector. Note that this is just subtracting
the give vector from this vector.
</summary>
            <param name="v">A vector to subtract from self.</param>
        </member>
        <member name="M:NMotive.Vector3f.Decrement(System.Single,System.Single,System.Single)">
            <summary>
Decrements the components of self by the given
amounts.
</summary>
            <param name="dx">Amount to Decrement the X component by.</param>
            <param name="dy">Amount to Decrement the Y component by.</param>
            <param name="dz">Amount to Decrement the Z component by.</param>
        </member>
        <member name="M:NMotive.Vector3f.Decrement">
            <summary>
Decrements the value of each component of self by one.
</summary>
        </member>
        <member name="M:NMotive.Vector3f.Decrement(System.Single)">
            <summary>
Decrements each component of self by the given value.
</summary>
            <param name="a">Amount to decrement by.</param>
        </member>
        <member name="M:NMotive.Vector3f.Increment(NMotive.Vector3f)">
            <summary>
Increments each component of this vector by the corresponding
component of the input vector.
</summary>
            <param name="v">Vector to increment this vector by.</param>
        </member>
        <member name="M:NMotive.Vector3f.Increment(System.Single,System.Single,System.Single)">
            <summary>
Increments the components of self by the given
amounts.
</summary>
            <param name="dx">Amount to increment the X component by.</param>
            <param name="dy">Amount to increment the Y component by.</param>
            <param name="dz">Amount to increment the Z component by.</param>
        </member>
        <member name="M:NMotive.Vector3f.Increment(System.Single)">
            <summary>
Increments each component of self by the given value.
</summary>
            <param name="a">Increment amount.</param>
        </member>
        <member name="M:NMotive.Vector3f.Increment">
            <summary>
Increments each component of self by one.
</summary>
        </member>
        <member name="M:NMotive.Vector3f.Scale(System.Single)">
            <summary>
Multiplies each component of self by the given scalar.
</summary>
            <param name="s">The scalar.</param>
        </member>
        <member name="M:NMotive.Vector3f.SetValues(System.Single,System.Single,System.Single)">
            <summary>
Sets the components of self to the given values.
</summary>
            <param name="x">Value to set the X or first component to.</param>
            <param name="y">Value to set the Y or second component to.</param>
            <param name="z">Value to set the Z or third component to.</param>
        </member>
        <member name="M:NMotive.Vector3f.ToString">
            <summary>
Constructs a string representation of self.
</summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:NMotive.Vector3f.Equals(NMotive.Vector3f)">
            <summary>
Compares this vector to another for component-wise equality.
</summary>
            <param name="v">Vector to compare self to.</param>
            <returns>
                <c>true</c>if the componnents of self are equal
to the input vector.</returns>
            <remarks>This function will return <c>true</c> only if the vector
components are all equal in a bit-wise sense.</remarks>
        </member>
        <member name="M:NMotive.Vector3f.Equals(NMotive.Vector3f,System.Single)">
            <summary>
Compares this vector with another vector for equality using a 
tolerance. This function will return <c>true</c> if the 
absolute value of the difference of each component is less than
the specified tolerance.
</summary>
            <param name="v">Vector to compare self to.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>
                <c>true</c> if the vectors are equal within the 
specified tolerance. </returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Inequality(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Compares two vectors for component-wise non-equality.
</summary>
            <param name="v">A vector.</param>
            <param name="w">A vector.</param>
            <returns>
                <c>true</c>if the componnents of the two vectors are not equal.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Equality(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Compares two vectors for component-wise equality.
</summary>
            <param name="v">A vector.</param>
            <param name="w">A vector.</param>
            <returns>
                <c>true</c>if the componnents of the two vectors are equal.</returns>
            <remarks>This function will return <c>true</c> only if the vectors
components are all equal in a bit-wise sense.</remarks>
        </member>
        <member name="M:NMotive.Vector3f.op_Multiply(System.Single,NMotive.Vector3f)">
            <summary>
Computes a vector whose components are equal to the components of
the input vector multiplied by a give scalar value.
</summary>
            <param name="s">A scaler to scale by.</param>
            <param name="x">A vector to scale.</param>
            <returns>Scaled vector.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Multiply(NMotive.Vector3f,System.Single)">
            <summary>
Computes a vector whose components are equal to the components of
the input vector multiplied by a give scalar value.
</summary>
            <param name="x">A vector to scale.</param>
            <param name="s">A scaler to scale by.</param>
            <returns>Scaled vector.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Subtraction(System.Single,NMotive.Vector3f)">
            <summary>
Subtract vector and scalar. Computes a vector whose ith component value
is the scalar minus the ith component value.
</summary>
            <param name="s">A scalar.</param>
            <param name="x">A vector.</param>
            <returns>a vector whose ith component value
is the scalar minus the ith component value.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Subtraction(NMotive.Vector3f,System.Single)">
            <summary>
Subtract a scalar from a vector. Decrements each component of the vector by
</summary>
            <param name="x">A vector.</param>
            <param name="s">A scalar.</param>
            <returns>A vector whose component values are equal to the input vectors
incremented by the scalar value.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Addition(System.Single,NMotive.Vector3f)">
            <summary>
Add a vector and a scalar. Increments each component of the vector by
</summary>
            <param name="s">A scalar.</param>
            <param name="x">A vector.</param>
            <returns>A vector whose component values are equal to the input vectors
incremented by the scalar value.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Addition(NMotive.Vector3f,System.Single)">
            <summary>
Add a vector and a scalar. Increments each component of the vector by
</summary>
            <param name="x">A vector.</param>
            <param name="s">A scalar.</param>
            <returns>A vector whose component values are equal to the input vectors
incremented by the scalar value.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Subtraction(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Vector subtraction operator. Returns the component-wise difference
of two vectors.
</summary>
            <param name="x">A vector.</param>
            <param name="y">A vector</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_Addition(NMotive.Vector3f,NMotive.Vector3f)">
            <summary>
Vector addition operator. Returns the component-wise sum of two vectors.
</summary>
            <param name="x">A vector.</param>
            <param name="y">A vector</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NMotive.Vector3f.op_UnaryNegation(NMotive.Vector3f)">
            <summary>
Vector negation. returns a new vector object with component values
equal to equal to the negated input vector component values.
</summary>
            <param name="x">A vector to negate.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="P:NMotive.Vector3f.Item(System.Int32)">
            <summary>
Index operator. Return the vector component at the specified
zero based index. X = [0], Y = [1], Z = [2].
Any index value other than 0, 1, or 2 will raise an exception.
</summary>
            <returns>The component at the give index.</returns>
        </member>
        <member name="P:NMotive.Vector3f.Z">
            <summary>
Gets and sets the Z component value.
</summary>
        </member>
        <member name="P:NMotive.Vector3f.Y">
            <summary>
Gets and sets the Y component value.
</summary>
        </member>
        <member name="P:NMotive.Vector3f.X">
            <summary>
Gets and sets the X component value.
</summary>
        </member>
        <member name="M:NMotive.Vector3f.#ctor(System.Single[])">
            <summary>
Constructs a <c>Vector3f</c> object with the given component
values.
</summary>
            <param name="values"> values[0] is the X component value,
values[1] is the Y component value, values[2] is the Z 
component value.</param>
        </member>
        <member name="M:NMotive.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
Constructs a <c>Vector3f</c> object with the given component
values.
</summary>
            <param name="x"> X component value.</param>
            <param name="y"> Y component value.</param>
            <param name="z"> Z component value.</param>
        </member>
        <member name="T:NMotive.Vector3f">
            <summary>
A three dimensional vector.
</summary>
        </member>
        <member name="T:MoCapCore.cNode">
            <summary>Concrete implementation of the Node base class.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.KeyFrameRange">
            <summary>Returns the frame range extents of all keys.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.IsKeyed(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if a transform key exists in the given range.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.IsKeyed">
            <summary>Returns true if a transform key exists.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.ChannelByIndex(System.Int32)">
            <summary>Returns the channel at the requested index, or NULL if out of range</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.ChannelCount">
            <summary>Returns the number of channels available.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.HasChannel(MoCapCore.cIChannel.eChannelType)">
            <summary>Returns true if a channel of the given type exists on this node.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Rotation(Core.cTime)">
            <summary>Get the local position at the given time.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Translation(Core.cTime)">
            <summary>Get the local position at the given time.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.WorldTransform(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Returns the world-space transform at the given frame.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Transform(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Get the full transform at the given time.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Rotation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Get the local position at the given time.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Translation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Get the local position at the given time.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.RotationChannel">
            <summary>Get the current local-space rotation channel, if any.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.TranslationChannel">
            <summary>Get the current local-space translation channel, if any.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.SetRotation(System.Int32!System.Runtime.CompilerServices.IsLong,Core.cQuaternion&lt;System.Single,true&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>A convenience method for setting local rotation. The default rotation will be set if no animation
channel exists.</summary>
            <returns>True if the key was set. False if a key was not set, but the default value was.</returns>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.SetTranslation(System.Int32!System.Runtime.CompilerServices.IsLong,Core.cVector3&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>A convenience method for setting local translation. The default translation value will be set if no
animation channel exists.</summary>
            <returns>True if the key was set. False if a key was not set, but the default value was.</returns>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.SetChannel(MoCapCore.cIChannel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set one of the animation channels. Which channel gets set is governed by the Type()
of the given channel.</summary>
            <returns>True if the given channel was a match for this node and was set as the translation channel.</returns>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Clear(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Clear all animation data over the given range if selectedKeysOnly is false. Otherwise, only clears
selected keys within the given range.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.FindByName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Attempts to find a node with the given name in the hierarchy of this node, including
this node.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.PreviousSibling">
            <summary>Get the previous sibling to this node, if any.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.NextSibling">
            <summary>Get the next sibling to this node, if any.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Parent">
            <summary>Get the current parent of this node.</summary>
            <returns>Pointer to current parent, or NULL if none.</returns>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.ChildIndex(MoCapCore.cIAnimatedNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the index of the given node in this node's child list, if it is a child. Returns -1
if the given node is not a child of this one.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Child(System.Int32)">
            <summary>Retrieve the child at the given index.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.ChildCount">
            <summary>Counts and returns our number of children.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.HasChildren">
            <summary>Returns true if this node has children.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.IsChild(MoCapCore.cIAnimatedNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given node is a child of this one.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.RemoveChild(MoCapCore.cIAnimatedNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes the given child from the child list for this node.</summary>
            <returns>True if the child was removed. False if the child cannot be removed, or is not a child.</returns>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.AddChild(MoCapCore.cIAnimatedNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Add the given node as a child to this one. The given node will be removed from
any node hierarchy that it is presently part of. Certain node types may only be
added as descendants or children of certain other node types.</summary>
            <returns>True if the child was added. False if the child was previously added or cannot be.</returns>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.Destroy(System.Boolean)">
            <summary>Deletes this node, and optionally deletes all nodes attached to this one, including
all descendants.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.FinishEdit">
            <summary>Finish a started undo-able edit operation.</summary>
        </member>
        <member name="M:MoCapCore.cIAnimatedNode.StartEdit">
            <summary>Start an undo-able edit operation.</summary>
        </member>
        <member name="T:MoCapCore.cIAnimatedNode">
            <summary>Abstract base class for animated nodes in a scene. Nodes are gathered into a hierarchy in the scene
where they are either a child of the root scene node (see <see cref="!:MoCapCore::cNodeWarehouse">cNodeWarehouse</see>)
or a child of another existing node in the scene.
Traversal of the node hierarchy can proceed either breadth first or depth first, and each node knows who
its parent is.
Each node also has a transform that accumulates with its parent transform such that a full transform
hierarchy is formed by traversing the node hierarchy.</summary>
        </member>
        <member name="M:NMotive.Channel.CompareTo(NMotive.Channel)">
            <summary>
Comparison operator, used for instance sorting
</summary>
            <param name="other">A channel to compare self to.</param>
            <returns>
Less than zero if this ID is less than other,
zero if this ID is equal to other,
greater than zero if this ID is greater than other.
</returns>
        </member>
        <member name="M:NMotive.Channel.KeyIndexRange(NMotive.FrameRange,System.Tuple`2{System.UInt32,System.UInt32}@)">
            <summary>
Get the key index range that falls within or on the edges of the given frame range.
</summary>
            <param name="range">The frame range to search across.</param>
            <param name="indexRange">The start and end indices of the keys that fall within or on the
frame range boundaries. Only valid if <c>true</c> is returned from the method.</param>
            <returns>
                <c>true</c> if a valid key index range was found.</returns>
        </member>
        <member name="M:NMotive.Channel.FindKeyIndex(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary>
Finds the key index for the requested frame, searching forward or back to find it if the requested frame
does not lie at a key. 
</summary>
            <param name="frame">The requested frame.</param>
            <param name="searchForward">A value of <c>true</c> means to search forward.
A value of <c>false</c> means to search backward.</param>
            <returns>The key index or value less than zero if there are no keys or no keys exist at the requested time
or beyond when traveling in the search direction.</returns>
        </member>
        <member name="M:NMotive.Channel.KeyIndex(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Returns the key index at the given frame.
</summary>
            <param name="frame">A frame.</param>
            <returns>The key index at the given frame if it corresponds to a key. Frames that do not
correspond to a key will return a negative value. That value is the number of frames since the last
key, or <c>FrameConstants.NegativeInfinity</c> if there are no keys or the requested frame is before any keys.
For example, if the value returned for a given requested frame is -8, then the previous valid key in time
occurred 8 frames ago in time.</returns>
        </member>
        <member name="M:NMotive.Channel.KeyFrameDistance(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Calculate the distance, in frames, from the given frame index to the nearest key in the key array. Distance
will always be non-negative.
</summary>
            <param name="frame">A key frame.</param>
            <returns>The distance, in frames, from the given frame index to the nearest key in the key array.</returns>
        </member>
        <member name="M:NMotive.Channel.KeyFrame(System.Int32)">
            <summary>
Get the frame index for the key at the given index.
</summary>
            <param name="index">Key frame index.</param>
            <returns>Frame index for the given key frame index.</returns>
        </member>
        <member name="M:NMotive.Channel.IsKey(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Determine if a key is set at the given frame index
</summary>
            <param name="index">Frame index at which to search</param>
            <returns>True if key exists at the give frame index, false otherwise</returns>
        </member>
        <member name="M:NMotive.Channel.ApplyFilter(NMotive.KeyframeDataFilter,NMotive.FrameRangeSet)">
            <summary>
Apply the given filter to keys that exist in the requested frame range set.
</summary>
            <param name="filter">The filter to apply.</param>
            <param name="ranges">Set of frame ranges over which to apply the filter.</param>
        </member>
        <member name="M:NMotive.Channel.FindNextGap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary>
Attempts to find the next gap, searching either forward or backward from the given frame.
</summary>
            <param name="startFrame">Starting frame for the search.</param>
            <param name="searchForward">A value of <c>true</c> means to search forward.
A value of <c>false</c> means to search backward.</param>
            <returns>The next gap is always returned, even if the given frame is already within a gap. An empty
range will be returned if the requested frame lies outside the key range. If there
are no keys, an infinite range will be returned.</returns>
        </member>
        <member name="M:NMotive.Channel.GapRange(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Returns the full gap range of the gap that the requested frame lies within, or an empty range if
the frame is not in a gap.
</summary>
            <param name="frame">A frame.</param>
            <returns>Full gap range of the gap in which the given frame lies, or an empty range if the
frame is not in a gap.</returns>
        </member>
        <member name="M:NMotive.Channel.FillGaps(NMotive.FrameRange,NMotive.InterpolationType,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Fills any gaps that exist within the given frame range whose length is less than or equal to 
the given max gap width. The frame range must completely contain the gap(s) to be filled, except
in the case of filling gaps before the first key or after the last key. In that case, the gap
will be filled to the extents of the requested range as long as the range includes a key.
</summary>
            <param name="range">A frame range.</param>
            <param name="interpType">The type of interpolation used.</param>
            <param name="maxGapWidth">Do not fill gaps with widths greater than this value.</param>
            <returns>The number of gaps filled.</returns>
        </member>
        <member name="M:NMotive.Channel.FindNextGap(System.Int32!System.Runtime.CompilerServices.IsLong,NMotive.FrameRange,System.Int32!System.Runtime.CompilerServices.IsLong@,System.Boolean)">
            <summary>
Attempts to find the next gap, searching either forward or backward from the given frame.
The next gap is always returned, even if the given frame is already within a gap. An empty
range will be returned if the requested frame lies outside the key range or there are no gaps
less than or equal to the requested max gap size that lie within the given full range.
</summary>
            <param name="frame">Beginning search frame.</param>
            <param name="fullRange">A frame range.</param>
            <param name="maxGap">Find gaps less than or equal to this number of frames.</param>
            <param name="searchForward">A value of <c>true</c> means to search forward.
A value of <c>false</c> means to search backward.</param>
            <returns>The next gap as a frame range, or an empty frame range if no gaps are found.</returns>
        </member>
        <member name="M:NMotive.Channel.Segments(NMotive.FrameRange)">
            <summary>
Retrieve a list of ranges that have continuous data (i.e. no gaps) for the given range.
</summary>
            <param name="range">A frame range.</param>
            <returns>The list of frame ranges with the given ranges with no gaps.</returns>
        </member>
        <member name="M:NMotive.Channel.Gaps(NMotive.FrameRange)">
            <summary>
Retrieve a list of gaps that lie within a given range. The output array is not cleared
during this call, so values are simply added to the passed array. Any gaps that lie on the boundary
of the requested range will be clipped to lie within the requested range.
</summary>
            <param name="range">A frame range.</param>
            <returns>The list of frame ranges with the given ranges with gaps.</returns>
        </member>
        <member name="M:NMotive.Channel.Gaps">
            <summary>
Retrieve a list of all gaps that currently exist.
</summary>
            <returns>The list of frame ranges with gaps.</returns>
        </member>
        <member name="M:NMotive.Channel.HasGaps(NMotive.FrameRange)">
            <summary>
Returns true if there are any frame gaps between the first key and the last. To test for gaps beyond
the first and last keys, you should pass in the full take frame range that you want to test against.
</summary>
            <param name="range">Check for gaps in this range.</param>
            <returns>
                <c>true</c>if there are gaps in the range. Returns <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NMotive.Channel.HasKeys(NMotive.FrameRange)">
            <summary>
Returns true if keys exist within the given the time range, including endpoints.
</summary>
            <param name="range">Check for keys in this range.</param>
            <returns>
                <c>true</c> if keys exist in the given range.</returns>
        </member>
        <member name="M:NMotive.Channel.HasKeys">
            <summary>
Returns true if keys exist.
</summary>
            <returns>
                <c>true</c> if keys exist.</returns>
        </member>
        <member name="M:NMotive.Channel.ScaleAndOffsetTime(System.Double,System.Double,System.Int32)">
            <summary>
Scale and offset the time component of all keys on the channels by the given amounts.
</summary>
            <param name="offset">Offset.</param>
            <param name="scale">Scale.</param>
            <param name="startFrame">Starting frame.</param>
        </member>
        <member name="P:NMotive.Channel.Owner">
            <summary>
Gets the node that owns this channel.
</summary>
        </member>
        <member name="P:NMotive.Channel.Type">
            <summary>
Gets the channel type that this channel applies to within a node.
</summary>
        </member>
        <member name="P:NMotive.Channel.OwnerID">
            <summary>
Gets the ID of the node owner.
</summary>
        </member>
        <member name="P:NMotive.Channel.KeyFrameRange">
            <summary>
Gets the frame range covered by all keys.
</summary>
        </member>
        <member name="P:NMotive.Channel.KeyCount">
            <summary>
Gets the number of keys present.
</summary>
        </member>
        <member name="M:NMotive.Channel.#ctor(MoCapCore.cIChannel*,System.Boolean)">
            <summary>
Constructs a channel object with the given native implementation.
Constructed object may optionally take ownership of the native
reference.
</summary>
            <param name="nativeImpl">A pointer to the native implementation.</param>
            <param name="takeOwnershipOfImpl">If true this object will own the 
native implementation and free it upon destruction. If this parameter
value is true it is assumed the native object pointed to is on the heap!</param>
            <exclude />
        </member>
        <member name="F:NMotive.Channel.mOwnImpl">
            <summary>
If <c>true</c> this object owns the native implementation and is
responsible for freeing it.
</summary>
        </member>
        <member name="F:NMotive.Channel.mNativeImpl">
            <exclude />
            <summary>
The native implementation.
</summary>
        </member>
        <member name="F:NMotive.Channel.ChannelType.SizeChannel">
            <exclude />
        </member>
        <member name="F:NMotive.Channel.ChannelType.ScaleChannel">
            <exclude />
        </member>
        <member name="F:NMotive.Channel.ChannelType.RotationChannel">
            <summary>
Rotation channel for nodes.
</summary>
        </member>
        <member name="F:NMotive.Channel.ChannelType.TranslationChannel">
            <summary>
Translation channel for nodes.
</summary>
        </member>
        <member name="F:NMotive.Channel.ChannelType.UnknownChannel">
            <summary>
Reserved for indeterminate types.
</summary>
        </member>
        <member name="T:NMotive.Channel.ChannelType">
            <summary>
Enum for the different channel types.
</summary>
        </member>
        <member name="T:NMotive.Channel">
            <summary>
Channels are owned by Takes and always have an associated NodeID and ChannelType.
</summary>
        </member>
        <member name="F:NMotive.FrameConstants.Invalid">
            <summary>
Use for testing for a valid frame index.
</summary>
        </member>
        <member name="F:NMotive.FrameConstants.NegativeInfinity">
            <summary>
Use for testing frame index equal to negative infinity.
</summary>
        </member>
        <member name="F:NMotive.FrameConstants.PositiveInfinity">
            <summary>
Use for testing frame index equal to positive infinity.
</summary>
        </member>
        <member name="T:NMotive.FrameConstants">
            <summary>
Constants for frames.
</summary>
        </member>
        <member name="P:NMotive.Keyframe`1.Frame">
            <summary>
Gets and sets the frame number.
</summary>
        </member>
        <member name="P:NMotive.Keyframe`1.Value">
            <summary>
Gets and sets the key frame value.
</summary>
        </member>
        <member name="M:NMotive.Keyframe`1.op_Inequality(NMotive.Keyframe`1{`0},NMotive.Keyframe`1{`0})">
            <summary>
Non-equality operator for key frames.
</summary>
            <param name="lhs">Left hand side key frame.</param>
            <param name="rhs">Right hand side key frame.</param>
            <returns>
                <c>true</c> if lhs is not equal to right hand side.</returns>
        </member>
        <member name="M:NMotive.Keyframe`1.op_Equality(NMotive.Keyframe`1{`0},NMotive.Keyframe`1{`0})">
            <summary>
Equality operator for key frames.
</summary>
            <param name="lhs">Left hand side key frame.</param>
            <param name="rhs">Right hand side key frame.</param>
            <returns>
                <c>true</c> if lhs is equal to right hand side.</returns>
        </member>
        <member name="M:NMotive.Keyframe`1.op_GreaterThanOrEqual(NMotive.Keyframe`1{`0},NMotive.Keyframe`1{`0})">
            <summary>
Greater than or equal operator for key frames.
</summary>
            <param name="lhs">Left hand side key frame.</param>
            <param name="rhs">Right hand side key frame.</param>
            <returns>
                <c>true</c> if lhs is greater than or equal right hand side.</returns>
        </member>
        <member name="M:NMotive.Keyframe`1.op_LessThanOrEqual(NMotive.Keyframe`1{`0},NMotive.Keyframe`1{`0})">
            <summary>
Less than or equal operator for key frames.
</summary>
            <param name="lhs">Left hand side key frame.</param>
            <param name="rhs">Right hand side key frame.</param>
            <returns>
                <c>true</c> if lhs is less than or equal right hand side.</returns>
        </member>
        <member name="M:NMotive.Keyframe`1.op_GreaterThan(NMotive.Keyframe`1{`0},NMotive.Keyframe`1{`0})">
            <summary>
Greater than operator for key frames.
</summary>
            <param name="lhs">Left hand side key frame.</param>
            <param name="rhs">Right hand side key frame.</param>
            <returns>
                <c>true</c> if lhs is greater than right hand side.</returns>
        </member>
        <member name="M:NMotive.Keyframe`1.op_LessThan(NMotive.Keyframe`1{`0},NMotive.Keyframe`1{`0})">
            <summary>
Less than operator for key frames.
</summary>
            <param name="lhs">Left hand side key frame.</param>
            <param name="rhs">Right hand side key frame.</param>
            <returns>
                <c>true</c> if lhs is less than right hand side.</returns>
        </member>
        <member name="M:NMotive.Keyframe`1.CompareTo(NMotive.Keyframe`1{`0})">
            <summary>
Compares this key frame to another.
Comparison is made using the frame numbers.
</summary>
            <param name="other">A key frame.</param>
            <returns>
Less than zero if this frame is less than other,
zero if this frame is equal to other,
greater than zero if this frame is greater than other.
</returns>
        </member>
        <member name="M:NMotive.Keyframe`1.Equals(NMotive.Keyframe`1{`0})">
            <summary>
Tests equality of this key frame to another.
Key frames are equal if the have the same number and value.
</summary>
            <param name="other">A key frame.</param>
            <returns>
                <c>true</c> if this key frame is equal to other.</returns>
        </member>
        <member name="M:NMotive.Keyframe`1.#ctor(`0,System.Int32)">
            <summary>
Constructs a key frame with the given value.
</summary>
            <param name="val">Value for this key frame.</param>
            <param name="frame">Frame number for this key frame.</param>
        </member>
        <member name="T:NMotive.Keyframe`1">
            <summary>
Generic representation for key frames.
</summary>
            <typeparam name="T">frame data type.</typeparam>
        </member>
        <member name="M:NMotive.FrameRange.Decrement">
            <summary>
Shift the range down by one frame.
</summary>
            <returns>This frame range decremented.</returns>
        </member>
        <member name="M:NMotive.FrameRange.Increment">
            <summary>
Shift the range up by one frame.
</summary>
            <returns>This frame range incremented.</returns>
        </member>
        <member name="M:NMotive.FrameRange.op_Decrement">
            <summary>
Shift the range down by one frame.
</summary>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:NMotive.FrameRange.op_Increment">
            <summary>
Shift the range up by one frame.
</summary>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:NMotive.FrameRange.op_GreaterThan(NMotive.FrameRange,System.Int32)">
            <summary>
Greater than comparison operator for a frame range and a frame index.
</summary>
            <param name="lhs">A frame range.</param>
            <param name="frameIndex">A frame index.</param>
            <returns>
                <c>true</c>if the start of the frame range is greater than the 
frame index.</returns>
        </member>
        <member name="M:NMotive.FrameRange.op_GreaterThan(NMotive.FrameRange,NMotive.FrameRange)">
            <summary>
Greater than comparison operator for frame ranges.
</summary>
            <param name="lhs">A frame range.</param>
            <param name="rhs">A frame range.</param>
            <returns>
                <c>true</c> if start of <c>lhs</c> is greater than end of <c>rhs</c> (no range overlap).</returns>
        </member>
        <member name="M:NMotive.FrameRange.op_LessThan(NMotive.FrameRange,System.Int32)">
            <summary>
Less than comparison operator for a frame range and a frame index.
</summary>
            <param name="lhs">A frame range.</param>
            <param name="frameIndex">A frame index.</param>
            <returns>
                <c>true</c>if the endpoint of the frame range is less than the 
frame index.</returns>
        </member>
        <member name="M:NMotive.FrameRange.op_LessThan(NMotive.FrameRange,NMotive.FrameRange)">
            <summary>
Less than comparison operator for frame ranges.
</summary>
            <param name="lhs">A frame range.</param>
            <param name="rhs">A frame range.</param>
            <returns>
                <c>true</c> if end of <c>lhs</c> is less than start time of <c>rhs</c> (no range overlap).</returns>
        </member>
        <member name="M:NMotive.FrameRange.op_Inequality(NMotive.FrameRange,NMotive.FrameRange)">
            <summary>
Non-equality operator for frame ranges.
</summary>
            <param name="lhs">A frame range.</param>
            <param name="rhs">A frame range.</param>
            <returns>Two frame ranges are equal if their endpoints coincide.</returns>
        </member>
        <member name="M:NMotive.FrameRange.op_Equality(NMotive.FrameRange,NMotive.FrameRange)">
            <summary>
Equality operator for frame ranges.
</summary>
            <param name="lhs">A frame range.</param>
            <param name="rhs">A frame range.</param>
            <returns>Two frame ranges are equal if their endpoints coincide.</returns>
        </member>
        <member name="M:NMotive.FrameRange.ToString">
            <summary>
Creates a string representation of the range.
</summary>
            <returns>A string representation of the range.</returns>
        </member>
        <member name="M:NMotive.FrameRange.GetHashCode">
            <summary>Hash code for frame range objects.</summary>
            <returns>A has code for this object.</returns>
        </member>
        <member name="M:NMotive.FrameRange.CompareTo(NMotive.FrameRange)">
            <summary>
Comparison method for ordering.
</summary>
            <param name="rhs">Object to compare self to.</param>
            <returns>
Less than zero if self is less than <c>rhs</c>,
Zero if self is equal to <c>rhs</c>,
Greater than zero if self is greater than <c>rhs</c></returns>
        </member>
        <member name="M:NMotive.FrameRange.Equals(NMotive.FrameRange)">
            <summary>
Checks equality of ranges. Ranges are equal if their endpoints
coincide.
</summary>
            <param name="rhs">The range to compare this range to.</param>
            <returns>
                <c>true</c> if the ranges are equal.</returns>
        </member>
        <member name="M:NMotive.FrameRange.Intersection(NMotive.FrameRange)">
            <summary>
Returns the intersection of this range with the one given.
</summary>
            <param name="range">Range to intersect with.</param>
            <returns>The intersection of the given range with this range.</returns>
        </member>
        <member name="M:NMotive.FrameRange.Intersects(NMotive.FrameRange)">
            <summary>
Returns true if the given range intersects this one. Intersection will be true even if only the
edges coincide.
</summary>
            <param name="range">Range to check for intersection.</param>
            <returns>
                <c>true</c> if the given range intersects this range.</returns>
        </member>
        <member name="M:NMotive.FrameRange.Contains(System.Int32)">
            <summary>
Checks if this range contains the given frame index.
</summary>
            <param name="frameIndex">Frame index to check.</param>
            <returns>
                <c>true</c> if this range contains the index.</returns>
        </member>
        <member name="M:NMotive.FrameRange.Contains(NMotive.FrameRange)">
            <summary>
Returns true if this range includes the given time.
</summary>
            <param name="range">Range to check.</param>
            <returns>
                <c>true</c> if this range contains the given range completely.</returns>
        </member>
        <member name="M:NMotive.FrameRange.Clear">
            <summary>
Clears the range to an empty range.
</summary>
        </member>
        <member name="M:NMotive.FrameRange.Offset(System.Int32)">
            <summary>
Offsets the range by the given amount, if the range is not empty.
</summary>
            <param name="amount">Number of frames to offset by.</param>
        </member>
        <member name="M:NMotive.FrameRange.Expand(System.Int32)">
            <summary>
Expand the range by the given number of frames at each end. Has no effect if the
range was empty to begin with, or if the given increment is negative.
</summary>
            <param name="increment">Number of frames to expand the range by.</param>
        </member>
        <member name="M:NMotive.FrameRange.Intersect(NMotive.FrameRange)">
            <summary>
Intersects self with another range.
<param name="range">Frame range to intersect.</param></summary>
        </member>
        <member name="M:NMotive.FrameRange.SetExtents(System.Int32,System.Int32)">
            <summary>
Sets both the starting and ending frame indices for the range.
</summary>
            <param name="startIndex">The starting index for the range.</param>
            <param name="endIndex">The ending index for the range.</param>
        </member>
        <member name="P:NMotive.FrameRange.Center">
            <summary>
Gets the center of the range.
</summary>
        </member>
        <member name="P:NMotive.FrameRange.IsEmpty">
            <summary>
returns <c>true</c> if the range is empty.
</summary>
        </member>
        <member name="P:NMotive.FrameRange.Length">
            <summary>
Gets the length of the range in frames.
</summary>
        </member>
        <member name="P:NMotive.FrameRange.End">
            <summary>
Gets and sets the end frame of the range. If the range was previously
 empty, both start and end frames will be set to the given frame.
</summary>
        </member>
        <member name="P:NMotive.FrameRange.Start">
            <summary>
Gets and set the start frame of the range. If the range was
previously empty, both start and end frames will be set to the given frame.
</summary>
        </member>
        <member name="M:NMotive.FrameRange.#ctor(Core.cFrameRange*)">
            <exclude />
        </member>
        <member name="M:NMotive.FrameRange.#ctor(System.Int32,System.Int32)">
            <summary>
Constructs a <c>FrameRange</c> instance with the given
start and end indices.
</summary>
            <param name="startIndex"> The ranges starting index.</param>
            <param name="endIndex">The ranges ending index.</param>
        </member>
        <member name="M:NMotive.FrameRange.#ctor">
            <summary>
Default constructor. Behavior is undefined.
</summary>
        </member>
        <member name="F:NMotive.FrameRange.Forever">
            <summary>
Constant range object representing an infinitely long range.
</summary>
        </member>
        <member name="F:NMotive.FrameRange.Empty">
            <summary>
Constant range object representing an empty range.
</summary>
        </member>
        <member name="T:NMotive.FrameRange">
            <summary>
Class representing a range of contiguous frames.
</summary>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.Delete(System.String)">
            <summary>
Deletes the named entry. If it is a directory, entries are recursively
deleted from the given
path down.
</summary>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.Exists(System.String)">
            <summary>Check if the given path exists as a stream or directory.</summary>
            <returns>
                <c>true</c> if the given path is a stream or directory.</returns>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.IsDirectory(System.String)">
            <summary>Returns true if the given path in the storage is a directory.</summary>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.Entries(System.String)">
            <summary>Retrieve a list of all streams/directories at the given 
path in the storage.</summary>
            <param name="path">Storage path.</param>
            <returns>List of streams/directories at the given path in the storage.</returns>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.CloseStream(NMotive.DataStream)">
            <summary>Close a repository data stream.</summary>
            <returns>
                <c>true</c> if the stream was successfully closed.</returns>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.OpenStream(System.String,NMotive.DataStream.StreamOpenMode,System.Boolean)">
            <summary>
Open a stream in the storage repository. 
</summary>
            <param name="filename">The given filename is understood to be relative to the root
of the repository if preceded by a '/'. Otherwise, the path is understood to be relative to the
current working directory within the repository.</param>
            <param name="openMode">Stream open mode</param>
            <param name="binary">If binary is true, the stream is opened in binary mode. Otherwise, 
 it is opened in text mode.</param>
            <returns>null if the requested path is invalid, if the stream is already open, or if the stream
could not be opened with the requested mode.</returns>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.SetWorkingDirectory(System.String,System.Boolean)">
            <summary>
Sets the current working directory. The given path can be either absolute (e.g. "/fred/george")
or relative to the previous current working directory (e.g. "fred/george" or "../fred"). Unix-style
directory navigation is supported (i.e. use of ".." and "." in paths).
Returns false if the requested path does not exist.
</summary>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.Close">
            <summary>Close the warehouse. Open must be called again before 
using any other methods.</summary>
        </member>
        <member name="M:NMotive.DataStreamWarehouse.Open(System.String,System.Boolean)">
            <summary>Open the warehouse for use. This must be called before using 
any other methods.</summary>
            <param name="path">Path to the warehouse file.</param>
            <param name="makeWriteable">If <c>true</c> makes the resulting data 
stream writeable.</param>
        </member>
        <member name="P:NMotive.DataStreamWarehouse.IsWritable">
            <summary>Returns true if the storage is writable.</summary>
        </member>
        <member name="P:NMotive.DataStreamWarehouse.HasOpenStreams">
            <summary>Returns true if there are open file handles in this 
repository.</summary>
        </member>
        <member name="P:NMotive.DataStreamWarehouse.WorkingDirectory">
            <summary>Retrieves the current working directory.</summary>
        </member>
        <member name="P:NMotive.DataStreamWarehouse.RootPath">
            <summary>Returns the file path/name where the warehouse 
resides.</summary>
        </member>
        <member name="P:NMotive.DataStreamWarehouse.IsOpen">
            <summary>Returns true if the warehouse is currently open.</summary>
        </member>
        <member name="T:NMotive.DataStreamWarehouse">
            <summary />
            <exclude />
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.Delete(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Deletes the named entry. If it is a directory, entries are recursively deleted from the given
path down.
</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.Exists(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given path exists as a stream or directory.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.IsDirectory(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given path in the storage is a directory.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.Entries(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Retrieve a list of all streams/directories at the given path in the storage.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.CopyStream(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIDataStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Copies the given stream into this warehouse at the requested file location.
Any stream of the same filename in the warehouse will be overwritten.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.CloseStream(MoCapCore.cIDataStream*)">
            <summary>Close a repository data stream.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.FindOpenStream(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>This method can be used to search for a stream that may already be open.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.OpenStream(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIDataStream.eStreamOpenMode,System.Boolean)">
            <summary>
Open a stream in the storage repository. The given filename is understood to be relative to the root
of the repository if preceded by a '/'. Otherwise, the path is understood to be relative to the
current working directory within the repository.
If binary is true, the stream is opened in binary mode. Otherwise, it is opened in text mode.
Returns NULL if the requested path is invalid, if the stream is already open, or if the stream
could not be opened with the requested mode.
</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.IsWritable">
            <summary>Returns true if the storage is writable.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.HasOpenStreams">
            <summary>Returns true if there are open file handles in this repository.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.WorkingDirectory">
            <summary>Retrieves the current working directory.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.SetWorkingDirectory(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the current working directory. The given path can be either absolute (e.g. "/fred/george")
or relative to the previous current working directory (e.g. "fred/george" or "../fred"). Unix-style
directory navigation is supported (i.e. use of ".." and "." in paths).
Returns false if the requested path does not exist.
</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.RootPath">
            <summary>Returns the file path/name where the warehouse resides.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.IsOpen">
            <summary>Returns true if the warehouse is currently open.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.Close">
            <summary>Close the warehouse. Open must be called again before using any other methods.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStreamWarehouse.Open(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Open the warehouse for use. This must be called before using any other methods.</summary>
        </member>
        <member name="T:MoCapCore.cIDataStreamWarehouse">
            <summary>
A structured storage class that manages streams (usually files) within a repository. A repository can be
either a physical directory on the file system, or it can be a structured storage file that may contain
other files, or it can be something more abstract like a network connection to a remote asset stream.

All paths for this class should be given using the Unix-style path separator '/'.
</summary>
        </member>
        <member name="T:NMotive.DataStream">
            <exclude />
            <summary>
class for data streams, which can usually be thought of as files. Streams may exist
as files on disk, or as files within a file archive, or as resources accessible over a network
connection, or some other representation that is suitable for this interface. Data streams are
created and destroyed by cIDataStreamWarehouse implementations.
</summary>
        </member>
        <member name="T:NMotive.NMotiveUtils">
            <exclude />
        </member>
        <member name="T:NMotive.NMotiveRunMode">
            <exclude />
        </member>
        <member name="T:NMotive.Axis">
            <summary>
Enumeration of Motive axis value options.
</summary>
        </member>
        <member name="F:NMotive.Axis.Axis_NegativeZ">
            <summary>The negative z-axis.</summary>
        </member>
        <member name="F:NMotive.Axis.Axis_PositiveZ">
            <summary>The positive z-axis.</summary>
        </member>
        <member name="F:NMotive.Axis.Axis_NegativeY">
            <summary>The negative y-axis.</summary>
        </member>
        <member name="F:NMotive.Axis.Axis_PositiveY">
            <summary>The positive y-axis.</summary>
        </member>
        <member name="F:NMotive.Axis.Axis_NegativeX">
            <summary>The negative x-axis.</summary>
        </member>
        <member name="F:NMotive.Axis.Axis_PositiveX">
            <summary>The positive x-axis.</summary>
        </member>
        <member name="T:NMotive.LengthUnits">
            <summary>
Enumeration of units of length.
</summary>
        </member>
        <member name="F:NMotive.LengthUnits.Units_Millimeters">
            <summary>Millimeters.</summary>
        </member>
        <member name="F:NMotive.LengthUnits.Units_Centimeters">
            <summary>Centimeters.</summary>
        </member>
        <member name="F:NMotive.LengthUnits.Units_Meters">
            <summary>Meters.</summary>
        </member>
        <member name="M:NMotive.UID.Generate">
            <summary>
Generates a new ID value.
</summary>
            <returns>A new ID.</returns>
        </member>
        <member name="M:NMotive.UID.GetHashCode">
            <summary>
Hash code for this ID.
</summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:NMotive.UID.ToString">
            <summary>
String representation.
</summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:NMotive.UID.CompareTo(NMotive.UID)">
            <summary>
Compare to function for ID's.
</summary>
            <param name="rhs">ID to compare to.</param>
            <returns>0 if the ID's are equal, -1 if self is less than the given
ID, and 1 otherwise.</returns>
        </member>
        <member name="M:NMotive.UID.Equals(NMotive.UID)">
            <summary>
Tests for equality of this UID to another.
</summary>
            <param name="rhs">UID to compare self to.</param>
            <returns>true if the given UID is the same as this.</returns>
        </member>
        <member name="M:NMotive.UID.SetValue(System.Int64,System.Int64)">
            <summary>
Set the value for the high and low bits.
</summary>
            <param name="highBits">High bits value.</param>
            <param name="lowBits">Low bits value.</param>
        </member>
        <member name="M:NMotive.UID.op_GreaterThanOrEqual(NMotive.UID,NMotive.UID)">
            <summary>
Greater than or equal comparison operator for ID's.
</summary>
            <param name="lhs">An ID.</param>
            <param name="rhs">An ID.</param>
            <returns>
                <c>true</c> if <c>lhs</c> is greater than or equal to <c>rhs</c></returns>
        </member>
        <member name="M:NMotive.UID.op_GreaterThan(NMotive.UID,NMotive.UID)">
            <summary>
Greater than comparison operator for ID's.
</summary>
            <param name="lhs">An ID.</param>
            <param name="rhs">An ID.</param>
            <returns>
                <c>true</c> if <c>lhs</c> is greater than <c>rhs</c></returns>
        </member>
        <member name="M:NMotive.UID.op_LessThanOrEqual(NMotive.UID,NMotive.UID)">
            <summary>
Less than or equal comparison operator for ID's.
</summary>
            <param name="lhs">An ID.</param>
            <param name="rhs">An ID.</param>
            <returns>
                <c>true</c> if <c>lhs</c> is less than or equal to <c>rhs</c></returns>
        </member>
        <member name="M:NMotive.UID.op_LessThan(NMotive.UID,NMotive.UID)">
            <summary>
Less than comparison operator for ID's.
</summary>
            <param name="lhs">An ID.</param>
            <param name="rhs">An ID.</param>
            <returns>
                <c>true</c> if <c>lhs</c> is less than <c>rhs</c></returns>
        </member>
        <member name="M:NMotive.UID.op_Inequality(NMotive.UID,NMotive.UID)">
            <summary>
Non-equality operator.
</summary>
            <param name="lhs">An ID.</param>
            <param name="rhs">An ID.</param>
            <returns>
                <c>true</c> if the ID's are not equal.</returns>
        </member>
        <member name="M:NMotive.UID.op_Equality(NMotive.UID,NMotive.UID)">
            <summary>
Equality operator.
</summary>
            <param name="lhs">An ID.</param>
            <param name="rhs">An ID.</param>
            <returns>
                <c>true</c> if the ID's are equal.</returns>
        </member>
        <member name="P:NMotive.UID.Valid">
            <summary>
Is the ID valid.
</summary>
        </member>
        <member name="P:NMotive.UID.HighBits">
            <summary>
Gets the high bits.
</summary>
        </member>
        <member name="P:NMotive.UID.LowBits">
            <summary>
Gets the low bits.
</summary>
        </member>
        <member name="M:NMotive.UID.#ctor(NMotive.UID)">
            <summary>
Creates a copy of another <c>UID</c> object.
</summary>
            <param name="other">The ID to copy.</param>
        </member>
        <member name="M:NMotive.UID.#ctor(System.Int64,System.Int64)">
            <summary>
Creates a <c>UID</c> object with the given high bits and low bits.
</summary>
            <param name="highBits">The ID's high bits.</param>
            <param name="lowBits">The ID's low bits.</param>
        </member>
        <member name="M:NMotive.UID.#ctor">
            <summary>
Creates a <c>UID</c> object with value 0 for both high and low bits.
</summary>
        </member>
        <member name="T:NMotive.UID">
            <summary>
Class <c>UID</c> represents a unique ID.  The ID constists of 
two 64 bit integers - the "high" bits and the "low" bits.
</summary>
        </member>
        <member name="T:NMotive.InterpolationType">
            <summary>
Enumeration type of interpolation options.
</summary>
        </member>
        <member name="F:NMotive.InterpolationType.ModelBased">
            <summary>
Key value created from model based expected position.
</summary>
        </member>
        <member name="F:NMotive.InterpolationType.PatternBased">
            <summary>
Key value created from pattern based expected position.
</summary>
        </member>
        <member name="F:NMotive.InterpolationType.Hermite">
            <summary>
Hermite interpolation. Key value follows a cubic Hermite spline 
between key n and key n+1.
</summary>
        </member>
        <member name="F:NMotive.InterpolationType.Linear">
            <summary>
Linear interpolation. Key value proceeds in straight line from key n 
to key n+1
</summary>
        </member>
        <member name="F:NMotive.InterpolationType.Constant">
            <summary>
Constant interpolation. Key value is fixed until next key is encountered.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.SetOwner(MoCapCore.cIAnimatedNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Internal use only - Set the owner instance. Must match current owner ID.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.op_LessThan(MoCapCore.cIChannel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Comparison operator, used for instance sorting</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.OwnerID">
            <summary>The ID of the node owner.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Owner">
            <summary>The node that owns this channel.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Type">
            <summary>The channel type that this channel applies to within a node.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Load(Core.cIReader*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Load the object from the given serialization source.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Save(Core.cIWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Serialize to the given writer.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.SamplesPerFrame">
            <summary>Retrieve the number of value samples stored per frame.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.KeyIndexRange(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.pair&lt;System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Get the key index range that falls within or on the edges of the given frame range.</summary>
            <param name="timeRange">The frame range to search across.</param>
            <param name="idxRange">The start and end indices of the keys that fall within or on the
frame range boundaries. Only valid if true is returned from the method.</param>
            <returns>True if a valid key index range was found.</returns>
        </member>
        <member name="M:MoCapCore.cIChannel.FindKeyIndex(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary>
Finds the key index for the requested frame, searching forward or back to find it if the requested frame
does not lie at a key. Returns a value less than 0 if there are no keys or no keys exist at the requested time
or beyond when traveling in the search direction.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.KeyIndex(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Returns the key index at the given frame, if it corresponds to a key. Frames that do not
correspond to a key will return a negative value. That value is the number of frames since the last
key, or FrameConstants::NegativeInfinity if there are no keys or the requested frame is before any keys.
For example, if the value returned for a given requested frame is -8, then the previous valid key in time
occurred 8 frames ago in time.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.KeyFrameRange">
            <summary>Get the frame range covered by all keys.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.KeyFrameDistance(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Calculate the distance, in frames, from the given frame to the nearest key in the key array. Distance
will always be non-negative.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.KeyFrame(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>Get the time for the key at the given index.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.IsKey(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Determine if a key is set at the given time</summary>
            <param name="tm">FrameIndex at which to search</param>
            <returns>True if a key exists, false otherwise</returns>
        </member>
        <member name="M:MoCapCore.cIChannel.KeyCount">
            <summary>Returns the number of keys present.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.ApplyFilter(MoCapCore.cKeyframeDataFilter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cFrameRangeSet!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Apply the given filter to keys that exist in the requested frame range set.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.FillGaps(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIChannel.eInterpolationType,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Fills any gaps that exist within the given frame range whose length is less than or equal to 
the given max gap width. The frame range must completely contain the gap(s) to be filled, except
in the case of filling gaps before the first key or after the last key. In that case, the gap
will be filled to the extents of the requested range as long as the range includes a key.
</summary>
            <returns>The number of gaps filled.</returns>
        </member>
        <member name="M:MoCapCore.cIChannel.FindNextGap(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Attempts to find the next gap, searching either forward or backward from the given frame.
The next gap is always returned, even if the given frame is already within a gap. An empty
range will be returned if the requested frame lies outside the key range. If there
are no keys, an infinite range will be returned.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.FindNextGap(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Attempts to find the next gap, searching either forward or backward from the given frame.
The next gap is always returned, even if the given frame is already within a gap. An empty
range will be returned if the requested frame lies outside the key range or there are no gaps
less than or equal to the requested max gap size that lie within the given full range.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Segments(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Core.cFrameRange&gt;*)">
            <summary>Retrieve a list of ranges that have continuous data (i.e. no gaps) for the given range.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.GapRange(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Returns the full gap range of the gap that the requested frame lies within, or an empty range if
the frame is not in a gap.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Gaps(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Core.cFrameRange&gt;*)">
            <summary>
Retrieve a list of gaps that lie within a given range. The output array is not cleared
during this call, so values are simply added to the passed array. Any gaps that lie on the boundary
of the requested range will be clipped to lie within the requested range.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Gaps">
            <summary>Retrieve a list of all gaps that currently exist.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.HasGaps(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns true if there are any frame gaps between the first key and the last. To test for gaps beyond
the first and last keys, you should pass in the full take frame range that you want to test against.
</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.HasKeys(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if keys exist within the given the time range, including endpoints.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.HasKeys">
            <summary>Returns true if keys exist.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.ScaleAndOffsetTime(System.Double,System.Double,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Scale and offset the time component of all keys on the channels by the given amounts.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.ClearSelected(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Deletes any selected keys in the given range.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Clear(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Deletes any keys within or on the edges of the given time range.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.Clear">
            <summary>Deletes all keys on this channel and sets it back to its default state.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.SelectAll(System.Boolean)">
            <summary>Select or un-select all keys on the channel.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.SelectKeys(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Set the selection state of the keys that fall within (or on the edges of) the given time range.</summary>
            <returns>The number of keys whose selection state was altered.</returns>
        </member>
        <member name="M:MoCapCore.cIChannel.SelectKey(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
            <summary>Set the selection state of the key at the given index.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.FinishEdit">
            <summary>Finishes an edit operation and issues any needed change notifications.</summary>
        </member>
        <member name="M:MoCapCore.cIChannel.StartEdit">
            <summary>
Begins an edit operation on this channel. All notifications are delayed until the edit
operation is completed with a matching call to FinishEdit().
</summary>
        </member>
        <member name="T:MoCapCore.cIChannel.eInterpolationType">
            <summary>Key interpolation types.</summary>
        </member>
        <member name="T:MoCapCore.cIChannel.eChannelType">
            <summary>
Channel types are bits within a 32-bit word and must be globally unique. It may be cleanest
to add additional channel types to this enum as they are needed by applications, so that the full
list of available channel types is in one place. Careful changing these values as they are also
used to identify channel types through file persistence.
</summary>
        </member>
        <member name="T:MoCapCore.cIChannel">
            <summary>Pure virtual base class for animation track types</summary>
        </member>
        <member name="M:MoCapCore.cIChannelObserver.OnKeySelectionChanged(MoCapCore.cIChannel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the selection state of any keys change.</summary>
        </member>
        <member name="M:MoCapCore.cIChannelObserver.OnKeyRangeChanged(MoCapCore.cIChannel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the overall time range for the key array changes.</summary>
        </member>
        <member name="M:MoCapCore.cIChannelObserver.OnSetKeys(MoCapCore.cIChannel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called whenever new keys have been created, or existing keys have been changed or deleted.</summary>
        </member>
        <member name="M:NMotive.NMotiveException.#ctor(System.String,System.Exception)">
            <summary>
Constructs an <c>NMotiveException</c> object with the given
message and inner exception.
</summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:NMotive.NMotiveException.#ctor(System.String)">
            <summary>
Constructs an <c>NMotiveException</c> object with the given
message.
</summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:NMotive.NMotiveException.#ctor">
            <summary>
Constructs an empty <c>NMotiveException</c> object.
</summary>
        </member>
        <member name="T:NMotive.NMotiveException">
            <summary>
Class for a general exception thrown by NMotive code.
</summary>
        </member>
        <member name="P:NMotive.Result.Message">
            <summary>
Gets the message.
</summary>
        </member>
        <member name="P:NMotive.Result.Success">
            <summary>
Gets the success state.
</summary>
        </member>
        <member name="M:NMotive.Result.#ctor(System.Boolean,System.String)">
            <summary>
Constructs a <c>Result</c> object with the given success state 
and message.
</summary>
            <param name="success">The success state.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:NMotive.Result.#ctor">
            <summary>
Constructs a <c>Result</c> object with success set to <c>false</c>
empty message property.
</summary>
        </member>
        <member name="T:NMotive.Result">
            <summary>
Class representing the result of an operation. It indicates success or
failure and an information message (most useful when the result is
failure).
</summary>
        </member>
        <member name="M:NMotive.Settings.ImportCalibrationSettings(System.String,NMotive.Settings.ApplyCalibrationOptions)">
            <summary>
Import calibration settings from a file. The importation must be
done before every operation that will use them.
</summary>
            <param name="settingsFilename">Calibration settings file name.</param>
            <param name="option">The apply calibration option.</param>
            <returns>The result of the import attempt.</returns>
        </member>
        <member name="M:NMotive.Settings.ImportReconstructionSettings(System.String)">
            <summary>
Import reconstruction settings from a file. The importation must be
done before every operation that will use them.
</summary>
            <param name="settingsFilename">Reconstruction settings file name.</param>
            <returns>The result of the import attempt.</returns>
        </member>
        <member name="F:NMotive.Settings.ApplyCalibrationOptions.ApplyCalibration_CameraPoseOnly">
            <summary>
Apply camera pose only.
</summary>
        </member>
        <member name="F:NMotive.Settings.ApplyCalibrationOptions.ApplyCalibration_Normal">
            <summary>
Apply normally.
</summary>
        </member>
        <member name="T:NMotive.Settings.ApplyCalibrationOptions">
            <summary>
Enum of apply calibration options.
</summary>
        </member>
        <member name="T:NMotive.Settings">
            <summary>
Functions for importing global settings. Like reconstruction and
calibration settings.
</summary>
        </member>
        <member name="T:NMotive.FileResult">
            <summary>
Enumeration of file operation results.
</summary>
        </member>
        <member name="F:NMotive.FileResult.NotLicensed">
            <summary>
Attempted to load a file that contained elements that are not 
licensed for use in this instance.
</summary>
        </member>
        <member name="F:NMotive.FileResult.AlreadyLoaded">
            <summary>
File is already loaded into the project.
</summary>
        </member>
        <member name="F:NMotive.FileResult.OutOfMemory">
            <summary>
Insufficient memory for the operation.
</summary>
        </member>
        <member name="F:NMotive.FileResult.NoData">
            <summary>
There was no data to write.
</summary>
        </member>
        <member name="F:NMotive.FileResult.NotCompatible">
            <summary>
The file was written by a newer version of the application, or is not otherwise compatible.
</summary>
        </member>
        <member name="F:NMotive.FileResult.BadFormat">
            <summary>
File contained unexpected data fields.
</summary>
        </member>
        <member name="F:NMotive.FileResult.IncompleteFile">
            <summary>
File did not contain all expected data fields.
</summary>
        </member>
        <member name="F:NMotive.FileResult.CannotOpenFile">
            <summary>
File did not exist, could not be read, or could not be written to.
</summary>
        </member>
        <member name="F:NMotive.FileResult.ResultOK">
            <summary>
Operation successful
</summary>
        </member>
        <member name="M:Motive.cProject.DefaultDataDirectory">
            <summary>Get the default data directory for the current user.</summary>
        </member>
        <member name="M:Motive.cProject.NetworkStreamingSettings">
            <summary>Get the network streaming settings for this project.</summary>
        </member>
        <member name="M:Motive.cProject.DefaultDirectory">
            <summary>Retrieve the (current) default folder for project load/save.</summary>
        </member>
        <member name="M:Motive.cProject.SetDefaultDirectory(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the default folder for project load/save. Returns false if an invalid path is passed in.</summary>
        </member>
        <member name="M:Motive.cProject.SaveCalibration(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Export a calibration to a disk file.</summary>
        </member>
        <member name="M:Motive.cProject.LoadCalibration(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Motive.cProject.eApplyCalibrationOptions)">
            <summary>Import a calibration from file on disk.</summary>
        </member>
        <member name="M:Motive.cProject.SaveSkeletons(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;SkeletonSolver.CSkeleton**&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Save the given skeletons to a ".skl" file.</summary>
        </member>
        <member name="M:Motive.cProject.LoadSkeletons(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;SkeletonSolver.CSkeleton**&gt;*)">
            <summary>Load all available skeletons from the given file.</summary>
        </member>
        <member name="M:Motive.cProject.SaveRigidBodies(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Export all the current rigid bodies to a file.</summary>
        </member>
        <member name="M:Motive.cProject.LoadRigidBodies(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Import rigid body definitions from the given file.</summary>
        </member>
        <member name="M:Motive.cProject.SaveTake(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Save a take to an arbitrary location on disk.</summary>
        </member>
        <member name="M:Motive.cProject.LoadTake(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Load a take from an arbitrary location on disk.</summary>
        </member>
        <member name="M:Motive.cProject.LoadedFilename">
            <summary>Filename of the currently loaded project.</summary>
        </member>
        <member name="M:Motive.cProject.GenerateFilename">
            <summary>Generate a reasonable project name to use when no project name is present.</summary>
        </member>
        <member name="M:Motive.cProject.IsDirty">
            <summary>Returns true if the project has changed since it was loaded, created, or last saved.</summary>
        </member>
        <member name="M:Motive.cProject.MarkDirty">
            <summary>Indicates that the project file needs to be saved/re-saved.</summary>
        </member>
        <member name="M:Motive.cProject.Clear">
            <summary>
Clear project data. This currently only clears member data that is local to the cProject class.
It will continue to evolve to clear all project data.
</summary>
        </member>
        <member name="M:Motive.cProject.Save(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convenience method to save to the given filename.</summary>
        </member>
        <member name="M:Motive.cProject.Save(MoCapCore.cIDataStreamWarehouse*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Save to the given stream warehouse.</summary>
        </member>
        <member name="M:Motive.cProject.Save">
            <summary>Save to the current project file.</summary>
        </member>
        <member name="M:Motive.cProject.Load(MoCapCore.cIDataStreamWarehouse*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Load from an already-opened stream warehouse.</summary>
        </member>
        <member name="M:Motive.cProject.Load(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convenience method for loading from a given filename.</summary>
        </member>
        <member name="T:Motive.cProject">
            <summary>A loader/saver class for handling a number of different file types.</summary>
        </member>
        <member name="M:Motive.cIProjectObserver.OnDirtyChanged(Motive.cProject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the dirty state of the project has changed.</summary>
        </member>
        <member name="M:Motive.cIProjectObserver.OnAssetListChanged(Motive.cProject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the asset list changes.</summary>
        </member>
        <member name="M:cLicenseManager.RevalidateLicense">
            <summary>Re-test primary license and determine if the license is valid.</summary>
        </member>
        <member name="M:cAppCore.PauseAndEmptyPipeline">
            <summary>If system is in playback this will pause playback and wait for all processing to 
 complete before returning.</summary>
        </member>
        <member name="M:cAppCore.NodeFactory">
            <summary>Factory to be used to create node instances of any requested type.</summary>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreamVisual3DCompatible(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream Visual3D compatible.
</summary>
            <param name="streamVisual3DCompatibleValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.StreamVisual3DCompatible">
            <summary>
Gets the value of the property.
Stream Visual3D compatible.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreamSubjectPrefix(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream subject prefix.
</summary>
            <param name="streamSubjectPrefixValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.StreamSubjectPrefix">
            <summary>
Gets the value of the property.
Stream subject prefix.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetTrackdStreaming(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Broadcast Trackd frame data..
</summary>
            <param name="trackdStreamingValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.TrackdStreaming">
            <summary>
Gets the value of the property.
Broadcast Trackd frame data..
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetVRPNBroadcastPort(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
VRPN broadcast port.
</summary>
            <param name="vRPNBroadcastPortValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.VRPNBroadcastPort">
            <summary>
Gets the value of the property.
VRPN broadcast port.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetVRPNStreaming(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Broadcast VRPN frame data.
</summary>
            <param name="vRPNStreamingValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.VRPNStreaming">
            <summary>
Gets the value of the property.
Broadcast VRPN frame data.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetMulticastAddress(System.UInt32,System.Boolean)">
            <summary>
Sets the value of the property.
Multicast IP address.
</summary>
            <param name="multicastAddressValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.MulticastAddress">
            <summary>
Gets the value of the property.
Multicast IP address.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetDataPort(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Data port.
</summary>
            <param name="dataPortValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.DataPort">
            <summary>
Gets the value of the property.
Data port.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetCommandPort(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Command port.
</summary>
            <param name="commandPortValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.CommandPort">
            <summary>
Gets the value of the property.
Command port.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetType(Motive.cStreamingSettings.eBroadcastType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Multicast or unicast.
</summary>
            <param name="typeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.Type">
            <summary>
Gets the value of the property.
Multicast or unicast.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetRemoteTriggerBroadcastingEnabled(System.Boolean,System.Boolean)">
            <summary>
Sets the value of the property.
Remote trigger broadcasting.
</summary>
            <param name="remoteTriggerBroadcastingEnabledValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.RemoteTriggerBroadcastingEnabled">
            <summary>
Gets the value of the property.
Remote trigger broadcasting.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetUpAxis(Motive.cStreamingSettings.eStreamingUpAxis!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Up axis.
</summary>
            <param name="upAxisValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.UpAxis">
            <summary>
Gets the value of the property.
Up axis.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetBoneNamingConvention(SkeletonSolver.CBone.eBoneNamingConvention!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Bone naming convention.
</summary>
            <param name="boneNamingConventionValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.BoneNamingConvention">
            <summary>
Gets the value of the property.
Bone naming convention.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetScale(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Scale.
</summary>
            <param name="scaleValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.Scale">
            <summary>
Gets the value of the property.
Scale.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetSkeletonAsRigidBodies(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream skeletons as rigid bodies.
</summary>
            <param name="skeletonAsRigidBodiesValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.SkeletonAsRigidBodies">
            <summary>
Gets the value of the property.
Stream skeletons as rigid bodies.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetLocalRigidBodies(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Local rigid bodies.
</summary>
            <param name="localRigidBodiesValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.LocalRigidBodies">
            <summary>
Gets the value of the property.
Local rigid bodies.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreamSkeletons(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream skeletons.
</summary>
            <param name="streamSkeletonsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.StreamSkeletons">
            <summary>
Gets the value of the property.
Stream skeletons.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreamRigidBodies(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream rigid bodies.
</summary>
            <param name="streamRigidBodiesValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.StreamRigidBodies">
            <summary>
Gets the value of the property.
Stream rigid bodies.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreamOtherMarkers(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream other markers.
</summary>
            <param name="streamOtherMarkersValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.StreamOtherMarkers">
            <summary>
Gets the value of the property.
Stream other markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreamMarkerSetMarkers(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream marker set markers.
</summary>
            <param name="streamMarkerSetMarkersValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.StreamMarkerSetMarkers">
            <summary>
Gets the value of the property.
Stream marker set markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreamUnlabeledMarkers(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream unlabeled markers.
</summary>
            <param name="streamUnlabeledMarkersValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.StreamUnlabeledMarkers">
            <summary>
Gets the value of the property.
Stream unlabeled markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreamLabeledMarkers(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Stream markers.
</summary>
            <param name="streamLabeledMarkersValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.StreamLabeledMarkers">
            <summary>
Gets the value of the property.
Stream markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetStreaming(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Streaming.
</summary>
            <param name="streamingValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.Streaming">
            <summary>
Gets the value of the property.
Streaming.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cStreamingSettings.SetLocalInterface(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Local interface.
</summary>
            <param name="localInterfaceValue">The new property value.</param>
        </member>
        <member name="M:Motive.cStreamingSettings.LocalInterface">
            <summary>
Gets the value of the property.
Local interface.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetAnkleHeight(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Ankle height.
</summary>
            <param name="ankleHeightValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.AnkleHeight">
            <summary>
Gets the value of the property.
Ankle height.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetArmVertOffset(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Arm vertical offset.
</summary>
            <param name="armVertOffsetValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.ArmVertOffset">
            <summary>
Gets the value of the property.
Arm vertical offset.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetShoulderLengthAdd(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Shoulder length add.
</summary>
            <param name="shoulderLengthAddValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.ShoulderLengthAdd">
            <summary>
Gets the value of the property.
Shoulder length add.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetShoulderAngle(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Shoulder angle.
</summary>
            <param name="shoulderAngleValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.ShoulderAngle">
            <summary>
Gets the value of the property.
Shoulder angle.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetShoulderVertOffset(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Shoulder vertical offset.
</summary>
            <param name="shoulderVertOffsetValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.ShoulderVertOffset">
            <summary>
Gets the value of the property.
Shoulder vertical offset.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetShoulderHorzOffset(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Shoulder horizontal offset.
</summary>
            <param name="shoulderHorzOffsetValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.ShoulderHorzOffset">
            <summary>
Gets the value of the property.
Shoulder horizontal offset.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetNeckLength(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Neck length.
</summary>
            <param name="neckLengthValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.NeckLength">
            <summary>
Gets the value of the property.
Neck length.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetAdjustSpineByWrist(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Adjust spine by wrist.
</summary>
            <param name="adjustSpineByWristValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.AdjustSpineByWrist">
            <summary>
Gets the value of the property.
Adjust spine by wrist.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetHeightMarker(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Height marker.
</summary>
            <param name="heightMarkerValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.HeightMarker">
            <summary>
Gets the value of the property.
Height marker.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetHeadUpright(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Head upright.
</summary>
            <param name="headUprightValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.HeadUpright">
            <summary>
Gets the value of the property.
Head upright.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetFloorHeight(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Feet height above the floor (m).
</summary>
            <param name="floorHeightValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.FloorHeight">
            <summary>
Gets the value of the property.
Feet height above the floor (m).
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetFeetOnFloor(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Feet planted on the floor.
</summary>
            <param name="feetOnFloorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.FeetOnFloor">
            <summary>
Gets the value of the property.
Feet planted on the floor.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetStraightLegs(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Straight legs.
</summary>
            <param name="straightLegsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.StraightLegs">
            <summary>
Gets the value of the property.
Straight legs.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetStraighArms(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Straight arms.
</summary>
            <param name="straighArmsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.StraighArms">
            <summary>
Gets the value of the property.
Straight arms.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SetSkeletonCreationPose(SkeletonSolver.ePoseType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Skeleton creation pose.
</summary>
            <param name="skeletonCreationPoseValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonGeneralSettings.SkeletonCreationPose">
            <summary>
Gets the value of the property.
Skeleton creation pose.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetStaticConstraintAngle(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Maximum allowable angular deflection from unit cone vector. (degrees)
</summary>
            <param name="staticConstraintAngleValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.StaticConstraintAngle">
            <summary>
Gets the value of the property.
Maximum allowable angular deflection from unit cone vector. (degrees)
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetStaticConstraintZ(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Z component of unit vector cone of allowable orientations.
</summary>
            <param name="staticConstraintZValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.StaticConstraintZ">
            <summary>
Gets the value of the property.
Z component of unit vector cone of allowable orientations.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetStaticConstraintY(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Y component of unit vector cone of allowable orientations.
</summary>
            <param name="staticConstraintYValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.StaticConstraintY">
            <summary>
Gets the value of the property.
Y component of unit vector cone of allowable orientations.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetStaticConstraintX(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
X component of unit vector cone of allowable orientations.
</summary>
            <param name="staticConstraintXValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.StaticConstraintX">
            <summary>
Gets the value of the property.
X component of unit vector cone of allowable orientations.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetDynamicTranslationConstraint(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="dynamicTranslationConstraintValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.DynamicTranslationConstraint">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetAcquisitionFrames(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
While rigid body is untracked, only search point cloud every Nth frame.
</summary>
            <param name="acquisitionFramesValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.AcquisitionFrames">
            <summary>
Gets the value of the property.
While rigid body is untracked, only search point cloud every Nth frame.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetMaxCalculationTime(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Maximum amount of time to solve the rigid body per frame. (ms)
</summary>
            <param name="maxCalculationTimeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.MaxCalculationTime">
            <summary>
Gets the value of the property.
Maximum amount of time to solve the rigid body per frame. (ms)
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetMinimumMarkerCount(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
The minimum number of tracked markers.
</summary>
            <param name="minimumMarkerCountValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.MinimumMarkerCount">
            <summary>
Gets the value of the property.
The minimum number of tracked markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetUserData(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
User definable data for the rigid body.
</summary>
            <param name="userDataValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.UserData">
            <summary>
Gets the value of the property.
User definable data for the rigid body.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetUnique(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Indicates that this rigid body marker arrangement is not identical to another defined rigid body.
</summary>
            <param name="uniqueValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.Unique">
            <summary>
Gets the value of the property.
Indicates that this rigid body marker arrangement is not identical to another defined rigid body.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetShareMarkers(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Allow markers of this rigid body to be used by other rigid bodies.
</summary>
            <param name="shareMarkersValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.ShareMarkers">
            <summary>
Gets the value of the property.
Allow markers of this rigid body to be used by other rigid bodies.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetPredictionTime(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Compensate for system latency by predicting the rigid body into the future. (ms)
</summary>
            <param name="predictionTimeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.PredictionTime">
            <summary>
Gets the value of the property.
Compensate for system latency by predicting the rigid body into the future. (ms)
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetTrackingAlgorithmLevel(Motive.cRigidBodyGeneralSettings.eTrackingAlgorithms!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Selected tracking algorithm. Levels increase tracking accuracy at increasing computational expense.
</summary>
            <param name="trackingAlgorithmLevelValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.TrackingAlgorithmLevel">
            <summary>
Gets the value of the property.
Selected tracking algorithm. Levels increase tracking accuracy at increasing computational expense.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetMaxMarkerDeflection(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
The maximum distance a marker can deviate from it's ideal position before it becomes untracked. (mm)
</summary>
            <param name="maxMarkerDeflectionValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.MaxMarkerDeflection">
            <summary>
Gets the value of the property.
The maximum distance a marker can deviate from it's ideal position before it becomes untracked. (mm)
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetSmoothing(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Smooth translation and rotation. Disabled at 0, medium smoothing at 50, and 100 for heavy.
</summary>
            <param name="smoothingValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.Smoothing">
            <summary>
Gets the value of the property.
Smooth translation and rotation. Disabled at 0, medium smoothing at 50, and 100 for heavy.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.SetName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
The name of the rigid body.
</summary>
            <param name="nameValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyGeneralSettings.Name">
            <summary>
Gets the value of the property.
The name of the rigid body.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayOrientationSize(System.Int32,System.Boolean)">
            <summary>
Sets the value of the property.
The size of historical rigid body orientation axes markers.
</summary>
            <param name="displayOrientationSizeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayOrientationSize">
            <summary>
Gets the value of the property.
The size of historical rigid body orientation axes markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayOrientationSpread(System.Int32,System.Boolean)">
            <summary>
Sets the value of the property.
The spacing of historical rigid body orientation axes markers.
</summary>
            <param name="displayOrientationSpreadValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayOrientationSpread">
            <summary>
Gets the value of the property.
The spacing of historical rigid body orientation axes markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayHistoryLength(System.Int32,System.Boolean)">
            <summary>
Sets the value of the property.
The number of historical data samples for rigid body position and orientation.
</summary>
            <param name="displayHistoryLengthValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayHistoryLength">
            <summary>
Gets the value of the property.
The number of historical data samples for rigid body position and orientation.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetModelZ(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="modelZValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.ModelZ">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetModelY(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="modelYValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.ModelY">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetModelX(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="modelXValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.ModelX">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetModelRoll(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="modelRollValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.ModelRoll">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetModelPitch(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="modelPitchValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.ModelPitch">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetModelYaw(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="modelYawValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.ModelYaw">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetModelScale(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="modelScaleValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.ModelScale">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetModelName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Filename of a compatible geometric model.
</summary>
            <param name="modelNameValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.ModelName">
            <summary>
Gets the value of the property.
Filename of a compatible geometric model.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayModelReplace(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
When true and a valid geometric model is loaded the model will draw instead of the rigid body.
</summary>
            <param name="displayModelReplaceValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayModelReplace">
            <summary>
Gets the value of the property.
When true and a valid geometric model is loaded the model will draw instead of the rigid body.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayOrientationHistory(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show historical orientation axes.
</summary>
            <param name="displayOrientationHistoryValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayOrientationHistory">
            <summary>
Gets the value of the property.
Show historical orientation axes.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayPositionHistory(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show historical position.
</summary>
            <param name="displayPositionHistoryValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayPositionHistory">
            <summary>
Gets the value of the property.
Show historical position.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayOrientation(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="displayOrientationValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayOrientation">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayMarkerQuality(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="displayMarkerQualityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayMarkerQuality">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayQuality(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="displayQualityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayQuality">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayUntrackedMarkers(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="displayUntrackedMarkersValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayUntrackedMarkers">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayPivot(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="displayPivotValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayPivot">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayUntracked(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="displayUntrackedValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayUntracked">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayTracked(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="displayTrackedValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayTracked">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetDisplayLabel(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.

</summary>
            <param name="displayLabelValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.DisplayLabel">
            <summary>
Gets the value of the property.

</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.SetColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
The rigid body color.
</summary>
            <param name="colorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cRigidBodyDisplaySettings.Color">
            <summary>
Gets the value of the property.
The rigid body color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowTrackColor(Motive.cSkeletonVisualSettings.eTrackErrorsVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show tracking errors.
</summary>
            <param name="showTrackColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowTrackColor">
            <summary>
Gets the value of the property.
Show tracking errors.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowTargetMarkerLines(Motive.cSkeletonVisualSettings.eTargetMarkerLinesVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker to target lines.
</summary>
            <param name="showTrackColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowTargetMarkerLines">
            <summary>
Gets the value of the property.
Show marker to target lines.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowAxis(Motive.cSkeletonVisualSettings.eAxisVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show labels.
</summary>
            <param name="showAxisValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowAxis">
            <summary>
Gets the value of the property.
Show labels.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowMarkerLabel(Motive.cSkeletonVisualSettings.eMarkerLabelsVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker labels.
</summary>
            <param name="showMarkerLabelValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowMarkerLabel">
            <summary>
Gets the value of the property.
Show marker labels.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowLabel(Motive.cSkeletonVisualSettings.eLabelsVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show labels.
</summary>
            <param name="showLabelValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowLabel">
            <summary>
Gets the value of the property.
Show labels.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetMarkerSetColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Marker color.
</summary>
            <param name="markerSetColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.MarkerSetColor">
            <summary>
Gets the value of the property.
Marker color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowMarkerSet(Motive.cSkeletonVisualSettings.eMarkersVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show markers.
</summary>
            <param name="showMarkerSetValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowMarkerSet">
            <summary>
Gets the value of the property.
Show markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetBoneColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Bone color.
</summary>
            <param name="boneColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.BoneColor">
            <summary>
Gets the value of the property.
Bone color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowBones(Motive.cSkeletonVisualSettings.eBonesVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Bones visible or hidden.
</summary>
            <param name="showBonesValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowBones">
            <summary>
Gets the value of the property.
Bones visible or hidden.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowAvatar(Motive.cSkeletonVisualSettings.eAvatorVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Avatar visible or hidden.
</summary>
            <param name="showAvatarValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowAvatar">
            <summary>
Gets the value of the property.
Avatar visible or hidden.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetRimLightColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Specular Color.
</summary>
            <param name="rimLightColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.RimLightColor">
            <summary>
Gets the value of the property.
Specular Color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetRimLightEnd(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Rim light end
</summary>
            <param name="rimLightEndValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.RimLightEnd">
            <summary>
Gets the value of the property.
Rim light end
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetRimLightStart(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Rim light start
</summary>
            <param name="rimLightStartValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.RimLightStart">
            <summary>
Gets the value of the property.
Rim light start
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetRimLightIntensity(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Rim light intensity
</summary>
            <param name="rimLightIntensityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.RimLightIntensity">
            <summary>
Gets the value of the property.
Rim light intensity
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetSpecularPower(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Specular power
</summary>
            <param name="specularPowerValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SpecularPower">
            <summary>
Gets the value of the property.
Specular power
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetSpecularColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Specular Color.
</summary>
            <param name="specularColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SpecularColor">
            <summary>
Gets the value of the property.
Specular Color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetSegmentColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Segment Color.
</summary>
            <param name="segmentColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SegmentColor">
            <summary>
Gets the value of the property.
Segment Color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetShowSegments(Motive.cSkeletonVisualSettings.eSegmentsVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Segments visible or hidden.
</summary>
            <param name="showSegmentsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.ShowSegments">
            <summary>
Gets the value of the property.
Segments visible or hidden.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.SetHiddenVisible(Motive.cSkeletonVisualSettings.eSkeletonVisible!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Skeleton visible or hidden.
</summary>
            <param name="visibleValue">The new property value.</param>
        </member>
        <member name="M:Motive.cSkeletonVisualSettings.HiddenVisible">
            <summary>
Gets the value of the property.
Skeleton visible or hidden.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="T:Motive.cSkeletonVisualSettings">
            <summary />
        </member>
        <member name="M:Motive.cApplicationSettings.UpdateLastSaved">
            <summary>Internal use only - Update internal cache to indicate all properties are current.</summary>
        </member>
        <member name="M:Motive.cApplicationSettings.SetPlaybackSpeed(System.Double,System.Boolean)">
            <summary>
Sets the value of the property.
The scaling to apply to time when playing back. 1.0 is full speed, 0.1 is 1/10 speed.
</summary>
            <param name="scaling">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.PlaybackSpeed">
            <summary>
Gets the value of the property.
The scaling to apply to time when playing back. 1.0 is full speed, 0.1 is 1/10 speed.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetDelayRecord(System.Double,System.Boolean)">
            <summary>
Sets the value of the property.
The number of seconds to delay from pressing Record to when recording begins.
</summary>
            <param name="seconds">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.DelayRecord">
            <summary>
Gets the value of the property.
The number of seconds to delay from pressing Record to when recording begins.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetLockTimelineCursor(System.Boolean,System.Boolean)">
            <summary>
Sets the value of the property.
Lock the timeline cursor in the center of the timeline during playback.
</summary>
            <param name="onOff">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.LockTimelineCursor">
            <summary>
Gets the value of the property.
Lock the timeline cursor in the center of the timeline during playback.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetLoopPlayback(System.Boolean,System.Boolean)">
            <summary>
Sets the value of the property.
Loop the play head during playback.
</summary>
            <param name="onOff">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.LoopPlayback">
            <summary>
Gets the value of the property.
Loop the play head during playback.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetRecordJoints(System.Boolean,System.Boolean)">
            <summary>
Sets the value of the property.
Whether to record joint information during recording.
</summary>
            <param name="onOff">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.RecordJoints">
            <summary>
Gets the value of the property.
Whether to record joint information during recording.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetRecord3D(System.Boolean,System.Boolean)">
            <summary>
Sets the value of the property.
Record 3D during recording.
</summary>
            <param name="onOff">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.Record3D">
            <summary>
Gets the value of the property.
Record 3D during recording.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportZAxisProperty">
            <summary>
Gets the property of the property
Z-axis exporting take files to various formats.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Z-axis exporting take files to various formats.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetExportZAxis(Core.eAxis!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Z-axis exporting take files to various formats.
</summary>
            <param name="exportZAxisValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportZAxis">
            <summary>
Gets the value of the property.
Z-axis exporting take files to various formats.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportYAxisProperty">
            <summary>
Gets the property of the property
Y-axis exporting take files to various formats.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Y-axis exporting take files to various formats.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetExportYAxis(Core.eAxis!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Y-axis exporting take files to various formats.
</summary>
            <param name="exportYAxisValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportYAxis">
            <summary>
Gets the value of the property.
Y-axis exporting take files to various formats.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportXAxisProperty">
            <summary>
Gets the property of the property
X-axis exporting take files to various formats.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
X-axis exporting take files to various formats.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetExportXAxis(Core.eAxis!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
X-axis exporting take files to various formats.
</summary>
            <param name="exportXAxisValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportXAxis">
            <summary>
Gets the value of the property.
X-axis exporting take files to various formats.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportUnitsProperty">
            <summary>
Gets the property of the property
Units for exporting take files to various formats.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Units for exporting take files to various formats.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetExportUnits(Core.eUnits!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Units for exporting take files to various formats.
</summary>
            <param name="exportUnitsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportUnits">
            <summary>
Gets the value of the property.
Units for exporting take files to various formats.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.LLDPDetectionProperty">
            <summary>
Gets the property of the property
LLDP detection.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
LLDP detection.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetLLDPDetection(CameraLibrary.Camera.eLLDPDetection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
LLDP detection.
</summary>
            <param name="lLDPDetectionValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.LLDPDetection">
            <summary>
Gets the value of the property.
LLDP detection.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.StrobeOnDuringPlaybackProperty">
            <summary>
Gets the property of the property
Strobe during playback.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Strobe during playback.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetStrobeOnDuringPlayback(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Strobe during playback.
</summary>
            <param name="strobeOnDuringPlaybackValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.StrobeOnDuringPlayback">
            <summary>
Gets the value of the property.
Strobe during playback.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodSceneColorProperty">
            <summary>
Gets the property of the property
Camera status ring color for scene camera.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Camera status ring color for scene camera.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetMoodSceneColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Camera status ring color for scene camera.
</summary>
            <param name="moodSceneColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodSceneColor">
            <summary>
Gets the value of the property.
Camera status ring color for scene camera.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodSelectionColorProperty">
            <summary>
Gets the property of the property
Camera status ring color for selection.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Camera status ring color for selection.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetMoodSelectionColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Camera status ring color for selection.
</summary>
            <param name="moodSelectionColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodSelectionColor">
            <summary>
Gets the value of the property.
Camera status ring color for selection.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodPlaybackColorProperty">
            <summary>
Gets the property of the property
Camera status ring color for playback mode.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Camera status ring color for playback mode.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetMoodPlaybackColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Camera status ring color for playback mode.
</summary>
            <param name="moodPlaybackColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodPlaybackColor">
            <summary>
Gets the value of the property.
Camera status ring color for playback mode.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodRecordingColorProperty">
            <summary>
Gets the property of the property
Camera Status ring color for recording mode.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Camera Status ring color for recording mode.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetMoodRecordingColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Camera Status ring color for recording mode.
</summary>
            <param name="moodRecordingColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodRecordingColor">
            <summary>
Gets the value of the property.
Camera Status ring color for recording mode.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodLiveColorProperty">
            <summary>
Gets the property of the property
Camera Status ring color for live mode.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Camera Status ring color for live mode.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetMoodLiveColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Camera Status ring color for live mode.
</summary>
            <param name="moodLiveColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.MoodLiveColor">
            <summary>
Gets the value of the property.
Camera Status ring color for live mode.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.CameraAimAssistLEDProperty">
            <summary>
Gets the property of the property
Use camera aim assist LED.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Use camera aim assist LED.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetCameraAimAssistLED(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Use camera aim assist LED.
</summary>
            <param name="cameraAimAssistLEDValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.CameraAimAssistLED">
            <summary>
Gets the value of the property.
Use camera aim assist LED.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.CameraButtonAimingCrosshairsProperty">
            <summary>
Gets the property of the property
Camera button aiming crosshairs.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Camera button aiming crosshairs.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetCameraButtonAimingCrosshairs(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Camera button aiming crosshairs.
</summary>
            <param name="cameraButtonAimingCrosshairsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.CameraButtonAimingCrosshairs">
            <summary>
Gets the value of the property.
Camera button aiming crosshairs.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.CameraButtonMJPEGProperty">
            <summary>
Gets the property of the property
Camera MJPEG.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Camera MJPEG.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetCameraButtonMJPEG(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Camera MJPEG.
</summary>
            <param name="cameraButtonMJPEGValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.CameraButtonMJPEG">
            <summary>
Gets the value of the property.
Camera MJPEG.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.PanSensitivityProperty">
            <summary>
Gets the property of the property
Pan Sensitivity
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Pan Sensitivity
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetPanSensitivity(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Pan Sensitivity
</summary>
            <param name="panSensitivityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.PanSensitivity">
            <summary>
Gets the value of the property.
Pan Sensitivity
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.RotateSensitivityProperty">
            <summary>
Gets the property of the property
Rotate Sensitivity
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Rotate Sensitivity
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetRotateSensitivity(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Rotate Sensitivity
</summary>
            <param name="rotateSensitivityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.RotateSensitivity">
            <summary>
Gets the value of the property.
Rotate Sensitivity
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.ZoomToMouseProperty">
            <summary>
Gets the property of the property
Zoom to mouse.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Zoom to mouse.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetZoomToMouse(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Zoom to mouse.
</summary>
            <param name="zoomToMouseValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.ZoomToMouse">
            <summary>
Gets the value of the property.
Zoom to mouse.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.RestoreCalibrationProperty">
            <summary>
Gets the property of the property
Restore calibration.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Restore calibration.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetRestoreCalibration(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Restore calibration.
</summary>
            <param name="restoreCalibrationValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.RestoreCalibration">
            <summary>
Gets the value of the property.
Restore calibration.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.NumericLEDsProperty">
            <summary>
Gets the property of the property
Camera numeric LEDs.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Camera numeric LEDs.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetNumericLEDs(Motive.cApplicationSettings.eNumericDisplay!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Camera numeric LEDs.
</summary>
            <param name="numericLEDsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.CameraNumbering">
            <summary>
Gets the value of the property.
Camera ID assignment approach.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.NumericLEDs">
            <summary>
Gets the value of the property.
Camera numeric LEDs.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.TrackSelectedMarkersProperty">
            <summary>
Gets the property of the property
Track selected markers.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Track selected markers.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetTrackSelectedMarkers(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Track selected markers.
</summary>
            <param name="trackSelectedMarkersValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.TrackSelectedMarkers">
            <summary>
Gets the value of the property.
Track selected markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.TakeFileSuffixProperty">
            <summary>
Gets the property of the property
Suffix for take files.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Suffix for take files.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetTakeFileSuffix(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Suffix for take files.
</summary>
            <param name="takeFileSuffixValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.TakeFileSuffix">
            <summary>
Gets the value of the property.
Suffix for take files.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.DefaultLayoutProperty">
            <summary>
Gets the property of the property
Default layout.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Default layout.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetDefaultLayout(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Default layout.
</summary>
            <param name="defaultLayoutValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.DefaultLayout">
            <summary>
Gets the value of the property.
Default layout.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.ActiveMarkerLabelingProperty">
            <summary>
Gets the property of the property
Active marker labeling.
</summary>
            <returns>A pointer to the property.</returns>
            <summary>
Gets a read-only reference to the property of the property
Active marker labeling.
</summary>
            <returns>A const pointer to the property.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetActiveMarkerLabeling(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Active marker labeling.
</summary>
            <param name="activeMarkerLabelingValue">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.ActiveMarkerLabeling">
            <summary>
Gets the value of the property.
Active marker labeling.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetSaveAsExportType(Motive.cApplicationSettings.eExportFileType)">
            <summary>
Sets the value of the property.
Type of file to export takes to.
</summary>
            <param name="t">The new property value.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.SaveAsExportType">
            <summary>
Gets the value of the property.
Type of file to export takes to.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cApplicationSettings.SetExportScale(System.Int32)">
            <summary>
Sets the scale for exporting take data.
</summary>
            <param name="scale">The scale as percentage value between 1 and 100.</param>
        </member>
        <member name="M:Motive.cApplicationSettings.ExportScale">
            <summary>
Gets the scale for exporting take data.
</summary>
            <returns>The scale as percentage value between 1 and 100.</returns>
        </member>
        <member name="T:Motive.cApplicationSettings">
            <summary />
        </member>
        <member name="M:Core.ComputeBlockHash(Core.cSerializer*,SHA1*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HL_SHA1_CTX*)">
            <summary>Compute hash for a given individual data block of a serializer.</summary>
        </member>
        <member name="M:Core.ComputeHashTag(Core.cSerializer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compute a SHA1 hash for the given serializer's data.</summary>
        </member>
        <member name="M:SHA1.SHA1Result(HL_SHA1_CTX*,System.Byte*)">
  @brief 	This ends the sha operation, zeroizing the context
  		and returning the computed hash.

  @param	context The context to get the hash from
  @param	Message_Digest This is an OUT parameter which
  		contains the hash after the menberfunction returns
  @return	0 on succes, an error-code otherwise

</member>
        <member name="M:SHA1.SHA1Input(HL_SHA1_CTX*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
  @brief 	Data input.

  		This memberfunction add data to the specified
  		context.

  @param	context The context to add data to
  @param	message_array The data to add
  @param	length The length of the data to add

</member>
        <member name="M:SHA1.SHA1Reset(HL_SHA1_CTX*)">
@brief 	Resets the sha1 context and starts a new
		hashprocess
@param	context The context to reset
@return	0 on succes an error number otherwise

</member>
        <member name="M:SHA1.SHA1ProcessMessageBlock(HL_SHA1_CTX*)">
  @brief      This member-function will process the next 512 bits of the
  		message stored in the Message_Block array.

      	Many of the variable names in this code, especially the
      	single character names, were used because those were the
      	names used in the publication.

  @param	context The context to process

</member>
        <member name="M:SHA1.SHA1PadMessage(HL_SHA1_CTX*)">
  @brief 	Internal method to padd the message

      	According to the standard, the message must
      	be padded to an even 512 bits. The first 
      	padding bit must be a '1'.  The last 64	bits 
      	represent the length of the original message.
      	All bits in between should be 0.
      	This function will pad the message according 
      	to those rules by filling the Message_Block array
      	accordingly.  It will also call the 
      	ProcessMessageBlock function provided appropriately.
      	When it returns, it can be assumed that the message
      	digest has been computed.

  @param	context The context to padd


</member>
        <member name="T:SHA1">
  @brief 	This class represents the implementation of 
   		the sha1 algorithm.

   		Basically the class provides three public member-functions
   		to create a hash:  SHA1Reset(), SHA1Input() and SHA1Result().
   		If you want to create a hash based on a string or file quickly
   		you should use the sha1wrapper class instead of SHA1.

</member>
        <member name="F:HL_SHA1_CTX.Corrupted">
Is the message digest corrupted? 
</member>
        <member name="F:HL_SHA1_CTX.Computed">
Is the digest computed? 
</member>
        <member name="F:HL_SHA1_CTX.Message_Block">
512-bit message blocks 
</member>
        <member name="F:HL_SHA1_CTX.Message_Block_Index">
Index into message block array 
</member>
        <member name="F:HL_SHA1_CTX.Length_High">
Message length in bits 
</member>
        <member name="F:HL_SHA1_CTX.Length_Low">
Message length in bits 
</member>
        <member name="F:HL_SHA1_CTX.Intermediate_Hash">
Message Digest 
</member>
        <member name="T:HL_SHA1_CTX">
@brief this struct represents a SHA1-hash context.

</member>
        <member name="D:hl_uint64">
at least 8 Byte

</member>
        <member name="D:hl_uint32">
at least 4 Byte

</member>
        <member name="D:hl_uint16">
at least 2 Byte

</member>
        <member name="D:hl_uint8">
@file 	hl_sha1.h
@brief	This file contains the declaration of the SHA1 class
@date 	Mo 17 Sep 2007

exactly 1 Byte

</member>
        <member name="M:Core.ConvertPose(Core.cPose&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert double pose to float pose.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SetInsertAfterTakeID(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the TakeID to insert after when creating new takes.  If invalid, will add to end of take list.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.GenerateUniqueSessionName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Create a session name that is currently unique among sessions, and a legal session name
that can be represented on the file system.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SelectedTakes(std.vector&lt;Core.cUID&gt;*)">
            <summary>Convenience method to retrieve the composite list of ID's of selected takes across all sessions.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SeedTake">
            <summary>
Access the "seed" take that is used as the master when populating a new take for recording.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.FindTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Search among all sessions, starting with the current session, to locate the take with the given
ID.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.FindTake(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Search to find a take with the given name that belongs to the session with the given name.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.FindTake(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Search among all sessions, starting with the current session, to locate the take with the given
label.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.CopyTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Copies the take with the given ID from one session to another.</summary>
            <returns>True if the take was found and copied.</returns>
        </member>
        <member name="M:MoCapCore.cTakeManager.MoveTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves the take with the given ID from one session to another.</summary>
            <returns>True if the take was found and moved.</returns>
        </member>
        <member name="M:MoCapCore.cTakeManager.RemoveTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary>
Search among all sessions, starting with the current session, and attempt to find and remove
the take with the given ID.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SetEditableCurrentTake">
            <summary>
Attempts to set the current take to the non-seed take that was last current. If a valid
choice can't be found, the current take is set to the seed take and false is returned.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SetCurrentTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Search among all sessions to locate the take with the given ID, setting it as the current take if found.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SetCurrentTake(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Search among all sessions, starting with the current session, to locate the take with the given
label, setting it as the current take if found.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.CurrentTake">
            <summary>convenience method for retrieving the current take from the current session.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.PopulateEmptyTake">
            <summary>
Use the current suggested take name to either locate an existing (empty) take or create a new take.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.AddTake(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Convenience method for adding a new take to the current session. The given suggested take
name is used as the seed for the name of the new take, but the caller should query the Name property
of the take that is returned to get the final name.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SuggestedTakeName">
            <summary>Retrieve the current suggested take name.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SetSuggestedTakeName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the suggested name to use for the next new take. The name may be augmented to make it
unique before actually creating a take.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.NewSessionDirectory">
            <summary>
Get the directory that new sessions will be created in, including a trailing path delimiter.
All path delimiters will be appropriate for the platform (e.g. "/" for Linux, "\" for Windows).
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SetNewSessionDirectory(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the directory where new sessions will be created. The directory is created if it does not exist.
</summary>
            <returns>False if the directory does not exist and cannot be created.</returns>
        </member>
        <member name="M:MoCapCore.cTakeManager.SessionByIndex(System.UInt32)">
            <summary>Get a session by index. Returns the default session if index is out of range.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SessionCount">
            <summary>Get the number of available sessions.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.CurrentSession">
            <summary>Get the current session.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.FindSession(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the session with the given path.</summary>
            <returns>The session, if found. NULL otherwise.</returns>
        </member>
        <member name="M:MoCapCore.cTakeManager.FindSession(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the session with the given name.</summary>
            <returns>The session, if found. NULL otherwise.</returns>
        </member>
        <member name="M:MoCapCore.cTakeManager.FindSession(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the session with the given ID.</summary>
            <returns>The session, if found. NULL otherwise.</returns>
        </member>
        <member name="M:MoCapCore.cTakeManager.SetCurrentSession(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the current session by session ID. The active take within the session will also be
set as the active take if the active session is changed through this call.
</summary>
            <returns>True if the session was found and set current.</returns>
        </member>
        <member name="M:MoCapCore.cTakeManager.RemoveSession(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Remove the session with the given ID. Sessions that still contain takes cannot be deleted
until all takes have either been moved to another session, or removed from the session. At
least one session must always exist, so the last session may not be deleted. Use Clear() to
remove all current sessions and reset to a fresh state.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.AddSession(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary>
Add a new session with the given name. The session will be created if it does not already
exist, or just returned if it does. This implies that session names must be unique.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.IsDirty">
            <summary>Returns true if any session or takes have changed since last save/load.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SaveDirtyTakes">
            <summary>Save any unsaved or changed (dirty) takes.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.ResumeNotifications">
            <summary>Resume notifications and emit any notifications that accrued since suspended.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.SuspendNotifications">
            <summary>Suspend all notifications and start keeping track of which ones need to fire.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.Empty">
            <summary>Returns true if there are no available takes in any sessions.</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.Clear(System.Boolean)">
            <summary>
Clears all sessions and takes. If createDefaultSession is true, a new default session will be
created during clearing, which is usually what you want. Only those that will be immediately adding
at least one session should consider calling this method with createDefaultSession set to false.
</summary>
        </member>
        <member name="M:MoCapCore.cTakeManager.#ctor(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIStreamsManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cSharedPtr&lt;MoCapCore.cINodeFactoryWarehouse&gt;,Core.cSharedPtr&lt;Core.cICameraFrameFactory&gt;)">
            <summary>Create a new TakeManager. Ownership of the take factory is transfered to this object.</summary>
        </member>
        <member name="T:MoCapCore.cTakeManager">
            <summary>
A class for managing sessions, take loading, session and take creation, and take application.
</summary>
        </member>
        <member name="M:MoCapCore.cITakeManagerObserver.OnSelectedTakeListChanged(MoCapCore.cTakeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the list of selected takes changed.</summary>
        </member>
        <member name="M:MoCapCore.cITakeManagerObserver.OnSuggestedTakeNameChanged(MoCapCore.cTakeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called anytime the suggested take name is altered.</summary>
        </member>
        <member name="M:MoCapCore.cITakeManagerObserver.OnSessionListChanged(MoCapCore.cTakeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called after sessions are added to or removed from the loaded sessions list.</summary>
        </member>
        <member name="M:MoCapCore.cITakeManagerObserver.OnTakeListChanged(MoCapCore.cTakeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called after takes are added to or removed from the loaded takes list.</summary>
        </member>
        <member name="M:MoCapCore.cITakeManagerObserver.OnCurrentSessionChanged(MoCapCore.cTakeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the current session has been swapped out.</summary>
        </member>
        <member name="M:MoCapCore.cITakeManagerObserver.OnCurrentTakeChanged(MoCapCore.cTakeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the current take has been swapped out.</summary>
        </member>
        <member name="M:MoCapCore.cITakeManagerObserver.OnCurrentTakeChanging(MoCapCore.cTakeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the current take is about to change.</summary>
        </member>
        <member name="M:MoCapCore.cSession.FindUniqueTakeName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find a take name that is currently unique among takes in the session and on disk. The name will
use the given name as a seed starting point and append a suffix if needed to make it unique.
</summary>
        </member>
        <member name="M:MoCapCore.cSession.MarkClean">
            <summary>Clear the dirty flag after a file load/save.</summary>
        </member>
        <member name="M:MoCapCore.cSession.SetPath(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Internal use only - Set the path for the session.</summary>
        </member>
        <member name="M:MoCapCore.cSession.IsDirty">
            <summary>Returns true if any of the contained takes is dirty.</summary>
        </member>
        <member name="M:MoCapCore.cSession.Empty">
            <summary>Returns true if no data (takes) are present.</summary>
        </member>
        <member name="M:MoCapCore.cSession.UsingSeedTake">
            <summary>Returns true if the dummy take is the active take.</summary>
        </member>
        <member name="M:MoCapCore.cSession.SelectedTakes(std.vector&lt;Core.cUID&gt;*)">
            <summary>Retrieve any selected takes.</summary>
        </member>
        <member name="M:MoCapCore.cSession.TakeByIndex(System.UInt32)">
            <summary>Get a take by index, or the dummy take if index is out of range.</summary>
        </member>
        <member name="M:MoCapCore.cSession.TakeCount">
            <summary>Get the number of takes.</summary>
        </member>
        <member name="M:MoCapCore.cSession.FindEmptyTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Attempts to find an empty take in the session, starting at the take whose iD is given. Returns
NULL if none found.
</summary>
        </member>
        <member name="M:MoCapCore.cSession.FindEmptyTake(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*)">
            <summary>
Finds an empty take with the proposed name, or applies the following criteria to find an existing take
with a modified name.
 * Currently active take is empty take, given name is same name - ok use it (do not create new take)
 * Currently active take is empty take, text box has different name - create new take with given name (autogen if empty)
 * Currently active take is non-empty take - name is same name - create new take with autogen name
 * Currently active take is non-empty take - name is different name - create new take with given name
</summary>
            <returns>The existing take, if an appropriate choice is found. If an existing take is not found, the ioProposedName
parameter is adjusted to an acceptable name for a new take if the caller chooses to create one.</returns>
        </member>
        <member name="M:MoCapCore.cSession.FindTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the first take in the list with the given ID.</summary>
            <returns>The take with the given ID, or NULL if none found.</returns>
        </member>
        <member name="M:MoCapCore.cSession.FindTake(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the first take in the list with the given label. Labels are not required to be unique.</summary>
            <returns>The take with the given label, or NULL if none found.</returns>
        </member>
        <member name="M:MoCapCore.cSession.CurrentTake">
            <summary>Get the current take. This may be a dummy (but valid) take if no takes have been added.</summary>
        </member>
        <member name="M:MoCapCore.cSession.ID">
            <summary>Get the unique ID for this session.</summary>
        </member>
        <member name="M:MoCapCore.cSession.Path">
            <summary>Get the full path to the session folder.</summary>
        </member>
        <member name="M:MoCapCore.cSession.Name">
            <summary>Get the name of this session (equivalent to the session folder name).</summary>
        </member>
        <member name="M:MoCapCore.cSession.ClearSelection">
            <summary>De-selects any selected takes.</summary>
        </member>
        <member name="M:MoCapCore.cSession.Clear">
            <summary>Removes all takes except the seed/dummy take.</summary>
        </member>
        <member name="M:MoCapCore.cSession.SetEditableCurrentTake">
            <summary>
Attempts to set the current take to the non-seed take that was last current. If a valid
choice can't be found, the current take is set to the seed take and false is returned.
</summary>
        </member>
        <member name="M:MoCapCore.cSession.SetCurrentTake(System.UInt32)">
            <summary>
Attempts to set the current take to the take at the given index in the current session.
</summary>
            <returns>True if the take was found and set current.</returns>
        </member>
        <member name="M:MoCapCore.cSession.SetCurrentTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the current take by take ID.</summary>
            <returns>True if the take was found and set current.</returns>
        </member>
        <member name="M:MoCapCore.cSession.SetCurrentTake(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Try to locate and set current the take with the given label. Labels are not required to be unique,
so this method sets current the first take found by this label.
</summary>
            <returns>True if the take was found and set current.</returns>
        </member>
        <member name="M:MoCapCore.cSession.GenerateTakeLabel">
            <summary>Generate a unique take label within this session.</summary>
        </member>
        <member name="M:MoCapCore.cSession.MoveTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cSession*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves the take with the given index from the given session into this one.</summary>
            <returns>True if the take was found and moved.</returns>
        </member>
        <member name="M:MoCapCore.cSession.RemoveTake(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary>Remove the take with the given ID.</summary>
            <returns>True if the take was found and removed.</returns>
        </member>
        <member name="M:MoCapCore.cSession.AddTake(MoCapCore.cTake*,System.Boolean)">
            <summary>Add the given take.</summary>
        </member>
        <member name="M:MoCapCore.cSession.SetName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the name (which also sets the session folder name). Setting this value will cause
the session folder on disk to be renamed as well.
</summary>
        </member>
        <member name="M:MoCapCore.cSession.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cTake*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Create a new session.</summary>
            <param name="requestedName">
Try to use this name for the new session. The system will attempt to use this name first,
then will hunt for a similar unique name if makeUnique is true. If no reasonable name can be
found then the name is set to blank.
</param>
        </member>
        <member name="T:MoCapCore.cSession">
            <summary>
Owns all takes within a session.
</summary>
        </member>
        <member name="M:MoCapCore.cISessionObserver.OnSelectedTakeListChanged(MoCapCore.cSession!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the list of selected takes in the session changes.</summary>
        </member>
        <member name="M:MoCapCore.cISessionObserver.OnTakeListChanged(MoCapCore.cSession!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when takes are added or removed from the takes list.</summary>
        </member>
        <member name="M:MoCapCore.cISessionObserver.OnCurrentTakeChanged(MoCapCore.cSession!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the current take is swapped out.</summary>
        </member>
        <member name="M:MoCapCore.cISessionObserver.OnCurrentTakeChanging(MoCapCore.cSession!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called just prior to swapping out the current take.</summary>
        </member>
        <member name="M:MoCapCore.cISessionObserver.OnNameChanged(MoCapCore.cSession!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the session name changes.</summary>
        </member>
        <member name="M:MoCapCore.cTake.ResolveDuplicateLegacyIDs">
            <summary>If there are duplicate legacy IDs, assign unique ones.</summary>
        </member>
        <member name="M:MoCapCore.cTake.LoadData(MoCapCore.cIDataStreamWarehouse*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Load take data from the given (already open) stream warehouse.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SaveData(MoCapCore.cIDataStreamWarehouse*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Save take data (nodes and calibration). Node animation data will only be available if the
take is open.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.MarkDirty">
            <summary>Mark the take as dirty and notify observers.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetFrameTime(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the master frame rate for this take.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetSession(MoCapCore.cSession!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the session this instance is attached to. Used to move takes between sessions.</summary>
        </member>
        <member name="M:MoCapCore.cTake.DefaultFileExtension">
            <summary>Returns the file extension to use when loading/saving (without the '.').</summary>
        </member>
        <member name="M:MoCapCore.cTake.IsOpen">
            <summary>Returns true if the take is fully loaded from disk. Will be false if only meta-data is loaded.</summary>
        </member>
        <member name="M:MoCapCore.cTake.IsDirty">
            <summary>Returns true if data has changed since last save, or the take has not been saved.</summary>
        </member>
        <member name="M:MoCapCore.cTake.FileExtension">
            <summary>Get the file extension used when loading/saving.</summary>
        </member>
        <member name="M:MoCapCore.cTake.FileName">
            <summary>Get the full filename (with path and extension) to use for this take.</summary>
        </member>
        <member name="M:MoCapCore.cTake.Close(System.Boolean)">
            <summary>Close the take, but retain meta-data. Saves if saveIfNeeded is true and IsDirty is true.</summary>
        </member>
        <member name="M:MoCapCore.cTake.Open">
            <summary>Load from the filename given by FileName().</summary>
        </member>
        <member name="M:MoCapCore.cTake.SaveTo(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIDataStreamWarehouse*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Save to an arbitrary filename. Does not change name or filename. The passed stream
warehouse must not be open and will only be used if the requested filename does not match
the current take filename.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.Save">
            <summary>Save to our persistence stream if data has changed.</summary>
        </member>
        <member name="M:MoCapCore.cTake.ToTime(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Convert a frame to a time, using the current time and frame range.</summary>
        </member>
        <member name="M:MoCapCore.cTake.ToTimeCode(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Convert a frame number to timecode, if available. The returned timecode structure
will have its Invalid flag set if no timecode is available.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.FractionalFrame(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert a time to a fractional frame value based on the current take time range.</summary>
        </member>
        <member name="M:MoCapCore.cTake.AssetList">
            <summary>A string representing the names of the assets in the take.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetCaptureStartTime(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set captured frame rate</summary>
        </member>
        <member name="M:MoCapCore.cTake.CaptureStartTime">
            <summary>Retrieve the time (date/time) when the take was captured.</summary>
        </member>
        <member name="M:MoCapCore.cTake.HasGaps">
            <summary>
Determines whether there are any gaps in trajectorized data. Will be false if data has not been
trajectorized yet.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.Best">
            <summary>Get best.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetBest(System.Boolean)">
            <summary>Set best.</summary>
        </member>
        <member name="M:MoCapCore.cTake.Notes">
            <summary>Get user notes.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetNotes(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set user notes.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetStaleDataType(MoCapCore.cTake.eDataType,System.Boolean)">
            <summary>Set a type of data's stale status.</summary>
        </member>
        <member name="M:MoCapCore.cTake.StaleDataTypes">
            <summary>Retrieve which types of data are stale.</summary>
        </member>
        <member name="M:MoCapCore.cTake.PlaybackDataType">
            <summary>Retrieves which type of data to use for playback.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetPlaybackDataType(MoCapCore.cTake.eDataType)">
            <summary>Sets which types of data to use for playback. Update to a valid type if specified type is not valid/present.</summary>
        </member>
        <member name="M:MoCapCore.cTake.HasData(System.Int32)">
            <summary>
Returns true if data of the requested type is present. If AllData is requested, true will
be returned if any data types are present.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.DataTypes">
            <summary>Retrieve which types of data are present.</summary>
        </member>
        <member name="M:MoCapCore.cTake.FullTimeRange">
            <summary>Retrieves the full time range of all 2D/3D data.</summary>
        </member>
        <member name="M:MoCapCore.cTake.FullFrameRange">
            <summary>Retrieves the full frame range of all 2D/3D data.</summary>
        </member>
        <member name="M:MoCapCore.cTake.FrameRate">
            <summary>Returns the master frame rate (in frames per second).</summary>
        </member>
        <member name="M:MoCapCore.cTake.FrameTime">
            <summary>Returns the master frame time (in seconds per frame).</summary>
        </member>
        <member name="M:MoCapCore.cTake.FindTrackIndex(MoCapCore.cMultiDeviceTrack!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Attempt to find the index of the given track. Returns -1 if not found.</summary>
        </member>
        <member name="M:MoCapCore.cTake.Track(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>Retrieve the track with the given name, or NULL if none.</summary>
        </member>
        <member name="M:MoCapCore.cTake.Track(System.UInt32)">
            <summary>Retrieve the track at the given index, or NULL if none.</summary>
        </member>
        <member name="M:MoCapCore.cTake.TrackCount">
            <summary>Returns the current track count.</summary>
        </member>
        <member name="M:MoCapCore.cTake.RemoveTrack(System.UInt32)">
            <summary>Deletes the track at the given index, if it exists.</summary>
        </member>
        <member name="M:MoCapCore.cTake.AddTrack(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>Allocates a new track and returns the new instance. Ownership remains with the take.</summary>
        </member>
        <member name="M:MoCapCore.cTake.Selected">
            <summary>Retrieve the selection state.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetSelected(System.Boolean)">
            <summary>Set the selection state.</summary>
        </member>
        <member name="M:MoCapCore.cTake.HasAnimation">
            <summary>Returns true if there is no time-series data present.</summary>
        </member>
        <member name="M:MoCapCore.cTake.Empty">
            <summary>Returns true if there is are no nodes, and no time-series data present.</summary>
        </member>
        <member name="M:MoCapCore.cTake.CameraCalibration">
            <summary>Access to the camera calibration.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetCameraGroups(std.vector&lt;MoCapCore.cReconstructionProperties**&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set just the camera groups portion of the calibration. Does proper sensing on whether anything
has actually changed and notifies on change. Ownership of the groups passed in transfers here.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetCameraCalibration(MoCapCore.cCameraCalibration*)">
            <summary>Set the calibration. Ownership of the passed pointer is transferred to this object.</summary>
        </member>
        <member name="M:MoCapCore.cTake.DataWarehouse">
            <summary>Access to the contained DataWarehouse.</summary>
        </member>
        <member name="M:MoCapCore.cTake.NodeWarehouse">
            <summary>Access to the contained NodeWarehouse.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SessionID">
            <summary>The session ID for the session that contains this take.</summary>
        </member>
        <member name="M:MoCapCore.cTake.ID">
            <summary>Unique ID.</summary>
        </member>
        <member name="M:MoCapCore.cTake.Name">
            <summary>Get the human-readable label to use for this take.</summary>
        </member>
        <member name="M:MoCapCore.cTake.ClearAnimation(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Clear all animation data over the given range.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.Clear">
            <summary>Clear all nodes, calibration info, etc. and reset to a default state.</summary>
        </member>
        <member name="M:MoCapCore.cTake.SetName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the name. Since names are the same as filenames and takes are stored in session folders,
cTake names must be unique within a session. Responsibility for this is delegated to the TakeManager.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.FinishEdit">
            <summary>Finish an editing operation and send out any missed notifications.</summary>
        </member>
        <member name="M:MoCapCore.cTake.StartEdit">
            <summary>Suspend notifications so that a complex operation can be performed on the take.</summary>
        </member>
        <member name="M:MoCapCore.cTake.CopyFrom(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Copies calibration and node warehouse from the given take and replaces them on this instance.
This method may only be used to populate an empty take.
<param name="excludeInactiveNodes">If true, inactive nodes will not be cloned in the copy</param></summary>
        </member>
        <member name="M:MoCapCore.cTake.Clone(MoCapCore.cSession!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIDataStreamWarehouse*,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Creates a clone of this instance with a new unique ID. A new cIDataStreamWarehouse must also be passed
in since there is no sharing of those instances.
<param name="excludeInactiveNodes">If true, inactive nodes will not be cloned in the copy</param></summary>
        </member>
        <member name="M:MoCapCore.cTake.Initialize(MoCapCore.cSession!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIDataStreamWarehouse*,Core.cSharedPtr&lt;MoCapCore.cINodeFactoryWarehouse&gt;,Core.cSharedPtr&lt;Core.cICameraFrameFactory&gt;,System.Boolean,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Call to initialize and associate with an existing stream on disk. Ownership of the cIDataStreamWarehouse
instance is transferred here.
</summary>
        </member>
        <member name="M:MoCapCore.cTake.Initialize(Core.cSharedPtr&lt;MoCapCore.cINodeFactoryWarehouse&gt;,Core.cSharedPtr&lt;Core.cICameraFrameFactory&gt;)">
            <summary>Call to initialize a new instance.</summary>
        </member>
        <member name="T:MoCapCore.cTake">
            <summary>
Owns all animation data for a take, as well as setup info for cameras (calibration, etc.).
This class supports deferred loading and serialization of a take.
</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnOpenedChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the open state has changed.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnDirtyChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the dirty (saved) state has changed.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnPlaybackTypeChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the active playback type changed.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnDataTypesChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the types of data available have changed.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnReconstructionSettingsChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the reconstruction settings change.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnCalibrationChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the camera calibration changes.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnTrackListChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the track list changes.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnFrameRangeChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the extents of the time range for this take change.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnSelectedChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the selection state has changed.</summary>
        </member>
        <member name="M:MoCapCore.cITakeObserver.OnNameChanged(MoCapCore.cTake!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the name (thus the filename) associated with the take is changed.</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.ComposeUniqueFilename(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Given a filename, compose a filename that will be unique at the location the filename specifies.
The returned filename will be unique without regard for the file extension specified (i.e. if a file on
disk shares the same base filename as the one given, a new unique filename will be generated).
</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.EnumerateFilenames(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;*)">
            <summary>Get all filenames in specified folder with specified extension. Path must include trailing slash.</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.IsVolume(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns true if the given string is valid syntax for a volume on the host environment.
Does not test whether the volume exists.
</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.PathSeparator">
            <summary>Get the path separator used on this platform.</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.MakeDirectory(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Create a folder at the given path.</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.DirectoryExists(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given folder exists on disk.</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.FileExists(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given file exists on disk.</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.IsValidFilename(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns false if the file name contains invalid characters.</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.MakeValidFilename(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Scrubs the given string and replaces any invalid filename characters with an underscore.
The given string should not be a full path, but just the filename with or without a file
extension.
</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.Delete(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Deletes a file on disk, if it exists and can be deleted.</summary>
        </member>
        <member name="M:MoCapCore.FileHelpers.Copy(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Copy the file or folder at the given path to the given target path.</summary>
            <param name="overwrite">If true and a file of the same name exists at the target location, it will be overwritten.</param>
        </member>
        <member name="M:MoCapCore.FileHelpers.Move(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Move the file or folder at the given path and name to the target path.</summary>
        </member>
        <member name="T:MoCapCore.FileHelpers">
            <summary>A collection of platform-neutral file and folder management routines.</summary>
        </member>
        <member name="M:Core.cLabel.EncodeUID(Core.cLabel.eEntityType,System.UInt32,System.UInt32)">
            <summary>Convert a legacy ID to a cUID, given an entity type and member index.</summary>
        </member>
        <member name="M:Core.cLabel.FromLegacyID(Core.cLabel.eEntityType,System.Int32)">
            <summary>Convert a legacy ID to a cUID, given an entity type.</summary>
        </member>
        <member name="M:Core.cLabel.ToLegacyID(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert to a legacy ID (int) from a cUID.</summary>
        </member>
        <member name="M:Core.cLabel.DecodeUID(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cLabel.eEntityType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Decodes a cUID into component parts. If the given cUID is not a label, returns false.</summary>
            <param name="uid">Input cUID to be decoded.</param>
            <param name="type">Output entity type decoded from cUID.</param>
            <param name="entityID">Output entity ID decoded from cUID.</param>
            <param name="memberID">Output member ID decoded from cUID.</param>
        </member>
        <member name="M:Core.cLabel.IsLabel(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Returns true if the passed cUID is a valid label.</summary>
        </member>
        <member name="M:Core.cLabel.EncodedUID">
            <summary>Returns the encoded ID based on the various contained types and indices.</summary>
        </member>
        <member name="M:Core.cLabel.MemberID">
            <summary>The index of the element within the entity that this label applies to.</summary>
        </member>
        <member name="M:Core.cLabel.EntityID">
            <summary>Which entity in the list of available entities that this label applies to.</summary>
        </member>
        <member name="M:Core.cLabel.Type">
            <summary>Entity type.</summary>
        </member>
        <member name="M:Core.cLabel.Name">
            <summary>The fully qualified name to use to identify this label.</summary>
        </member>
        <member name="M:Core.cLabel.MemberName">
            <summary>Human-readable string identifying the member of the entity that this label applies to.</summary>
        </member>
        <member name="M:Core.cLabel.SetMemberName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set member name.</summary>
        </member>
        <member name="M:Core.cLabel.EntityName">
            <summary>Human-readable string identifying the entity this label applies to.</summary>
        </member>
        <member name="M:Core.cLabel.SetNames(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the names associated with the label.</summary>
        </member>
        <member name="M:Core.cLabel.SetName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the name associated with the label.</summary>
        </member>
        <member name="M:Core.cTimeRange.Intersects(Core.cTimeRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns true if the given range intersects this one. Intersection will be true even if only the
edges coincide.
</summary>
        </member>
        <member name="M:Core.cTimeRange.Contains(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
            <summary>Returns true if this range includes the given time.</summary>
        </member>
        <member name="M:Core.cTimeRange.Contains(Core.cTimeRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if this range completely contains the given range.</summary>
        </member>
        <member name="M:Core.cTimeRange.Length">
            <summary>Returns the length (end time minus start time) of the range.</summary>
        </member>
        <member name="M:Core.cTimeRange.Center">
            <summary>Get the center point of the range.</summary>
        </member>
        <member name="M:Core.cTimeRange.End">
            <summary>Get the range start time.</summary>
        </member>
        <member name="M:Core.cTimeRange.Start">
            <summary>Get the range start time.</summary>
        </member>
        <member name="M:Core.cTimeRange.Empty">
            <summary>Returns true if the time range is empty (i.e. start time &gt; end time).</summary>
        </member>
        <member name="M:Core.cTimeRange.Intersect(Core.cTimeRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Intersects this range with the one given.</summary>
        </member>
        <member name="M:Core.cTimeRange.Clear">
            <summary>Clears the range to an empty range.</summary>
        </member>
        <member name="M:Core.cTimeRange.SetEnd(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the end time of the range. If the range was previously empty, both start and end times
will be set to the given time.
</summary>
        </member>
        <member name="M:Core.cTimeRange.SetStart(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the start time of the range. If the range was previously empty, both start and end times
will be set to the given time.
</summary>
        </member>
        <member name="T:Core.cTimeRange">
            <summary>Represents a range of time.</summary>
        </member>
        <member name="M:Core.cFilename.SetSuffixFormat(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Suffix format specifier:
[suffix root (required)][suffix value format specifier][suffix suffix (optional)]
</summary>
        </member>
        <member name="M:Core.cFilename.ConvertSeparators(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts path separators from the standard '/' to whatever the platform separator is.</summary>
        </member>
        <member name="M:Core.cFilename.AppendPath(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Appends the given path to this one. Both this and the given item must be paths.</summary>
        </member>
        <member name="M:Core.cFilename.Append(Core.cFilename!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Appends the given filename to this path. Given filename must be relative, and any existing
filename and extension will be overwritten with the incoming filename if successful.
</summary>
        </member>
        <member name="M:Core.cFilename.IsPath">
            <summary>Returns true if the contained information is just a path, not a full filename.</summary>
        </member>
        <member name="M:Core.cFilename.IsRelative">
            <summary>Returns true if the contained filename/path is relative (i.e. not absolute)</summary>
        </member>
        <member name="M:Core.cFilename.IsFilename">
            <summary>Returns true if this is a filename (with extension).</summary>
        </member>
        <member name="M:Core.cFilename.Delete">
            <summary>Attempt to delete any associated real file/folder that exists on disk.</summary>
        </member>
        <member name="M:Core.cFilename.Exists(System.Boolean)">
            <summary>Returns true if the file or folder exists on disk.</summary>
        </member>
        <member name="M:Core.cFilename.FullFilename">
            <summary>Get the full filename, including volume, path, and extension, if any.</summary>
        </member>
        <member name="M:Core.cFilename.FullName">
            <summary>Get the filename with no path information, but do include the extension, if any.</summary>
        </member>
        <member name="M:Core.cFilename.ExtensionMatches(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Compares extension with the given string and returns true if there is a match.
The passed string should not contain the period used to designate it as a file extension
</summary>
        </member>
        <member name="M:Core.cFilename.Extension">
            <summary>Get the file extension, if any.</summary>
        </member>
        <member name="M:Core.cFilename.Name">
            <summary>Base name (without any path or extension information).</summary>
        </member>
        <member name="M:Core.cFilename.FullPath">
            <summary>Get the full path with drive/volume designation, including a trailing delimiter.</summary>
        </member>
        <member name="M:Core.cFilename.PathParts">
            <summary>Get the parts of the path as a vector of strings.</summary>
        </member>
        <member name="M:Core.cFilename.IncrementName">
            <summary>
Increments the name portion of the filename to the next incremental value using the given format
statement.
Name format:
[name][suffix root (required)][suffix value][suffix suffix (optional)]
</summary>
        </member>
        <member name="M:Core.cFilename.StripExtension">
            <summary>Strip off any extension that is present.</summary>
        </member>
        <member name="M:Core.cFilename.StripName">
            <summary>Strip off any filename and extension that are present.</summary>
        </member>
        <member name="M:Core.cFilename.StripVolume">
            <summary>Strip off any volume designation that is present.</summary>
        </member>
        <member name="M:Core.cFilename.PopPathPart">
            <summary>Pop one directory off the end of the path.</summary>
        </member>
        <member name="M:Core.cFilename.Path">
            <summary>Get the file path, excluding drive/volume designation, but with a trailing delimiter.</summary>
        </member>
        <member name="M:Core.cFilename.Volume">
            <summary>Drive/volume/server designation, including trailing path delimiter (e.g. "C:/", "//Data/", "/")</summary>
        </member>
        <member name="M:Core.cFilename.Empty">
            <summary>Returns true if all components of the filename are empty.</summary>
        </member>
        <member name="M:Core.cFilename.Clear">
            <summary>Clears all data and resets to default values.</summary>
        </member>
        <member name="M:Core.cFilename.SetExtension(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the extension portion of the filename. Fails if the contained path is not a filename.</summary>
        </member>
        <member name="M:Core.cFilename.SetName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary>
Set just the Name portion of the filename (without extension). Passed string should have no path
separators. If renameOnDisk is true and the filename exists on disk, the file will be renamed
to match the given name. Returns false if the file could not be found or renamed when a rename
was requested.
</summary>
        </member>
        <member name="M:Core.cFilename.SetValue(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Parse a new filename.</summary>
        </member>
        <member name="T:Core.cFilename">
            <summary>Manages convenient ways to interact with filenames.</summary>
        </member>
        <member name="F:MoCapCore.cTimeManager.kDefaultTimeStep">
            <summary>The default time step applied at creation, and usable for resetting to default.</summary>
        </member>
        <member name="F:MoCapCore.cTimeManager.kDefaultAnimationRange">
            <summary>The default animation range applied at creation, and usable for resetting to default.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.VisibleRange">
            <summary>Get the current play range.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.SetVisibleRange(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the "visible" time range, which is always a subset of the full animation range.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.HasSelectedRanges">
            <summary>Returns true if there is a non-empty time selection.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.SelectedRanges">
            <summary>Returns the number of (disconnected) selected frame ranges.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.ClearSelectedRanges">
            <summary>Clears all frame selections.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.SelectRanges(Core.cFrameRangeSet!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replace any current range selection with the given range set.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.SelectRange(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Add the given range to the currently selected frame range(s).</summary>
            <param name="exclusive">If true, any existing time selection will be replaced by the one given.</param>
        </member>
        <member name="M:MoCapCore.cTimeManager.PlaySpeed">
            <summary>Returns the time scaling in effect during playback.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.FrameRate">
            <summary>Get the current frame rate (in frames/sec), based on current time step.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.TimeStep">
            <summary>Returns the current frame time step (in secs) used during playback.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.Looping">
            <summary>Returns true if looping is active.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.IsPlaybackMode(MoCapCore.cTimeManager.ERunMode)">
            <summary>Returns true if the given mode is a "playback" mode.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.IsLiveMode(MoCapCore.cTimeManager.ERunMode)">
            <summary>Returns true if the given mode is a "live" mode.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.IsLive">
            <summary>Returns true if we are in a live mode.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.IsPaused">
            <summary>Returns true if playback is paused.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.IsPlaying">
            <summary>Returns true if playback is active (not real-time, paused, or recording).</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.IsRecording">
            <summary>Returns true if recording is active.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.CanGoLive">
            <summary>Returns true if the system can go live and/or record.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.PlayRange">
            <summary>Get the current play range.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.AnimationRange">
            <summary>Get the current valid animation range.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.CurrentFrame">
            <summary>Gets the current frame number.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.RunMode">
            <summary>Current run mode.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.SetPlaySpeed(System.Double)">
            <summary>Set the time scaling to use during playback, in the range [0.01, 100.0].</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.SetTimeStep(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the time step (in seconds) between frames when playing back at 100% play speed.</summary>
            <returns>True if the given step size was valid and set.</returns>
        </member>
        <member name="M:MoCapCore.cTimeManager.SetLooping(System.Boolean,System.Boolean)">
            <summary>
Set looping on or off. When looping is on, playback will reset to the other end of the
play range if playback is stepped beyond the end.
</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.SetPlayRange(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Set the valid playback range, which must be a subset of the animation range.</summary>
            <param name="keepTimeInRange">If true, current time will be changed as needed to lie within the new play range.</param>
            <returns>False if the range was already equal to the value passed.</returns>
        </member>
        <member name="M:MoCapCore.cTimeManager.SetAnimationRange(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Set the full valid range for any playback, time selection, etc.</summary>
            <param name="keepTimeInRange">If true, current time will be changed as needed to lie within the new range.</param>
            <returns>False if the range was already equal to the value passed.</returns>
        </member>
        <member name="M:MoCapCore.cTimeManager.SetParametricTime(System.Double,System.Boolean)">
            <summary>Sets the current time in parametric coordinates (i.e. start = 0.0, end = 1.0).</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.SetCurrentFrame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,System.Boolean)">
            <summary>Set the current time. Run mode status is unaffected.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.GoToEnd">
            <summary>Sets the current time to the end of the current play range.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.GoToStart">
            <summary>Sets the current time to the beginning of the play range.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.Reset(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Resets to initial state, with a given time step and animation range.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.Record">
            <summary>Begin recording.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.Stop">
            <summary>Stop any playback and set run mode to real-time.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.StepBackward(System.UInt32)">
            <summary>Steps playback one frame backward. Stops recording or playback if either is active.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.StepForward(System.UInt32)">
            <summary>Steps playback forward the given number of frames. Stops recording or playback if either is active.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.Pause(System.Boolean)">
            <summary>Pause playback. If goToStart is true, time is also set to the beginning of the play range.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.PlayReverse">
            <summary>
Start playback in reverse. Stops recording if recording is active. During playback,
time gets updated on TimeManager's own thread, and update notifications that go out
do so on that thread.
</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.Play">
            <summary>
Start playback. Stops recording if recording is active. During playback, time gets
updated on TimeManager's own thread, and update notifications that go out do so on
that thread.
</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.ShutDown">
            <summary>Shut the thread down and prepare for tear-down.</summary>
        </member>
        <member name="M:MoCapCore.cTimeManager.StartUp">
            <summary>
Must be called after construction to initialize the frame counter. Should be done toward the 
end of application startup to minimize time change notifications during startup.
</summary>
            <param name="canGoLive">Sets whether live/record modes are available or not.</param>
        </member>
        <member name="M:MoCapCore.cTimeManager.#ctor(System.Boolean)">
            <summary>Create a new instance. There should typically only be one instance of TimeManager.</summary>
            <param name="canGoLive">Sets whether live/record modes are available or not.</param>
        </member>
        <member name="T:MoCapCore.cTimeManager">
            <summary>
A singleton class that manages the playback head, including current time and recording status.
Any objects that rely on knowledge of time, playback status, or recording status should acquire
it from this object.
</summary>
        </member>
        <member name="M:MoCapCore.cITimeManagerObserver.OnSelectedRangesChanged(MoCapCore.cTimeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when selected frame ranges change.</summary>
        </member>
        <member name="M:MoCapCore.cITimeManagerObserver.OnRunModeChanged(MoCapCore.cTimeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>Called when the run mode changes.</summary>
        </member>
        <member name="M:MoCapCore.cITimeManagerObserver.OnRunModeChanging(MoCapCore.cTimeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>Called when the run mode changes.</summary>
        </member>
        <member name="M:MoCapCore.cITimeManagerObserver.OnVisibleRangeChanged(MoCapCore.cTimeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the playback range changes.</summary>
        </member>
        <member name="M:MoCapCore.cITimeManagerObserver.OnPlayRangeChanged(MoCapCore.cTimeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the playback range changes.</summary>
        </member>
        <member name="M:MoCapCore.cITimeManagerObserver.OnAnimationRangeChanged(MoCapCore.cTimeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the valid animation range changes.</summary>
        </member>
        <member name="M:MoCapCore.cITimeManagerObserver.OnTimeStepChanged(MoCapCore.cTimeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the playback frame rate changes.</summary>
        </member>
        <member name="M:MoCapCore.cITimeManagerObserver.OnTimeChanged(MoCapCore.cTimeManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Called when the playback head time changes. Also passes what the time was before this
latest change.
</summary>
        </member>
        <member name="T:MoCapCore.cITimeManagerObserver">
            <summary>
Derive from this class and add yourself as an observer to TimeManager to be notified when changes
occur to TimeManager.
</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.UpdateExtents(System.Int32,Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Update the extents on the range with th given index in the array.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.ConsolidateRanges">
            <summary>Consolidate overlapping ranges and sort them in ascending order.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.TotalFrames">
            <summary>Calculates the total number of frames in the full set of ranges.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Range(System.Int32)">
            <summary>Returns the n'th disjoint range in the set.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.RangeCount">
            <summary>Returns the number of disjoint ranges contained in the set.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Contains(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if this set includes the given frame.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Contains(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if one of the ranges in the set completely contains the given range.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Extents">
            <summary>Returns a frame range with the lowest and highest frames contained in the set of ranges.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Empty">
            <summary>Returns true if there are no contained ranges.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Clear">
            <summary>Clears the list of ranges.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Invert">
            <summary>
Inverts the range set in place. If you invert a range that does not include positive and negative
infinity, the inverted set will extend to those limits.
</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Intersection(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the intersection of the given frame range with the this range set, or an empty frame range
if no intersection.
</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Intersects(Core.cFrameRangeSet!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given range set intersects this set.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Intersects(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given range intersects this set.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Intersect(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets this range set to the intersection with the given range set.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Subtract(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Subtract the given range from the set, if it is included.</summary>
            <returns>True if the set was changed as a result (i.e. the set did include all or part of the given range.</returns>
        </member>
        <member name="M:Core.cFrameRangeSet.AddNoMerge(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Add the given frame range into the set without merging overlapping ranges.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.Add(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Add (union) the given frame range into the set.</summary>
            <returns>True if the set was changed (the given range was not already included).</returns>
        </member>
        <member name="M:Core.cFrameRangeSet.op_Assign(std.vector&lt;Core.cFrameRange&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>The passed set of frame ranges is assumed to be in non-overlapping, always-increasing order.</summary>
        </member>
        <member name="M:Core.cFrameRangeSet.#ctor(std.vector&lt;Core.cFrameRange&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Construct a frame range set from a given array of frame range.</summary>
        </member>
        <member name="T:Core.cFrameRangeSet">
            <summary>
Represents a (non-overlapping) set of frame ranges. Ranges are stored in strictly increasing order of
frame ranges for convenience when using the class.
</summary>
        </member>
        <member name="M:Core.cFrameRange.op_Decrement">
            <summary>Shift the range down by one frame.</summary>
        </member>
        <member name="M:Core.cFrameRange.op_Increment">
            <summary>Shift the range up by one frame.</summary>
        </member>
        <member name="M:Core.cFrameRange.Intersects(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns true if the given range intersects this one. Intersection will be true even if only the
edges coincide.
</summary>
        </member>
        <member name="M:Core.cFrameRange.Contains(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if this range includes the given time.</summary>
        </member>
        <member name="M:Core.cFrameRange.Contains(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if this range completely contains the given range.</summary>
        </member>
        <member name="M:Core.cFrameRange.Length">
            <summary>Returns the length (end time minus start time) of the range.</summary>
        </member>
        <member name="M:Core.cFrameRange.Center">
            <summary>Get the center point of the range.</summary>
        </member>
        <member name="M:Core.cFrameRange.End">
            <summary>Get the range end frame.</summary>
        </member>
        <member name="M:Core.cFrameRange.Start">
            <summary>Get the range start frame.</summary>
        </member>
        <member name="M:Core.cFrameRange.Empty">
            <summary>Returns true if the frame range is empty (i.e. start frame &gt; end frame).</summary>
        </member>
        <member name="M:Core.cFrameRange.Clear">
            <summary>Clears the range to an empty range.</summary>
        </member>
        <member name="M:Core.cFrameRange.Offset(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Offsets the range by the given amount, if the range is not empty.</summary>
        </member>
        <member name="M:Core.cFrameRange.Intersection(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the intersection of this range with the one given.</summary>
        </member>
        <member name="M:Core.cFrameRange.Expand(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Expand the range by the given number of frames at each end. Has no effect if the
range was empty to begin with, or if the given increment is negative.
</summary>
        </member>
        <member name="M:Core.cFrameRange.Intersect(Core.cFrameRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Intersects this range with the one given.</summary>
        </member>
        <member name="M:Core.cFrameRange.SetExtents(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Set both start and end of the range.</summary>
        </member>
        <member name="M:Core.cFrameRange.SetEnd(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Set the end frame of the range. If the range was previously empty, both start and end frames
will be set to the given frame.
</summary>
        </member>
        <member name="M:Core.cFrameRange.SetStart(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Set the start frame of the range. If the range was previously empty, both start and end frames
will be set to the given frame.
</summary>
        </member>
        <member name="T:Core.cFrameRange">
            <summary>Represents a range of time.</summary>
        </member>
        <member name="M:Core.cTime.DateTimeString(System.Boolean)">
            <summary>Generate a string that contains the current local date and time in human-readable format.</summary>
        </member>
        <member name="M:Core.cTime.DateString">
            <summary>Generate a string that contains the current local date in human-readable format.</summary>
        </member>
        <member name="M:Core.cTime.DateTime(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Current local time.</summary>
        </member>
        <member name="M:Core.cTime.InFrames(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculate the time in frames given a frame time interval.</summary>
        </member>
        <member name="M:Core.cTime.Average(Core.cTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculate the average time between this and the given time.</summary>
        </member>
        <member name="M:Core.cTime.HoursMinutesSeconds(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>cTime in hours/minutes/seconds.</summary>
        </member>
        <member name="M:Core.cTime.InSeconds">
            <summary>cTime in seconds only (i.e. hours, minutes, etc. all converted into seconds)</summary>
        </member>
        <member name="M:Core.cTime.SetHoursMinutesSeconds(System.Double,System.Double,System.Double)">
            <summary>Set the time based on real time measures.</summary>
        </member>
        <member name="M:Core.cTime.SetInSeconds(System.Double)">
            <summary>Set the full time based on a number of seconds.</summary>
        </member>
        <member name="M:Core.ThreadHelpers.ThreadID">
            <summary>Returns a unique ID for the calling thread.</summary>
        </member>
        <member name="M:Core.ThreadHelpers.Sleep(System.Int32)">
            <summary>Relinquish the CPU and wait for the given time on the caller's thread.</summary>
        </member>
        <member name="T:Core.ThreadHelpers">
            <summary>A collection of useful thread-related functions.</summary>
        </member>
        <member name="M:Core.cThread.IsSteadyState">
            <summary>Query to determine if thread has been requested to shutdown.</summary>
        </member>
        <member name="M:Core.cThread.Process">
            <summary>
Override this method to define the functionality that should run each time the thread wakes up and runs
either through continuous running, or via a call to RunOnce().
</summary>
        </member>
        <member name="M:Core.cThread.LoopWait">
            <summary>Get the current wiat time between Process() calls when running.</summary>
        </member>
        <member name="M:Core.cThread.Priority">
            <summary>Get the current thread priority.</summary>
        </member>
        <member name="M:Core.cThread.IsRunning">
            <summary>Returns true if the thread is running continuously (i.e. not in RunOnce mode).</summary>
        </member>
        <member name="M:Core.cThread.Stop">
            <summary>Stop the thread (i.e. kill the thread). Run() or RunOnce() can be called after this to restart the thread.</summary>
        </member>
        <member name="M:Core.cThread.Pause">
            <summary>Pause continuous running of the thread. Run() or RunOnce() can be called after this.</summary>
        </member>
        <member name="M:Core.cThread.RunOnce">
            <summary>Run the processing method once (asynchronously) on this thread, then suspend the thread.</summary>
        </member>
        <member name="M:Core.cThread.Run">
            <summary>
Run the processing method continuously until Pause is called or the thread is destroyed.
This method can be called repeatedly. Each time it is called it will execute the Process method
once and continue to run using the current LoopWait after that.
</summary>
        </member>
        <member name="M:Core.cThread.SetLoopWait(System.Int32)">
            <summary>Set the amount of time to wait between calls to Process() when running.</summary>
        </member>
        <member name="M:Core.cThread.SetPriority(Core.cThread.eThreadPriority)">
            <summary>Set the thread priority. May be called at any time.</summary>
        </member>
        <member name="T:Core.cThread">
            <summary>
A platform-neutral thread. Derive from this class and override the Process() method to define functionality
that should run each time the thread wakes up. This class manages a separate thread, but is not thread-safe
so methods on this class should be called from a single thread for each cThread instance.
</summary>
        </member>
        <member name="M:MoCapCore.cINodeFactoryWarehouse.CreateNode(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Start an undo-able edit operation.</summary>
        </member>
        <member name="M:MoCapCore.cINodeFactoryWarehouse.AddFactory(Core.cINodeFactory*)">
            <summary>Add a factory to the warehouse. Ownership is transferred here.</summary>
        </member>
        <member name="T:MoCapCore.cINodeFactoryWarehouse">
            <summary>
Interface class that provides ability to create node instances of named class types.
</summary>
        </member>
        <member name="M:SkeletonSolver.CSkeletonSolver.ProcessTrajectories(System.Int32,SkeletonSolver.CLocalizeLabelHelper*,System.Single,System.Int32,System.Single,System.Boolean,System.Boolean)">
iMaxMissingFrameToConnect:  Labels a marker if there is a candidate within iMaxMissingFrameToConnect frames.
fMaxFrameToFrameDist:       Labels a marker if the distance from the previous frame is less than this value.
</member>
        <member name="M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonListChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the skeleton list changes.</summary>
        </member>
        <member name="T:vrpn_ConnectionManager">
@class vrpn_ConnectionManager
Singleton class that keeps track of all known VRPN connections
and makes sure they're deleted on shutdown.
We make it static to guarantee that the destructor is called
on program close so that the destructors of all the vrpn_Connections
that have been allocated are called so that all open logs are flushed
to disk.  Each connection should add itself to this list in its
constructor and should remove itself from this list in its
destructor.

</member>
        <member name="M:RigidBodySolver.cRigidBody.SetSupplementaryInfo(RigidBodySolver.cRigidBodySolverSupplementaryInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Optional additional system information to improve ray based solving
and determination of proper tracking algorithm based on system config and load.</summary>
        </member>
        <member name="M:RigidBodySolver.cRigidBody.GetMarkerFullName(System.Int32,System.Char*,System.Int32)">
            <summary>Retrieve the fully qualified marker name, including the name of the rigid body that owns it.</summary>
        </member>
        <member name="M:RigidBodySolver.cRigidBodySolver.SetSupplementaryInfo(RigidBodySolver.cRigidBodySolverSupplementaryInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Optional additional system information to improve ray based solving
and determination of proper tracking algorithm based on system config and load.</summary>
        </member>
        <member name="M:RigidBodySolver.cRigidBodySolver.FrameDiscontinuity">
            <summary>When pushing a frame that is not incrementally continuous with previous
frames, call FrameDiscontinuity to allow the solver to continue to solve even
if marker trajectories are broken.</summary>
        </member>
        <member name="M:RigidBodySolver.cRigidBodySolver.AssessRigidBodyConstellation(std.vector&lt;Core.cTMarker&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Assess a list of markers as a possible candidate for a rigid body.  This
will determine if it's a 'good' or 'bad' rigid body based on the marker arrangement</summary>
        </member>
        <member name="M:RigidBodySolver.cRigidBodySolver.FindRigidBodyIndex(RigidBodySolver.cRigidBody!System.Runtime.CompilerServices.IsConst*)">
            <summary>Find the index of the given rigid body in the rigid body list.</summary>
            <returns>The index if found, or -1 otherwise.</returns>
        </member>
        <member name="M:RigidBodySolver.cRigidBodySolver.Clone">
            <summary>Clone this instance and include shared references to any contained rigid bodies.</summary>
        </member>
        <member name="M:Core.Vector4.dotProduct(Core.Vector4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates the dot (scalar) product of this vector with another.
    @param
    vec Vector with which to calculate the dot product (together
    with this one).
    @returns
    A float representing the dot product value.

</member>
        <member name="M:Core.Vector4.op_Assign(Core.Vector4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assigns the value of the other vector.
    @param
    rkVector The other vector

</member>
        <member name="M:Core.Vector4.ptr">
Pointer accessor for direct copying

Pointer accessor for direct copying
</member>
        <member name="T:Core.Vector4">
4-dimensional homogeneous vector.

</member>
        <member name="M:Core.Vector3.angleBetween(Core.Vector3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Generates a vector perpendicular to this vector (eg an 'up' vector).
    @remarks
    This method will return a vector which is perpendicular to this
    vector. There are an infinite number of possibilities but this
    method will guarantee to generate one of them. If you need more
    control you should use the Quaternion class.

Gets the angle between 2 vectors.
    @remarks
    Vectors do not have to be unit-length but must represent directions.

</member>
        <member name="M:Core.Vector3.makeCeil(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sets this vector's components to the maximum of its own and the
    ones of the passed in vector.
    @remarks
    'Maximum' in this case means the combination of the highest
    value of x, y and z from both vectors. Highest is taken just
    numerically, not magnitude, so 1 &gt; -3.

</member>
        <member name="M:Core.Vector3.op_GreaterThan(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns true if the vector's scalar components are all smaller
    that the ones of the vector it is compared against.

</member>
        <member name="M:Core.Vector3.op_LessThan(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns true if the vector's scalar components are all greater
    that the ones of the vector it is compared against.

</member>
        <member name="M:Core.Vector3.midPoint(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a vector at a point half way between this and the passed
    in vector.

</member>
        <member name="M:Core.Vector3.crossProduct(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates the cross-product of 2 vectors, i.e. the vector that
    lies perpendicular to them both.

</member>
        <member name="M:Core.Vector3.absDotProduct(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates the absolute dot (scalar) product of this vector with another.
    @remarks
    This function work similar dotProduct, except it use absolute value
    of each component of the vector to computing.
    @param
    vec Vector with which to calculate the absolute dot product (together
    with this one).
    @returns
    A Real representing the absolute dot product value.

</member>
        <member name="M:Core.Vector3.dotProduct(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates the dot (scalar) product of this vector with another.
    @remarks
    The dot product can be used to calculate the angle between 2
    vectors. If both are unit vectors, the dot product is the
    cosine of the angle; otherwise the dot product must be
    divided by the product of the lengths of both vectors to get
    the cosine of the angle. This result can further be used to
    calculate the distance of a point from a plane.
    @param
    vec Vector with which to calculate the dot product (together
    with this one).
    @returns
    A float representing the dot product value.

</member>
        <member name="M:Core.Vector3.squaredDistance(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the square of the distance to another vector.
    @remarks
    This method is for efficiency - calculating the actual
    distance to another vector requires a square root, which is
    expensive in terms of the operations required. This method
    returns the square of the distance to another vector, i.e.
    the same as the distance but before the square root is taken.
    Use this if you want to find the longest / shortest distance
    without incurring the square root.

</member>
        <member name="M:Core.Vector3.distance(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the distance to another vector.
    @warning
    This operation requires a square root and is expensive in
    terms of CPU operations. If you don't need to know the exact
    distance (e.g. for just comparing distances) use squaredDistance()
    instead.

</member>
        <member name="M:Core.Vector3.squaredLength">
Returns the square of the length(magnitude) of the vector.
    @remarks
    This  method is for efficiency - calculating the actual
    length of a vector requires a square root, which is expensive
    in terms of the operations required. This method returns the
    square of the length of the vector, i.e. the same as the
    length but before the square root is taken. Use this if you
    want to find the longest / shortest vector without incurring
    the square root.

</member>
        <member name="M:Core.Vector3.op_Assign(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assigns the value of the other vector.
    @param
    rkVector The other vector

</member>
        <member name="M:Core.Vector3.ptr">
Pointer accessor for direct copying

Pointer accessor for direct copying
</member>
        <member name="M:Core.cINodeFactory.CreateInstance">
            <summary>Creates a new instance of the type. Ownership is transferred to caller.</summary>
        </member>
        <member name="M:Core.cINodeFactory.TypeName">
            <summary>The type name of the class that will be created by this factory.</summary>
        </member>
        <member name="M:Core.cINode.HasLegacyID">
            <summary>Internal use only - Query if the node has a legacy ID.</summary>
        </member>
        <member name="M:Core.cINode.LegacyID">
            <summary>Internal use only - A legacy ID of assets.</summary>
        </member>
        <member name="M:Core.cINode.SetLegacyID(System.Int32)">
            <summary>Internal use only - Set legacy ID of assets.</summary>
        </member>
        <member name="M:Core.cINode.SetID(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Internal use only - Set the ID of the node.
</summary>
        </member>
        <member name="M:Core.cINode.Temporary">
            <summary>If true, this object should not persist to file and is considered disposable.</summary>
        </member>
        <member name="M:Core.cINode.SetTemporary(System.Boolean)">
            <summary>If set to true, this object should not persist to file and is considered disposable.</summary>
        </member>
        <member name="M:Core.cINode.Visible">
            <summary>Get the current selection state.</summary>
        </member>
        <member name="M:Core.cINode.SetVisible(System.Boolean)">
            <summary>Set the visibility state.</summary>
        </member>
        <member name="M:Core.cINode.Active">
            <summary>Get the current selection state.</summary>
        </member>
        <member name="M:Core.cINode.SetActive(System.Boolean)">
            <summary>Set the active state.</summary>
        </member>
        <member name="M:Core.cINode.Selected">
            <summary>Get the current selection state.</summary>
        </member>
        <member name="M:Core.cINode.SetSelected(System.Boolean)">
            <summary>Set the selection state.</summary>
        </member>
        <member name="M:Core.cINode.Name">
            <summary>Get the internal identifier string.</summary>
        </member>
        <member name="M:Core.cINode.SetName(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the internal identifier string used for this node.</summary>
            <returns>False if the name cannot be set (e.g. is read-only).</returns>
        </member>
        <member name="M:Core.cINode.Load(Core.cIReader*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Clear and attempt to load a new definition from the given stream.</summary>
        </member>
        <member name="M:Core.cINode.Save(Core.cIWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Save object definition to the given stream.</summary>
        </member>
        <member name="M:Core.cINode.ID">
            <summary>A unique ID among the universe.</summary>
        </member>
        <member name="M:Core.cINode.Clone">
            <summary>
Make a deep copy. The new copy will have the same ID as the original, so if a new
ID is needed, it must be set.
</summary>
        </member>
        <member name="T:Core.cINode">
            <summary>
Abstract base class for all nodes in a scene.
</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnChannelDataChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>The animation data of the node changed.</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnFrameRangeChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>The animation range of the node changed.</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnParentChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when this node's parent is switched.</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnChildListChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when a new child is added. Yippee!</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnTemporaryChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the node's selection state has changed.</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnVisibleChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the node's selection state has changed.</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnActiveChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the node's active state has changed.</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnSelectedChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the node's selection state has changed.</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnNameChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Called when the node's name has changed.</summary>
        </member>
        <member name="M:Core.cINodeObserver.OnIDChanged(Core.cINode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Called when the ID of the node has changed. This should eventually be deprecated because ID's
should not be changing at run time.
</summary>
        </member>
        <member name="T:Core.cINodeObserver">
            <summary>
Observer class for node object types. Derive from this type in order to be notified of changes
to any nodes that you attach to as an observer.
</summary>
        </member>
        <member name="M:Core.cRayBundle.HasReconstructionRays(System.UInt32)">
            <summary>Returns true if there are assigned rays present for the given reconstruction.</summary>
        </member>
        <member name="M:Core.cRayBundle.ReconstructionRays(System.UInt32)">
            <summary>
Return an iterator pair for the rays that contribute to the given reconstruction.
</summary>
        </member>
        <member name="M:Core.cRayBundle.HasUnassignedRays">
            <summary>Returns true if there are assigned rays present.</summary>
        </member>
        <member name="M:Core.cRayBundle.UnassignedRays">
            <summary>Retrieve begin/end iterators for the unassigned rays (rays that are NOT assigned to markers).</summary>
        </member>
        <member name="M:Core.cRayBundle.HasAssignedRays">
            <summary>Returns true if there are assigned rays present.</summary>
        </member>
        <member name="M:Core.cRayBundle.AssignedRays">
            <summary>Retrieve begin/end iterators for the assigned rays (rays that are assigned to markers).</summary>
        </member>
        <member name="M:Core.cRayBundle.HasRays">
            <summary>Returns true if there are rays present.</summary>
        </member>
        <member name="M:Core.cRayBundle.AllRays">
            <summary>Retrieve begin/end iterators for the full ray list.</summary>
        </member>
        <member name="M:Core.cRayBundle.SetRays(std.vector&lt;Core.cCameraRay&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the rays for this frame instance. The passed array is a non-const reference
because it will be swapped with the internal array and cleared on return, without freeing memory.
That will allow memory to be reused when possible.
</summary>
        </member>
        <member name="M:Core.cRayBundle.Empty">
            <summary>Returns true if there are no rays in the bundle.</summary>
        </member>
        <member name="M:Core.cRayBundle.Clear">
            <summary>
Clears all data and prepares this instance to be reused. This is useful for reusing memory
that has been previously allocated.
</summary>
        </member>
        <member name="M:Core.cRayBundle.op_Assign(Core.cRayBundle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Assignment operator.</summary>
        </member>
        <member name="T:Core.cRayBundle">
            <summary>
A container class that holds a collection of rays and caches some state information on them
for fast computational access to lists of markers that meet certain criteria.
</summary>
        </member>
        <member name="M:Core.cCameraRay.op_LessThan(Core.cCameraRay!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Comparison operator. Used mostly for sorting.</summary>
        </member>
        <member name="M:Core.cCameraRay.Equals(Core.cCameraRay!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if this ray instance is identical to the given instance.</summary>
        </member>
        <member name="M:Core.cCameraRay.Length">
            <summary>Ray length.</summary>
        </member>
        <member name="M:Core.cCameraRay.SetLength(System.Single)">
            <summary>Set the ray length.</summary>
        </member>
        <member name="M:Core.cCameraRay.Direction">
            <summary>3D ray direction.</summary>
        </member>
        <member name="M:Core.cCameraRay.Origin">
            <summary>3D ray origin.</summary>
        </member>
        <member name="M:Core.cCameraRay.ImageArea">
            <summary>Retrieves the (pixel) base area in the camera image.</summary>
        </member>
        <member name="M:Core.cCameraRay.ImagePosition">
            <summary>Retrieve the 2D image position in the camera image.</summary>
        </member>
        <member name="M:Core.cCameraRay.ReconstructionID">
            <summary>The ID of the marker that this ray is assigned to, or cUID::Invalid if none.</summary>
        </member>
        <member name="M:Core.cCameraRay.SetReconstructionID(System.UInt32)">
            <summary>Set the assigned reconstruction ID.</summary>
        </member>
        <member name="M:Core.cCameraRay.CameraID">
            <summary>Retrieve the ID of the camera from which this ray originated.</summary>
        </member>
        <member name="M:Core.cCameraRay.ID">
            <summary>The (unique among rays) ID for this ray.</summary>
        </member>
        <member name="T:Core.cCameraRay">
            <summary>
A class representing a ray that emanates from a camera, and may be assigned to a 3D marker reconstruction.
</summary>
        </member>
        <member name="M:Core.cTimer.Elapsed">
            <summary>Get the current value of the timer (in secs).</summary>
        </member>
        <member name="M:Core.cTimer.CatchUp">
            <summary>Restarts the timer and returns the time (in secs) it had before the restart.</summary>
        </member>
        <member name="T:Core.cTimer">
            <summary>
A high-precision timer class for calculating elapsed times
Usage :
  cTimer timer;
  ...
  timer.Start()
  ...
  double elapsed = timer.Value();
</summary>
        </member>
        <member name="M:Motive.cDisplaySettings.UpdateLastSaved">
            <summary>Internal use only - Update internal cache to indicate all properties are current.</summary>
        </member>
        <member name="M:Motive.cDisplaySettings.SetGraphsScope(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Graphs scope.
</summary>
            <param name="graphsScopeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.GraphsScope">
            <summary>
Gets the value of the property.
Graphs scope.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetGraphsBGColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Graphs background color.
</summary>
            <param name="graphsBGColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.GraphsBGColor">
            <summary>
Gets the value of the property.
Graphs background color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetGraphsColorScheme(Motive.cDisplaySettings.eGraphsColorScheme!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Graphs color scheme.
</summary>
            <param name="mGraphsColorSchemeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.GraphsColorScheme">
            <summary>
Gets the value of the property.
Graphs color scheme.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetMissingRayThreshold(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Missing ray threshold.
</summary>
            <param name="mMissingRayThresholdValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.MissingRayThreshold">
            <summary>
Gets the value of the property.
Missing ray threshold.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetMissingRayOpacity(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Missing ray transparency.
</summary>
            <param name="missingRayOpacityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.MissingRayOpacity">
            <summary>
Gets the value of the property.
Missing ray transparency.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetUntrackedRayOpacity(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Untracked ray transparency.
</summary>
            <param name="untrackedRayOpacityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.UntrackedRayOpacity">
            <summary>
Gets the value of the property.
Untracked ray transparency.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetTrackedRayOpacity(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Tracked ray transparency.
</summary>
            <param name="trackedRayOpacityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.TrackedRayOpacity">
            <summary>
Gets the value of the property.
Tracked ray transparency.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetMissingRayColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Missing ray color.
</summary>
            <param name="missingRayColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.MissingRayColor">
            <summary>
Gets the value of the property.
Missing ray color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetUntrackedRayColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Untracked ray color.
</summary>
            <param name="untrackedRayColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.UntrackedRayColor">
            <summary>
Gets the value of the property.
Untracked ray color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetTrackedRayColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Tracked ray color.
</summary>
            <param name="trackedRayColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.TrackedRayColor">
            <summary>
Gets the value of the property.
Tracked ray color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowSelectedResidual(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show selected residual.
</summary>
            <param name="showSelectedResidualValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowSelectedResidual">
            <summary>
Gets the value of the property.
Show selected residual.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetUndistortVideoOverlay(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Undistort video layover for super user.
</summary>
            <param name="undistortVideoOverlayValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.UndistortVideoOverlay">
            <summary>
Gets the value of the property.
Undistort video layover for super user.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetVideoOverlayDispalyFPS(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Video overlay display FPS.
</summary>
            <param name="videoOverlayDispalyFPSValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.VideoOverlayDispalyFPS">
            <summary>
Gets the value of the property.
Video overlay display FPS.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCoordinateAxis(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Coordinate axis.
</summary>
            <param name="showCoordinateAxisValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCoordinateAxis">
            <summary>
Gets the value of the property.
Coordinate axis.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetGridSize(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Grid size.
</summary>
            <param name="gridSizeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.GridSize">
            <summary>
Gets the value of the property.
Grid size.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetGridTransparency(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Grid Transparency.
</summary>
            <param name="gridTransparencyValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.GridTransparency">
            <summary>
Gets the value of the property.
Grid Transparency.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetGridColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Grid color.
</summary>
            <param name="gridColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.GridColor">
            <summary>
Gets the value of the property.
Grid color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowLogoOverlay(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show Optitrack logo.
</summary>
            <param name="showLogoOverlayValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowLogoOverlay">
            <summary>
Gets the value of the property.
Show Optitrack logo.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShow3DFogEffect(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show 3D fog effect.
</summary>
            <param name="show3DFogEffectValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.Show3DFogEffect">
            <summary>
Gets the value of the property.
Show 3D fog effect.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetThreeDBackgroundColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
3D background color.
</summary>
            <param name="threeDBackgroundColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ThreeDBackgroundColor">
            <summary>
Gets the value of the property.
3D background color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetMarkerDiameterForceSize(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Marker filter diameter.
</summary>
            <param name="markerDiameterForceSizeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.MarkerDiameterForceSize">
            <summary>
Gets the value of the property.
Marker filter diameter.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetMarkerDiameterType(Motive.cDisplaySettings.eMarkerDiameterType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Marker diameter.
</summary>
            <param name="markerDiameterTypeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.MarkerDiameterType">
            <summary>
Gets the value of the property.
Marker diameter.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetThreeDCameraFaceDisplayMode(Motive.cDisplaySettings.eThreeDDispalyMode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
3D display mode.
</summary>
            <param name="threeDCameraFaceDisplayModeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ThreeDCameraFaceDisplayMode">
            <summary>
Gets the value of the property.
3D display mode.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowMarkerInfos(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker infos.
</summary>
            <param name="showMarkerLabelsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowMarkerInfos">
            <summary>
Gets the value of the property.
Show marker infos.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowMarkerLabels(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker labels.
</summary>
            <param name="showMarkerLabelsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowMarkerLabels">
            <summary>
Gets the value of the property.
Show marker labels.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowMarkerCount(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker count.
</summary>
            <param name="showMarkerCountValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowMarkerCount">
            <summary>
Gets the value of the property.
Show marker count.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetThreeDHistorySelectedOnly(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Selected History Only.
</summary>
            <param name="threeDHistorySelectedOnlyValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ThreeDHistorySelectedOnly">
            <summary>
Gets the value of the property.
Selected History Only.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetThreeDMarkerHistory(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Marker history.
</summary>
            <param name="threeDMarkerHistoryValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ThreeDMarkerHistory">
            <summary>
Gets the value of the property.
Marker history.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetUnlabeled3DMarkerColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Marker color.
</summary>
            <param name="unlabeled3DMarkerColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.Unlabeled3DMarkerColor">
            <summary>
Gets the value of the property.
Marker color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetThreeDMarkerColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Marker color.
</summary>
            <param name="threeDMarkerColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ThreeDMarkerColor">
            <summary>
Gets the value of the property.
Marker color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetThreeDSolidCamera(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Solid camera.
</summary>
            <param name="threeDSolidCameraValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ThreeDSolidCamera">
            <summary>
Gets the value of the property.
Solid camera.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetThreeDTextSize(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
3D text size.
</summary>
            <param name="threeDTextSizeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ThreeDTextSize">
            <summary>
Gets the value of the property.
3D text size.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetThreeDCameraNames(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show camera names.
</summary>
            <param name="threeDCameraNamesValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ThreeDCameraNames">
            <summary>
Gets the value of the property.
Show camera names.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetRasterPriority(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Raster priority.
</summary>
            <param name="rasterPriorityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.RasterPriority">
            <summary>
Gets the value of the property.
Raster priority.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetLODThreshold(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
LOD threshold.
</summary>
            <param name="lODThresholdValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.LODThreshold">
            <summary>
Gets the value of the property.
LOD threshold.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetPaneGap(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Pane gap
</summary>
            <param name="paneGapValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.PaneGap">
            <summary>
Gets the value of the property.
Pane gap
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetMultiMode(Motive.cDisplaySettings.eMultiMode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Multi-camera 2D display mode.
</summary>
            <param name="multiModeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.MultiMode">
            <summary>
Gets the value of the property.
Multi-camera 2D display mode.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowAsPredistortion(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show distortion.
</summary>
            <param name="showAsPredistortionValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowAsPredistortion">
            <summary>
Gets the value of the property.
Show distortion.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetDistortionResolution(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Overlay transparency
</summary>
            <param name="distortionResolutionValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.DistortionResolution">
            <summary>
Gets the value of the property.
Overlay transparency
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetDistortionOpacity(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Overlay transparency
</summary>
            <param name="distortionOpacityValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.DistortionOpacity">
            <summary>
Gets the value of the property.
Overlay transparency
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetDistortionColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Overlay color.
</summary>
            <param name="distortionColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.DistortionColor">
            <summary>
Gets the value of the property.
Overlay color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowDistortionMap(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show distortion.
</summary>
            <param name="showDistortionMapValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowDistortionMap">
            <summary>
Gets the value of the property.
Show distortion.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetMultiBackgroundColor(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Multi background color.
</summary>
            <param name="multiBackgroundColorValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.MultiBackgroundColor">
            <summary>
Gets the value of the property.
Multi background color.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetVisualFPSTarget(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Visual FPS target
</summary>
            <param name="visualFPSTargetValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.VisualFPSTarget">
            <summary>
Gets the value of the property.
Visual FPS target
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetPixelInspection(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Pixel inspection.
</summary>
            <param name="pixelInspectionValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.PixelInspection">
            <summary>
Gets the value of the property.
Pixel inspection.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCamera2DLabel(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker label.
</summary>
            <param name="showCamera2DLabelValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCamera2DLabel">
            <summary>
Gets the value of the property.
Show marker label.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCameraObjectSize(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker aspect ratio.
</summary>
            <param name="showCameraObjectSizeValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCameraObjectSize">
            <summary>
Gets the value of the property.
Show marker aspect ratio.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCameraObjectAspect(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker aspect ratio.
</summary>
            <param name="showCameraObjectAspectValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCameraObjectAspect">
            <summary>
Gets the value of the property.
Show marker aspect ratio.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowMarkerRoundness(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker circularity.
</summary>
            <param name="showMarkerRoundnessValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowMarkerRoundness">
            <summary>
Gets the value of the property.
Show marker circularity.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowObjectExtents(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker boundaries.
</summary>
            <param name="showObjectExtentsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowObjectExtents">
            <summary>
Gets the value of the property.
Show marker boundaries.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowMarkerCrosshairs(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker centroids.
</summary>
            <param name="showMarkerCrosshairsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowMarkerCrosshairs">
            <summary>
Gets the value of the property.
Show marker centroids.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCameraObjectCoords(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show marker coordinates.
</summary>
            <param name="showCameraObjectCoordsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCameraObjectCoords">
            <summary>
Gets the value of the property.
Show marker coordinates.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowObjectFilterInfo(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Marker filter.
</summary>
            <param name="showObjectFilterInfoValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowObjectFilterInfo">
            <summary>
Gets the value of the property.
Marker filter.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetBackprojectMarkers(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show backproject markers.
</summary>
            <param name="backprojectMarkersValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.BackprojectMarkers">
            <summary>
Gets the value of the property.
Show backproject markers.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCameraMask(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show masks.
</summary>
            <param name="showCameraMaskValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCameraMask">
            <summary>
Gets the value of the property.
Show masks.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCameraReticle(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Show camera reticles.
</summary>
            <param name="showCameraReticleValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCameraReticle">
            <summary>
Gets the value of the property.
Show camera reticles.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetHealthInfo(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Display camera information.
</summary>
            <param name="healthInfoValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.HealthInfo">
            <summary>
Gets the value of the property.
Display camera information.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetVerboseInfo(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Display camera information.
</summary>
            <param name="verboseInfoValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.VerboseInfo">
            <summary>
Gets the value of the property.
Display camera information.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCameraObjectIDs(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Display camera information.
</summary>
            <param name="SetShowCameraObjectIDsValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCameraObjectIDs">
            <summary>
Gets the value of the property.
Display camera information.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="M:Motive.cDisplaySettings.SetShowCameraInformation(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Sets the value of the property.
Display camera information.
</summary>
            <param name="showCameraInformationValue">The new property value.</param>
        </member>
        <member name="M:Motive.cDisplaySettings.ShowCameraInformation">
            <summary>
Gets the value of the property.
Display camera information.
</summary>
            <returns>The property value.</returns>
        </member>
        <member name="T:MoCapCore.cVector3PropertyValue">
            <summary>
A property value represented by a Vector3.
</summary>
        </member>
        <member name="M:Core.CoreCount">
            <summary>Query the number of cores available on this machine.</summary>
        </member>
        <member name="T:MoCapCore.cStringPropertyValue">
            <summary>
A parameter value represented by a string.
</summary>
        </member>
        <member name="T:MoCapCore.cStringListPropertyValue">
            <summary>
A parameter value represented by a string.
</summary>
        </member>
        <member name="T:MoCapCore.cIntPropertyValue">
            <summary>
A property value represented by an integer value.
</summary>
        </member>
        <member name="T:MoCapCore.cDoublePropertyValue">
            <summary>
A property value represented by a single-precision floating point value.
</summary>
        </member>
        <member name="T:MoCapCore.cBoolPropertyValue">
            <summary>
A property value represented by a boolean value.
</summary>
        </member>
        <member name="M:MoCapCore.cIMacro.IsCompatible(MoCapCore.cIPropertyValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if this macro is compatible with the given true data type.</summary>
        </member>
        <member name="M:MoCapCore.cIMacro.Evaluate(MoCapCore.cIPropertyValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Evaluate the macro and returns its value.</summary>
            <returns>True if evaluation was successful and the value was changed. Returns false if the value was not changed.</returns>
        </member>
        <member name="M:MoCapCore.cIMacro.Description">
            <summary>Get a description of the macro for use in things like tooltips, etc.</summary>
        </member>
        <member name="M:MoCapCore.cIMacro.Label">
            <summary>
A human-readable label used to identify this macro to the user. It can and should
change with localization.
</summary>
        </member>
        <member name="M:MoCapCore.cIMacro.Name">
            <summary>
String used to identify this macro internally. Not for user consumption, and
should remain unchanged by any string localization. This should be unique among the
universe of macros.
</summary>
        </member>
        <member name="T:MoCapCore.cIMacro">
            <summary>
Runtime macros are named variables that can take on dynamic values at runtime.
They are useful in situations where you want to set parameter values based on some runtime
property, such as the current time, or currently selected actor.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.SuspendLock">
            <summary>
Suspends the lock on a definition so that changes can be made even after instances have
been created from this definition. Buyer beware! It is up to the developer to ensure that all
created instances are updated with any changes that are made to the definition, or to delete
all affected instances first.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.CreateInstance">
            <summary>
Create a new parameter from this definition. Once a parameter is created from a definition,
the definition is locked and can no longer be modified.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.ConstraintsAreRange">
            <summary>Returns true if the constraints should be interpreted as a value range.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.SetConstraintsAreRange(System.Boolean)">
            <summary>If set, there should be exactly two constraints and they represent a value range (min, max).</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.ConstraintName(System.UInt32)">
            <summary>Get the name of the constraint at the given index, if any.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.FindConstraint(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Attempt to find the constraint value by name.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.Constraint(System.UInt32)">
            <summary>Get the constraint at the given index.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.RemoveAllConstraints">
            <summary>
Remove any constraints associated with this definition.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.AddConstraint(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cIPropertyValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Create and add a named constraint with a specified value. The name must be unique among all constraints
attached to this object. If the a constraint with name does not already exist for this object, it is
added along with the specified value.
</summary>
            <param name="name">Constraint name. Must be unique within this definition.</param>
            <param name="val">Constraint value.</param>
            <returns>false if there is already a constraint with this name and the constraint
was not added, true otherwise</returns>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.AddConstraint(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Create and add a named constraint. The name must be unique among all constraints attached to this
object. Ownership of the returned pointer remains with this object.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.FindMacro(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds and returns a named macro, or NULL if it was not found.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.DefaultMacro">
            <summary>Returns the default macro, or NULL if none.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.AvailableMacros(std.vector&lt;MoCapCore.cIMacro!System.Runtime.CompilerServices.IsConst**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Get the list of macros compatible with this parameter definition.</summary>
            <returns>True if some items were added to the results array.</returns>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.HasMacros">
            <summary>Returns true if there are available macros.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyDefinition.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoC">
            <summary>
Construct a new parameter definition.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollectionDefinition.ClearLibrary">
            <summary>
Clear (and delete) the static library of stored collection definitions. This allows an application
to tear down any collection definitions that have been stored up during application execution.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollectionDefinition.FindInLibrary(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find a definition in the collection library, if it exists. If it is not found (perhaps ClearLibrary()
has been called), an invalid shared pointer is returned.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollectionDefinition.FindInLibrary(Core.cUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find a definition in the collection library, if it exists. If it is not found (perhaps ClearLibrary()
has been called), an invalid shared pointer is returned.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollectionDefinition.AddToLibrary(Core.cSharedPtr&lt;MoCapCore.cPropertyCollectionDefinition&gt;)">
            <summary>
Add a definition collection to the static list of available collections. This is a convenient
way to keep a reference to the definition available for creation of instances. The library can
be cleared so that definitions can be torn down by calling ClearLibrary().
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollectionDefinition.CreateInstance(System.Boolean)">
            <summary>
Create a new ParameterGroup instance from this definition. Once an instance is created, the
definition becomes locked and cannot be edited further.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollectionDefinition.ID">
            <summary>A cUID used to uniquely identify this definition.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollectionDefinition.Name">
            <summary>Retrieve the name of this definition collection.</summary>
        </member>
        <member name="T:MoCapCore.cPropertyCollectionDefinition">
            <summary>
A grouping of parameter definitions that simplifies the task of creating and maintaining parameter
blocks.
</summary>
        </member>
        <member name="M:MoCapCore.cTextStreamWriter.Stream">
            <summary>Access to the contained stream.</summary>
        </member>
        <member name="M:MoCapCore.cTextStreamWriter.WriteString(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>Write a wide string to the stream. Use this if you are passing in any wide string arguments.</summary>
        </member>
        <member name="M:MoCapCore.cTextStreamWriter.WriteString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>Write a string to the stream.</summary>
        </member>
        <member name="T:MoCapCore.cTextStreamWriter">
            <summary>
Exporter helper class for writing text data to an IDataStream.
</summary>
        </member>
        <member name="M:tinyxml2wc.XMLPrinter.CStrSize">
If in print to memory mode, return the size
of the XML file in memory. (Note the size returned
includes the terminating null.)

</member>
        <member name="M:tinyxml2wc.XMLPrinter.CStr">
If in print to memory mode, return a pointer to
the XML file in memory.

</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushComment(System.Char!System.Runtime.CompilerServices.IsConst*)">
Add a comment
</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushText(System.Double)">
Add a text node from a double.
</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushText(System.Single)">
Add a text node from a float.
</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushText(System.Boolean)">
Add a text node from a bool.
</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushText(System.UInt32)">
Add a text node from an unsigned.
</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushText(System.Int32)">
Add a text node from an integer.
</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushText(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Add a text node.
</member>
        <member name="M:tinyxml2wc.XMLPrinter.CloseElement">
If streaming, close the Element.
</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
If streaming, add an attribute to an open element.
</member>
        <member name="M:tinyxml2wc.XMLPrinter.OpenElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
If streaming, start writing an element.
        The element must be closed with CloseElement()

</member>
        <member name="M:tinyxml2wc.XMLPrinter.PushHeader(System.Boolean,System.Boolean)">
If streaming, write the BOM and declaration. 
</member>
        <member name="M:tinyxml2wc.XMLPrinter.#ctor(_iobuf*,System.Boolean)">
Construct the printer. If the FILE* is specified,
        this will print to the FILE. Else it will print
        to memory, and the result is available in CStr().
        If 'compact' is set to true, then output is created
        with only required whitespace and newlines.

</member>
        <member name="T:tinyxml2wc.XMLConstHandle">
A variant of the XMLHandle class for working with const XMLNodes and Documents. It is the
same in all regards, except for the 'const' qualifiers. See XMLHandle for API.

</member>
        <member name="M:tinyxml2wc.XMLHandle.ToDeclaration">
Safe cast to XMLDeclaration. This can return null.
</member>
        <member name="M:tinyxml2wc.XMLHandle.ToUnknown">
Safe cast to XMLUnknown. This can return null.
</member>
        <member name="M:tinyxml2wc.XMLHandle.ToText">
Safe cast to XMLText. This can return null.
</member>
        <member name="M:tinyxml2wc.XMLHandle.ToElement">
Safe cast to XMLElement. This can return null.
</member>
        <member name="M:tinyxml2wc.XMLHandle.ToNode">
Safe cast to XMLNode. This can return null.
</member>
        <member name="M:tinyxml2wc.XMLHandle.NextSiblingElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Get the next sibling element of this handle.
</member>
        <member name="M:tinyxml2wc.XMLHandle.NextSibling">
Get the next sibling of this handle.
</member>
        <member name="M:tinyxml2wc.XMLHandle.PreviousSiblingElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Get the previous sibling element of this handle.
</member>
        <member name="M:tinyxml2wc.XMLHandle.PreviousSibling">
Get the previous sibling of this handle.
</member>
        <member name="M:tinyxml2wc.XMLHandle.LastChildElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Get the last child element of this handle.
</member>
        <member name="M:tinyxml2wc.XMLHandle.LastChild">
Get the last child of this handle.
</member>
        <member name="M:tinyxml2wc.XMLHandle.FirstChildElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Get the first child element of this handle.
</member>
        <member name="M:tinyxml2wc.XMLHandle.FirstChild">
Get the first child of this handle.
</member>
        <member name="M:tinyxml2wc.XMLHandle.op_Assign(tinyxml2wc.XMLHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment
</member>
        <member name="M:tinyxml2wc.XMLHandle.#ctor(tinyxml2wc.XMLHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor
</member>
        <member name="M:tinyxml2wc.XMLHandle.#ctor(tinyxml2wc.XMLNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Create a handle from a node.
</member>
        <member name="M:tinyxml2wc.XMLHandle.#ctor(tinyxml2wc.XMLNode*)">
Create a handle from any node (at any depth of the tree.) This can be a null pointer.
</member>
        <member name="M:tinyxml2wc.TiXMLDocument.PrintError">
If there is an error, print it to stdout.
</member>
        <member name="M:tinyxml2wc.TiXMLDocument.GetErrorStr2">
Return a possibly helpful secondary diagnostic location or string.
</member>
        <member name="M:tinyxml2wc.TiXMLDocument.GetErrorStr1">
Return a possibly helpful diagnostic location or string.
</member>
        <member name="M:tinyxml2wc.TiXMLDocument.ErrorID">
Return the errorID.
</member>
        <member name="M:tinyxml2wc.TiXMLDocument.Error">
Return true if there was an error parsing the document.
</member>
        <member name="M:tinyxml2wc.TiXMLDocument.DeleteNode(tinyxml2wc.XMLNode*)">
Delete a node associated with this document.
It will be unlinked from the DOM.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.NewUnknown(System.Char!System.Runtime.CompilerServices.IsConst*)">
Create a new Unknown associated with
this Document. The memory forthe object
is managed by the Document.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.NewText(System.Char!System.Runtime.CompilerServices.IsConst*)">
Create a new Text associated with
this Document. The memory for the Text
is managed by the Document.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.NewComment(System.Char!System.Runtime.CompilerServices.IsConst*)">
Create a new Comment associated with
this Document. The memory for the Comment
is managed by the Document.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.NewElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Create a new Element associated with
this Document. The memory for the Element
is managed by the Document.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.RootElement">
Return the root element of DOM. Equivalent to FirstChildElement().
        To get the first node, use FirstChild().

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.SetBOM(System.Boolean)">
Sets whether to write the BOM when writing the file.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.HasBOM">
Returns true if this document has a leading Byte Order Mark of UTF8.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.SaveFile(_iobuf*,System.Boolean)">
        Save the XML file to disk. You are responsible
        for providing and closing the FILE*.

        Returns XML_NO_ERROR (0) on success, or
        an errorID.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.SaveFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Save the XML file to disk.
Returns XML_NO_ERROR (0) on success, or
an errorID.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.LoadFile(_iobuf*)">
        Load an XML file from disk. You are responsible
        for providing and closing the FILE*.

        Returns XML_NO_ERROR (0) on success, or
        an errorID.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.LoadFile(System.Char!System.Runtime.CompilerServices.IsConst*)">
Load an XML file from disk.
Returns XML_NO_ERROR (0) on success, or
an errorID.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.Parse(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
        Parse an XML file from a character string.
        Returns XML_NO_ERROR (0) on success, or
        an errorID.

        You may optionally pass in the 'nBytes', which is
        the number of bytes which will be parsed. If not
        specified, TinyXML will assume 'xml' points to a
        null terminated string.

</member>
        <member name="M:tinyxml2wc.TiXMLDocument.#ctor(System.Boolean,tinyxml2wc.Whitespace)">
constructor
</member>
        <member name="T:tinyxml2wc.TiXMLDocument">
A Document binds together all the functionality.
    It can be saved, loaded, and printed to the screen.
    All Nodes are connected and allocated to a Document.
    If the Document is deleted, all its Nodes are also deleted.

</member>
        <member name="M:tinyxml2wc.XMLElement.QueryFloatText(System.Single*)">
See QueryIntText()
</member>
        <member name="M:tinyxml2wc.XMLElement.QueryDoubleText(System.Double*)">
See QueryIntText()
</member>
        <member name="M:tinyxml2wc.XMLElement.QueryBoolText(System.Boolean*)">
See QueryIntText()
</member>
        <member name="M:tinyxml2wc.XMLElement.QueryUnsignedText(System.UInt32*)">
See QueryIntText()
</member>
        <member name="M:tinyxml2wc.XMLElement.GetText">
Convenience function for easy access to the text inside an element. Although easy
        and concise, GetText() is limited compared to getting the TiXmlText child
        and accessing it directly.

        If the first child of 'this' is a TiXmlText, the GetText()
        returns the character string of the Text node, else null is returned.

        This is a convenient method for getting the text of simple contained text:
        @verbatim
        <foo>This is text</foo>
        const char* str = fooElement-&gt;GetText();
        @endverbatim

        'str' will be a pointer to "This is text".

        Note that this function can be misleading. If the element foo was created from
        this XML:
        @verbatim
        <foo><b>This is text</b></foo>
        @endverbatim

        then the value of str would be null. The first child node isn't a text node, it is
        another element. From this XML:
        @verbatim
        <foo>This is <b>text</b></foo>
        @endverbatim
        GetText() will return "This is ".

</member>
        <member name="M:tinyxml2wc.XMLElement.FindAttribute(System.Char!System.Runtime.CompilerServices.IsConst*)">
Query a specific attribute in the list.
</member>
        <member name="M:tinyxml2wc.XMLElement.FirstAttribute">
Return the first attribute in the list.
</member>
        <member name="M:tinyxml2wc.XMLElement.DeleteAttribute(System.Char!System.Runtime.CompilerServices.IsConst*)">
Delete an attribute.

</member>
        <member name="M:tinyxml2wc.XMLElement.SetAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int64)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLElement.SetAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLElement.SetAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLElement.SetAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLElement.SetAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLElement.SetAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLElement.QueryFloatAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Single*)">
See QueryIntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLElement.QueryDoubleAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Double*)">
See QueryIntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLElement.QueryBoolAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean*)">
See QueryIntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLElement.QueryUnsignedAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32*)">
See QueryIntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLElement.FloatAttribute(System.Char!System.Runtime.CompilerServices.IsConst*)">
See IntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLElement.DoubleAttribute(System.Char!System.Runtime.CompilerServices.IsConst*)">
See IntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLElement.BoolAttribute(System.Char!System.Runtime.CompilerServices.IsConst*)">
See IntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLElement.UnsignedAttribute(System.Char!System.Runtime.CompilerServices.IsConst*)">
See IntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLElement.IntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*)">
Given an attribute name, IntAttribute() returns the value
        of the attribute interpreted as an integer. 0 will be
        returned if there is an error. For a method with error
        checking, see QueryIntAttribute()

</member>
        <member name="M:tinyxml2wc.XMLElement.Attribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
Given an attribute name, Attribute() returns the value
        for the attribute of that name, or null if none
        exists. For example:

        @verbatim
        const char* value = ele-&gt;Attribute( "foo" );
        @endverbatim

        The 'value' parameter is normally null. However, if specified,
        the attribute will only be returned if the 'name' and 'value'
        match. This allow you to write code:

        @verbatim
        if ( ele-&gt;Attribute( "foo", "bar" ) ) callFooIsBar();
        @endverbatim

        rather than:
        @verbatim
        if ( ele-&gt;Attribute( "foo" ) ) {
        if ( strcmp( ele-&gt;Attribute( "foo" ), "bar" ) == 0 ) callFooIsBar();
        }
        @endverbatim

</member>
        <member name="M:tinyxml2wc.XMLElement.SetName(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Set the name of the element.
</member>
        <member name="M:tinyxml2wc.XMLElement.Name">
Get the name of an element (which is the Value() of the node.)
</member>
        <member name="T:tinyxml2wc.XMLElement">
The element is a container class. It has a value, the element name,
    and can contain other elements, text, comments, and unknowns.
    Elements also contain an arbitrary number of attributes.

</member>
        <member name="M:tinyxml2wc.XMLAttribute.SetAttribute(System.Int64)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.SetAttribute(System.Single)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.SetAttribute(System.Double)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.SetAttribute(System.Boolean)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.SetAttribute(System.UInt32)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.SetAttribute(System.Int32)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.SetAttribute(System.Char!System.Runtime.CompilerServices.IsConst*)">
Set the attribute to a string value.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.QueryFloatValue(System.Single*)">
See QueryIntAttribute
</member>
        <member name="M:tinyxml2wc.XMLAttribute.QueryDoubleValue(System.Double*)">
See QueryIntAttribute
</member>
        <member name="M:tinyxml2wc.XMLAttribute.QueryBoolValue(System.Boolean*)">
See QueryIntAttribute
</member>
        <member name="M:tinyxml2wc.XMLAttribute.QueryUnsignedValue(System.UInt32*)">
See QueryIntAttribute
</member>
        <member name="M:tinyxml2wc.XMLAttribute.QueryIntValue(System.Int32*)">
QueryIntAttribute interprets the attribute as an integer, and returns the value
        in the provided paremeter. The function will return XML_NO_ERROR on success,
        and XML_WRONG_ATTRIBUTE_TYPE if the conversion is not successful.

</member>
        <member name="M:tinyxml2wc.XMLAttribute.FloatValue">
Query as a float. See IntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLAttribute.DoubleValue">
Query as a double. See IntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLAttribute.BoolValue">
Query as a boolean. See IntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLAttribute.UnsignedValue">
Query as an unsigned integer. See IntAttribute()
</member>
        <member name="M:tinyxml2wc.XMLAttribute.IntValue">
IntAttribute interprets the attribute as an integer, and returns the value.
        If the value isn't an integer, 0 will be returned. There is no error checking;
        use QueryIntAttribute() if you need error checking.

</member>
        <member name="M:tinyxml2wc.XMLAttribute.Next">
The next attribute in the list.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.Value">
The value of the attribute.
</member>
        <member name="M:tinyxml2wc.XMLAttribute.Name">
The name of the attribute.
</member>
        <member name="T:tinyxml2wc.XMLAttribute">
An attribute is a name-value pair. Elements have an arbitrary
    number of attributes, each with a unique name.

    @note The attributes are not XMLNodes. You may only query the
    Next() attribute in a list.

</member>
        <member name="T:tinyxml2wc.XMLUnknown">
Any tag that tinyXml doesn't recognize is saved as an
    unknown. It is a tag of text, but should not be modified.
    It will be written back to the XML, unchanged, when the file
    is saved.

    DTD tags get thrown into TiXmlUnknowns.

</member>
        <member name="T:tinyxml2wc.XMLComment">
An XML Comment. 
</member>
        <member name="M:tinyxml2wc.XMLText.CData">
Returns true if this is a CDATA text element.
</member>
        <member name="M:tinyxml2wc.XMLText.SetCData(System.Boolean)">
Declare whether this should be CDATA or standard text.
</member>
        <member name="T:tinyxml2wc.XMLText">
XML text.

    Note that a text node can have child element nodes, for example:
    @verbatim
    <root>This is <b>bold</b></root>
    @endverbatim

    A text node can have 2 ways to output the next. "normal" output
    and CDATA. It will default to the mode it was parsed from the XML file and
    you generally want to leave it alone, but you can change the output mode with
    SetCDATA() and query it with CDATA().

</member>
        <member name="M:tinyxml2wc.XMLNode.ShallowEqual(tinyxml2wc.XMLNode!System.Runtime.CompilerServices.IsConst*)">
        Test if 2 nodes are the same, but don't test children.
        The 2 nodes do not need to be in the same Document.

        Note: if called on a TiXMLDocument, this will return false.

</member>
        <member name="M:tinyxml2wc.XMLNode.ShallowClone(tinyxml2wc.TiXMLDocument*)">
        Make a copy of this node, but not its children.
        You may pass in a Document pointer that will be
        the owner of the new Node. If the 'document' is
        null, then the node returned will be allocated
        from the current Document. (this-&gt;GetDocument())

        Note: if called on a TiXMLDocument, this will return null.

</member>
        <member name="M:tinyxml2wc.XMLNode.DeleteChild(tinyxml2wc.XMLNode*)">
Delete a child of this node.

</member>
        <member name="M:tinyxml2wc.XMLNode.DeleteChildren">
Delete all the children of this node.

</member>
        <member name="M:tinyxml2wc.XMLNode.InsertAfterChild(tinyxml2wc.XMLNode*,tinyxml2wc.XMLNode*)">
Add a node after the specified child node.

</member>
        <member name="M:tinyxml2wc.XMLNode.InsertFirstChild(tinyxml2wc.XMLNode*)">
Add a child node as the first (left) child.

</member>
        <member name="M:tinyxml2wc.XMLNode.InsertEndChild(tinyxml2wc.XMLNode*)">
Add a child node as the last (right) child.

</member>
        <member name="M:tinyxml2wc.XMLNode.NextSiblingElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Get the next (right) sibling element of this node, with an opitionally supplied name.
</member>
        <member name="M:tinyxml2wc.XMLNode.NextSibling">
Get the next (right) sibling node of this node.
</member>
        <member name="M:tinyxml2wc.XMLNode.PreviousSiblingElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Get the previous (left) sibling element of this node, with an opitionally supplied name.
</member>
        <member name="M:tinyxml2wc.XMLNode.PreviousSibling">
Get the previous (left) sibling node of this node.
</member>
        <member name="M:tinyxml2wc.XMLNode.LastChildElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Get the last child element or optionally the last child
        element with the specified name.

</member>
        <member name="M:tinyxml2wc.XMLNode.LastChild">
Get the last child node, or null if none exists.
</member>
        <member name="M:tinyxml2wc.XMLNode.FirstChildElement(System.Char!System.Runtime.CompilerServices.IsConst*)">
Get the first child element, or optionally the first child
        element with the specified name.

</member>
        <member name="M:tinyxml2wc.XMLNode.FirstChild">
Get the first child node, or null if none exists.
</member>
        <member name="M:tinyxml2wc.XMLNode.NoChildren">
Returns true if this node has no children.
</member>
        <member name="M:tinyxml2wc.XMLNode.Parent">
Get the parent of this node on the DOM.
</member>
        <member name="M:tinyxml2wc.XMLNode.SetValue(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Set the Value of an XML node.
        @sa Value()

</member>
        <member name="M:tinyxml2wc.XMLNode.Value">
The meaning of 'value' changes for the specific type.
        @verbatim
        Document:       empty
        Element:        name of the element
        Comment:        the comment text
        Unknown:        the tag contents
        Text:           the text string
        @endverbatim

</member>
        <member name="M:tinyxml2wc.XMLNode.ToUnknown">
Safely cast to an Unknown, or null.
</member>
        <member name="M:tinyxml2wc.XMLNode.ToDeclaration">
Safely cast to a Declaration, or null.
</member>
        <member name="M:tinyxml2wc.XMLNode.ToDocument">
Safely cast to a Document, or null.
</member>
        <member name="M:tinyxml2wc.XMLNode.ToComment">
Safely cast to a Comment, or null.
</member>
        <member name="M:tinyxml2wc.XMLNode.ToText">
Safely cast to Text, or null.
</member>
        <member name="M:tinyxml2wc.XMLNode.ToElement">
Safely cast to an Element, or null.
</member>
        <member name="M:tinyxml2wc.XMLNode.GetDocument">
Get the TiXMLDocument that owns this XMLNode.

Get the TiXMLDocument that owns this XMLNode.
</member>
        <member name="T:tinyxml2wc.XMLNode">
XMLNode is a base class for every object that is in the
    XML Document Object Model (DOM), except XMLAttributes.
    Nodes have siblings, a parent, and children which can
    be navigated. A node is always in a TiXMLDocument.
    The type of a XMLNode can be queried, and it can
    be cast to its more defined type.

    A TiXMLDocument allocates memory for all its Nodes.
    When the TiXMLDocument gets deleted, all its Nodes
    will also be deleted.

    @verbatim
    A Document can contain: Element (container or leaf)
    Comment (leaf)
    Unknown (leaf)
    Declaration( leaf )

    An Element can contain: Element (container or leaf)
    Text    (leaf)
    Attributes (not on tree)
    Comment (leaf)
    Unknown (leaf)

    @endverbatim

</member>
        <member name="M:tinyxml2wc.XMLVisitor.Visit(tinyxml2wc.XMLUnknown!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit an unknown node.
</member>
        <member name="M:tinyxml2wc.XMLVisitor.Visit(tinyxml2wc.XMLComment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a comment node.
</member>
        <member name="M:tinyxml2wc.XMLVisitor.Visit(tinyxml2wc.XMLText!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a text node.
</member>
        <member name="M:tinyxml2wc.XMLVisitor.Visit(tinyxml2wc.XMLDeclaration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a declaration.
</member>
        <member name="M:tinyxml2wc.XMLVisitor.VisitExit(tinyxml2wc.XMLElement!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit an element.
</member>
        <member name="M:tinyxml2wc.XMLVisitor.VisitEnter(tinyxml2wc.XMLElement!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tinyxml2wc.XMLAttribute!System.Runtime.CompilerServices.IsConst*)">
Visit an element.
</member>
        <member name="M:tinyxml2wc.XMLVisitor.VisitExit(tinyxml2wc.TiXMLDocument!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a document.
</member>
        <member name="M:tinyxml2wc.XMLVisitor.VisitEnter(tinyxml2wc.TiXMLDocument!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a document.
</member>
        <member name="T:tinyxml2wc.XMLVisitor">
    Implements the interface to the "Visitor pattern" (see the Accept() method.)
    If you call the Accept() method, it requires being passed a XMLVisitor
    class to handle callbacks. For nodes that contain other nodes (Document, Element)
    you will get called with a VisitEnter/VisitExit pair. Nodes that are always leafs
    are simply called with Visit().

    If you return 'true' from a Visit method, recursive parsing will continue. If you return
    false, <b>no children of this node or its sibilings</b> will be visited.

    All flavors of Visit methods have a default implementation that returns 'true' (continue
    visiting). You need to only override methods that are interesting to you.

    Generally Accept() is called on the TiXmlDocument, although all nodes support visiting.

    You should never change the document from a callback.

    @sa XMLNode::Accept()

</member>
        <member name="M:MoCapCore.cIDataStream.IsEOF">
            <summary>Returns true if the stream position is at the end of the stream.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Mode">
            <summary>Retrieves the access mode for the stream.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.SetMode(MoCapCore.cIDataStream.eStreamOpenMode)">
            <summary>Set the access mode for the stream. Returns true if the mode could be set.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Flush">
            <summary>Flush any pending output to the storage media.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Write(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>
Writes a block of data and advances the stream position. Writes up to byteCount bytes,
so the buffer must be at least byteCount bytes long.
</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Read(System.Byte*,System.UInt32)">
            <summary>
Reads up to byteCount bytes of data and advances the stream position. The buffer must be at
least byteCount bytes long. Returns the number of bytes actually read.
</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Seek(System.UInt64)">
            <summary>Seek to the requested (absolute) position in the stream.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Tell">
            <summary>Returns the current position in the stream.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Size">
            <summary>Returns the (current) full size of the stream.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.FullName">
            <summary>
Returns the full stream name, including path. Stream name always use the '/' path separator.
To convert, you can use Filename::ConvertSeparators().
</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Owner">
            <summary>Return the warehouse that owns this stream.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.IsOpen">
            <summary>Returns true if the stream is valid and open.</summary>
        </member>
        <member name="M:MoCapCore.cIDataStream.Destroy">
            <summary>Call this method, not the destructor, to destroy cIDataStream instances.</summary>
        </member>
        <member name="T:MoCapCore.cIDataStream">
            <summary>
The interface class for data streams, which can usually be thought of as files. Streams may exist
as files on disk, or as files within a file archive, or as resources accessible over a network
connection, or some other representation that is suitable for this interface. Data streams are
created and destroyed by cIDataStreamWarehouse implementations.
</summary>
        </member>
        <member name="M:Core.cAtomicLong.SetValue(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Performs an atomic set value.</summary>
        </member>
        <member name="M:Core.cAtomicLong.SetIfEqual(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Sets the variable to the given value if its current value matches compareVal.</summary>
        </member>
        <member name="M:Core.cAtomicLong.Decrement">
            <summary>Performs an atomic decrement.</summary>
        </member>
        <member name="M:Core.cAtomicLong.Increment">
            <summary>Performs an atomic increment.</summary>
        </member>
        <member name="M:Core.cAtomicLong.op_Assign(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Performs an atomic assignment.</summary>
        </member>
        <member name="T:Core.cAtomicLong">
            <summary>
A class that is thread-safe and lock-free by using atomic operations for manipulating a single
long integer value.
</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.AddProperty(MoCapCore.cProperty*)">
            <summary>
Add a property instance to this collection. Ownership of the property instance transfers
to this object with this call. This should be called only by cPropertyCollectionDefinition.
</summary>
            <returns>True if the property was successfully added to the collection.</returns>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.DefinitionID">
            <summary>The ID of the definition used to create this collection.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.DefinitionName">
            <summary>The name of the definition used to create this collection.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.SetAllToDefaultValue(System.Boolean)">
            <summary>Convenience method to set all properties to their default values.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.Property(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Access to properties by name</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.PropertyName(System.UInt32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Retrieve the internal name of the property at the requested index</summary>
            <returns>False if the requested index was invalid. True otherwise.</returns>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.Property(System.UInt32)">
            <summary>Access to properties list by index. Returns NULL on out-of-range requests.</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.PropertyCount">
            <summary>Retrieve the number of properties in this group</summary>
        </member>
        <member name="M:MoCapCore.cPropertyCollection.Clone">
            <summary>Creates a copy of all contained properties with their current values.</summary>
        </member>
        <member name="T:MoCapCore.cPropertyCollection">
            <summary>
A list of Properties.
</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyCollectionObserver.OnPropertyAttributesChanged(MoCapCore.cPropertyCollection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>Callback that gets called when any attributes on the property change.</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyCollectionObserver.OnPropertyValueChanged(MoCapCore.cPropertyCollection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,MoCapCore.cProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Callback that gets called when the value of the property changes.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetToConstraintValue(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Set the property value to the value of the named constraint from the constraint list.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetToConstraintValue(System.UInt32,System.Boolean)">
            <summary>Set the property value to the value of the constraint at the given index in the constraint list.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.ConstraintsAreRange">
            <summary>
Returns true if the constraints should be considered a range. In this case,
exactly two constraints should exist, a max and a min.
</summary>
        </member>
        <member name="M:MoCapCore.cProperty.ConstraintName(System.UInt32)">
            <summary>Get the name of the constraint at the given index, if any.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.Constraint(System.UInt32)">
            <summary>Get the constraint at the given index.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.ConstraintCount">
            <summary>Find out how many value constraints are active.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.Advanced">
            <summary>Returns true if this property should be considered "advanced".</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetAdvanced(System.Boolean)">
            <summary>Set the "advanced" flag.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.Required">
            <summary>Returns true if this property requires a value.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetRequired(System.Boolean)">
            <summary>Sets the "required" flag.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.Hidden">
            <summary>True if this property is (or should be) hidden.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetHidden(System.Boolean)">
            <summary>Set the "hidden" flag.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.ReadOnly">
            <summary>Returns true if this property is read-only.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetReadOnly(System.Boolean)">
            <summary>Set the read-only flag.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.EndEditAttributes">
            <summary>
Finish a grouped edit of attributes. Any callbacks associated with attribute editing that
were held by calling BeginEditAttributes will be called once this method is called.
</summary>
        </member>
        <member name="M:MoCapCore.cProperty.BeginEditAttributes">
            <summary>
Begin an edit operation on attributes. This must be matched with a call to
<code>EndEditAttributes()</code>. Calls to <code>BeginEditAttributes()</code> and
<code>EndEditAttributes()</code> should not be nested.
</summary>
        </member>
        <member name="M:MoCapCore.cProperty.ClearMacro(System.Boolean)">
            <summary>Clear any active macro.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetToMacro(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Activate the named macro.</summary>
            <returns>True if the macro was found and set as active.</returns>
        </member>
        <member name="M:MoCapCore.cProperty.ActiveMacro(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Get the name of the currently active macro, if any.</summary>
            <returns>True if a macro is currently active.</returns>
        </member>
        <member name="M:MoCapCore.cProperty.AvailableMacros(std.vector&lt;MoCapCore.cIMacro!System.Runtime.CompilerServices.IsConst**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Get the array of available macros for use with this property.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.HasMacros">
            <summary>Returns true if there are macros available for this property.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetValueFromString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Set the value of the property from a string, if possible. The string must be formatted
identically to the formatting used by ValueAsString().
</summary>
        </member>
        <member name="M:MoCapCore.cProperty.ValueAsString">
            <summary>
Retrieve the value of the property as a string. Each value type will have its own
representation of what the returned string should look like.
</summary>
        </member>
        <member name="M:MoCapCore.cProperty.op_Equality(MoCapCore.cProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Equality comparison operator. Compares values.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.Copy(MoCapCore.cProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Copy the value and attributes of the given property into our own, if possible.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.IsSame(MoCapCore.cProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given property was created by the same ParameterDefinition as this one.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.IsDefaultValue">
            <summary>Returns true if a default value exists for the property, and the current value is set to it.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetToDefaultValue(System.Boolean)">
            <summary>Sets the value of this property to its default value, if it has one.</summary>
            <param name="respectReadOnly">If true, the read-only status is respected.</param>
            <returns>True if a default value exists and the property value was set to it.</returns>
        </member>
        <member name="M:MoCapCore.cProperty.ValueIsValid(MoCapCore.cIPropertyValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns true if the given property has a value and it satisfies any current constraints.
or custom validators.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.ValueIsValid">
            <summary>Returns true if the property has a value and it satisfies any current constraints.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.SetGroupLabel(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the Group Label value.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.GroupLabel">
            <summary>A user-facing group label that the UI may use to group parameters. Should be localized.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.Description">
            <summary>A brief description of this property. Should be localized.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.Label">
            <summary>The user-facing label to display for this paramter. Should be localized.</summary>
        </member>
        <member name="M:MoCapCore.cProperty.Name">
            <summary>The internal name of this property, used for lookups. Should not be changed with localization</summary>
        </member>
        <member name="T:MoCapCore.cProperty">
            <summary>
A generic property class that provides storage and management for a generic type of data, determined
by the derived type of cIPropertyValue stored. Properties should only be instantiated from a property
definition.
</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyObserver.OnPropertyAttributesChanged(MoCapCore.cProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>Callback that gets called when any attributes on the property change.</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyObserver.OnPropertyValueChanged(MoCapCore.cProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Callback that gets called when the value of the property changes.</summary>
        </member>
        <member name="M:MoCapCore.ISemanticType.Clone">
            <summary>Creates a new object that is a copy of this one.</summary>
        </member>
        <member name="T:MoCapCore.ISemanticType">
            <summary>
Base class for all semantic types. These are very simple class derivations that provide
a heuristic way to deal with parameters that may have the same data type, but may differ
substantially in their meaning. For example, you may have two parameters that are both
Vector3f's, but one may be an unbounded position while the other is an RGB color. UI's
can use semantic types to assign appropriate controls to a parameter.

Use dynamic_cast to determine whether a type is of a requested type
<code>
if( dynamic_cast&lt;ISemanticTypeColor*&gt;( semanticType ) != NULL )
{
    // This is the type wanted
}
</code>

Because they are class types, semantic types can be arranged in a hierarchy so that base types
can share UI implementations (if the UI chooses to do that).
</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyValue.TypeInfoHashCode">
            <summary>Get the std::type_info.hash_code() value for the underlying type.</summary>
            <returns>type info hash code.</returns>
        </member>
        <member name="M:MoCapCore.cIPropertyValue.SetValueFromString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set the value from a string.</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyValue.ValueAsString">
            <summary>
Retrieve the value of the property as a string, useful for text serialization or presentation in a UI.
</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyValue.op_Equality(MoCapCore.cIPropertyValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Equality comparison operator. Required for STL container sorting.</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyValue.op_LessThan(MoCapCore.cIPropertyValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Less-than comparison operator. Required for STL container sorting.</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyValue.CopyFrom(MoCapCore.cIPropertyValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy the contents of the given object into this one. We use this instead of an assignment
operator to ensure that all derived classes define it.
</summary>
        </member>
        <member name="M:MoCapCore.cIPropertyValue.Clone">
            <summary>
Create a new object that is a duplicate of this one. The caller assumes ownership of the
returned object.
</summary>
        </member>
        <member name="T:MoCapCore.cIPropertyValue">
            <summary>
Interface base class for parameter value storage. Parameters contain an instance of cIPropertyValue.
</summary>
        </member>
        <member name="M:Core.cThreadLock.Unlock">
            <summary>
Release the lock. The lock must have been previously acquired with a call to Lock() or a
successful call to TryLock(). Declared const so it can be used in const methods.
</summary>
        </member>
        <member name="M:Core.cThreadLock.Lock">
            <summary>Acquire a lock. Declared const so it can be used in const methods.</summary>
        </member>
        <member name="M:Core.cThreadLock.TryLock">
            <summary>Try to acquire a lock. Declared const so it can be used in const methods.</summary>
            <returns>True if the lock was engaged.</returns>
        </member>
        <member name="T:Core.cThreadLock">
            <summary>
A platform-neutral thread lock that can be used to ensure single-thread entry into blocks of code
surrounded by Lock()/TryLock() and Unlock() pairs. Every call to Lock()/TryLock() must be matched
with a call to Unlock()
</summary>
        </member>
        <member name="M:Core.cUID.Generate">
            <summary>Generate a new UID value.</summary>
        </member>
        <member name="M:Core.cUID.Valid">
            <summary>Returns true if the ID is valid.</summary>
        </member>
        <member name="M:Core.cUID.HighBits">
            <summary>Get the high 64 bits of the UID.</summary>
        </member>
        <member name="M:Core.cUID.LowBits">
            <summary>Get the low 64 bits of the UID.</summary>
        </member>
        <member name="M:Core.cUID.SetValue(System.UInt64,System.UInt64)">
            <summary>
Set the value of the UID from two long integer values. It is up to the caller to ensure that
the resulting UID is unique.
</summary>
        </member>
        <member name="M:Core.cUID.#ctor">
            <summary>
Create a default UID. In order to create a UID that has a valid unique identifier you
must call Generate().
</summary>
        </member>
        <member name="T:Core.cUID">
            <summary>
A platform-neutral 128-bit universal identifier. It is essentially guaranteed to never
generate the same ID twice.
</summary>
        </member>
        <member name="M:Core.cICameraFrameFactory.CreateInstance">
            <summary>Create a new instance of a camera frame.</summary>
        </member>
        <member name="M:Core.cISerializer.WriteData(Core.cISerializer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>To Be Deprecated - Write the full contents of the given serializer into this one.</summary>
        </member>
        <member name="M:Core.cIBasicStream.Size">
            <summary>Reports the total current size of the stream.</summary>
        </member>
        <member name="M:Core.cIBasicStream.Seek(System.UInt64)">
            <summary>Seek to the requested (absolute) position in the stream.</summary>
        </member>
        <member name="M:Core.cIBasicStream.Tell">
            <summary>Returns the current position in the file stream.</summary>
        </member>
        <member name="T:Motive.cPropertiesProfileImporter">
            <summary>
Importer class for Property Profiles (modular collection of application settings)
</summary>
        </member>
        <member name="M:MoCapCore.cIImporter.Busy">
            <summary>Returns true if the importer is busy exporting.</summary>
        </member>
        <member name="M:MoCapCore.cIImporter.Import(MoCapCore.cIDataStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Import using the given (open) stream. importers return 0 on success and a non-zero
value on failure. The return value can be mapped to a human-readable string using the MapToString
method.
</summary>
        </member>
        <member name="M:MoCapCore.cIImporter.IsBinary">
            <summary>Should return true for importers that expect to write data in binary format.</summary>
        </member>
        <member name="M:MoCapCore.cIImporter.Properties">
            <summary>
Retrieve the property collection of options for this importer.
</summary>
        </member>
        <member name="M:MoCapCore.cIImporter.Extension">
            <summary>Retrieve the file extension used by importers of this type.</summary>
        </member>
        <member name="M:MoCapCore.cIImporter.Description">
            <summary>Human-readable description of the file type this importer creates.</summary>
        </member>
        <member name="M:MoCapCore.cIImporter.Name">
            <summary>Brief name describing the exported type.</summary>
        </member>
        <member name="T:MoCapCore.cIImporter">
            <summary>
Abstract base class for all importers. Importers use the cIDataStream interface to read their data.
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cIImporter.MapToString(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Motive.cTRCExporter.Scale'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cMultiDeviceTrack.DataTypes'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cMultiDeviceFrame.DataTypes'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'T:MoCapCore.cReconstructionProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cMultiDeviceFrame.DataTypes'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLNode.Accept(tinyxml2wc.XMLVisitor*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLDeclaration'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntAttribute(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.XMLElement.QueryIntText(System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.Print(tinyxml2wc.XMLPrinter*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:tinyxml2wc.TiXMLDocument.NewDeclaration(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:tinyxml2wc.XMLPrinter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MoCapCore.cPropertyCollectionDefinition.AddDefinition(MoCapCore.cPropertyDefinition*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Core.Vector3.makeFloor(Core.Vector3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:SkeletonSolver.cISkeletonSolverObserver.OnSkeletonMarkerChange(SkeletonSolver.CSkeletonSolver!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SkeletonSolver.CSkeleton*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyDisplaySettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cRigidBodyGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cSkeletonGeneralSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Motive.cStreamingSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cAppCore.CameraDiscovery'. -->
    </members>
</doc>